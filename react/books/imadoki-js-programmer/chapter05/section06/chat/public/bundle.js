!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=30)}([function(e,t,n){"use strict";var r,o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};r=function(){return this}();try{r=r||Function("return this")()||(0,eval)("this")}catch(e){"object"===("undefined"==typeof window?"undefined":o(window))&&(r=window)}e.exports=r},function(e,t,n){"use strict";function r(e){if(e)return function(e){for(var t in r.prototype)e[t]=r.prototype[t];return e}(e)}e.exports=r,r.prototype.on=r.prototype.addEventListener=function(e,t){return this._callbacks=this._callbacks||{},(this._callbacks["$"+e]=this._callbacks["$"+e]||[]).push(t),this},r.prototype.once=function(e,t){function n(){this.off(e,n),t.apply(this,arguments)}return n.fn=t,this.on(e,n),this},r.prototype.off=r.prototype.removeListener=r.prototype.removeAllListeners=r.prototype.removeEventListener=function(e,t){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var n,r=this._callbacks["$"+e];if(!r)return this;if(1==arguments.length)return delete this._callbacks["$"+e],this;for(var o=0;o<r.length;o++)if((n=r[o])===t||n.fn===t){r.splice(o,1);break}return this},r.prototype.emit=function(e){this._callbacks=this._callbacks||{};var t=[].slice.call(arguments,1),n=this._callbacks["$"+e];if(n)for(var r=0,o=(n=n.slice(0)).length;r<o;++r)n[r].apply(this,t);return this},r.prototype.listeners=function(e){return this._callbacks=this._callbacks||{},this._callbacks["$"+e]||[]},r.prototype.hasListeners=function(e){return!!this.listeners(e).length}},function(e,t,n){"use strict";(function(e){var r,o=n(51),i=n(23),a=n(57),s=n(58),u=n(59);e&&e.ArrayBuffer&&(r=n(61));var l="undefined"!=typeof navigator&&/Android/i.test(navigator.userAgent),c="undefined"!=typeof navigator&&/PhantomJS/i.test(navigator.userAgent),f=l||c;t.protocol=3;var p=t.packets={open:0,close:1,ping:2,pong:3,message:4,upgrade:5,noop:6},d=o(p),h={type:"error",data:"parser error"},y=n(62);function m(e,t,n){for(var r=new Array(e.length),o=s(e.length,n),i=function(e,n,o){t(n,function(t,n){r[e]=n,o(t,r)})},a=0;a<e.length;a++)i(a,e[a],o)}t.encodePacket=function(n,r,o,i){"function"==typeof r&&(i=r,r=!1),"function"==typeof o&&(i=o,o=null);var a=void 0===n.data?void 0:n.data.buffer||n.data;if(e.ArrayBuffer&&a instanceof ArrayBuffer)return function(e,n,r){if(!n)return t.encodeBase64Packet(e,r);var o=e.data,i=new Uint8Array(o),a=new Uint8Array(1+o.byteLength);a[0]=p[e.type];for(var s=0;s<i.length;s++)a[s+1]=i[s];return r(a.buffer)}(n,r,i);if(y&&a instanceof e.Blob)return function(e,n,r){if(!n)return t.encodeBase64Packet(e,r);if(f)return function(e,n,r){if(!n)return t.encodeBase64Packet(e,r);var o=new FileReader;return o.onload=function(){e.data=o.result,t.encodePacket(e,n,!0,r)},o.readAsArrayBuffer(e.data)}(e,n,r);var o=new Uint8Array(1);o[0]=p[e.type];var i=new y([o.buffer,e.data]);return r(i)}(n,r,i);if(a&&a.base64)return function(e,n){var r="b"+t.packets[e.type]+e.data.data;return n(r)}(n,i);var s=p[n.type];return void 0!==n.data&&(s+=o?u.encode(String(n.data),{strict:!1}):String(n.data)),i(""+s)},t.encodeBase64Packet=function(n,r){var o,i="b"+t.packets[n.type];if(y&&n.data instanceof e.Blob){var a=new FileReader;return a.onload=function(){var e=a.result.split(",")[1];r(i+e)},a.readAsDataURL(n.data)}try{o=String.fromCharCode.apply(null,new Uint8Array(n.data))}catch(e){for(var s=new Uint8Array(n.data),u=new Array(s.length),l=0;l<s.length;l++)u[l]=s[l];o=String.fromCharCode.apply(null,u)}return i+=e.btoa(o),r(i)},t.decodePacket=function(e,n,r){if(void 0===e)return h;if("string"==typeof e){if("b"===e.charAt(0))return t.decodeBase64Packet(e.substr(1),n);if(r&&!1===(e=function(e){try{e=u.decode(e,{strict:!1})}catch(e){return!1}return e}(e)))return h;var o=e.charAt(0);return Number(o)==o&&d[o]?e.length>1?{type:d[o],data:e.substring(1)}:{type:d[o]}:h}o=new Uint8Array(e)[0];var i=a(e,1);return y&&"blob"===n&&(i=new y([i])),{type:d[o],data:i}},t.decodeBase64Packet=function(e,t){var n=d[e.charAt(0)];if(!r)return{type:n,data:{base64:!0,data:e.substr(1)}};var o=r.decode(e.substr(1));return"blob"===t&&y&&(o=new y([o])),{type:n,data:o}},t.encodePayload=function(e,n,r){"function"==typeof n&&(r=n,n=null);var o=i(e);if(n&&o)return y&&!f?t.encodePayloadAsBlob(e,r):t.encodePayloadAsArrayBuffer(e,r);if(!e.length)return r("0:");m(e,function(e,r){t.encodePacket(e,!!o&&n,!1,function(e){r(null,function(e){return e.length+":"+e}(e))})},function(e,t){return r(t.join(""))})},t.decodePayload=function(e,n,r){if("string"!=typeof e)return t.decodePayloadAsBinary(e,n,r);var o;if("function"==typeof n&&(r=n,n=null),""===e)return r(h,0,1);for(var i,a,s="",u=0,l=e.length;u<l;u++){var c=e.charAt(u);if(":"===c){if(""===s||s!=(i=Number(s)))return r(h,0,1);if(s!=(a=e.substr(u+1,i)).length)return r(h,0,1);if(a.length){if(o=t.decodePacket(a,n,!1),h.type===o.type&&h.data===o.data)return r(h,0,1);if(!1===r(o,u+i,l))return}u+=i,s=""}else s+=c}return""!==s?r(h,0,1):void 0},t.encodePayloadAsArrayBuffer=function(e,n){if(!e.length)return n(new ArrayBuffer(0));m(e,function(e,n){t.encodePacket(e,!0,!0,function(e){return n(null,e)})},function(e,t){var r=t.reduce(function(e,t){var n;return e+(n="string"==typeof t?t.length:t.byteLength).toString().length+n+2},0),o=new Uint8Array(r),i=0;return t.forEach(function(e){var t="string"==typeof e,n=e;if(t){for(var r=new Uint8Array(e.length),a=0;a<e.length;a++)r[a]=e.charCodeAt(a);n=r.buffer}o[i++]=t?0:1;var s=n.byteLength.toString();for(a=0;a<s.length;a++)o[i++]=parseInt(s[a]);o[i++]=255;for(r=new Uint8Array(n),a=0;a<r.length;a++)o[i++]=r[a]}),n(o.buffer)})},t.encodePayloadAsBlob=function(e,n){m(e,function(e,n){t.encodePacket(e,!0,!0,function(e){var t=new Uint8Array(1);if(t[0]=1,"string"==typeof e){for(var r=new Uint8Array(e.length),o=0;o<e.length;o++)r[o]=e.charCodeAt(o);e=r.buffer,t[0]=0}var i=(e instanceof ArrayBuffer?e.byteLength:e.size).toString(),a=new Uint8Array(i.length+1);for(o=0;o<i.length;o++)a[o]=parseInt(i[o]);if(a[i.length]=255,y){var s=new y([t.buffer,a.buffer,e]);n(null,s)}})},function(e,t){return n(new y(t))})},t.decodePayloadAsBinary=function(e,n,r){"function"==typeof n&&(r=n,n=null);for(var o=e,i=[];o.byteLength>0;){for(var s=new Uint8Array(o),u=0===s[0],l="",c=1;255!==s[c];c++){if(l.length>310)return r(h,0,1);l+=s[c]}o=a(o,2+l.length),l=parseInt(l);var f=a(o,0,l);if(u)try{f=String.fromCharCode.apply(null,new Uint8Array(f))}catch(e){var p=new Uint8Array(f);f="";for(c=0;c<p.length;c++)f+=String.fromCharCode(p[c])}i.push(f),o=a(o,l)}var d=i.length;i.forEach(function(e,o){r(t.decodePacket(e,n,!0),o,d)})}}).call(this,n(0))},function(e,t,n){"use strict";(function(r){var o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};function i(){var e;try{e=t.storage.debug}catch(e){}return!e&&void 0!==r&&"env"in r&&(e=r.env.DEBUG),e}(t=e.exports=n(43)).log=function(){return"object"===("undefined"==typeof console?"undefined":o(console))&&console.log&&Function.prototype.apply.call(console.log,console,arguments)},t.formatArgs=function(e){var n=this.useColors;if(e[0]=(n?"%c":"")+this.namespace+(n?" %c":" ")+e[0]+(n?"%c ":" ")+"+"+t.humanize(this.diff),!n)return;var r="color: "+this.color;e.splice(1,0,r,"color: inherit");var o=0,i=0;e[0].replace(/%[a-zA-Z%]/g,function(e){"%%"!==e&&"%c"===e&&(i=++o)}),e.splice(i,0,r)},t.save=function(e){try{null==e?t.storage.removeItem("debug"):t.storage.debug=e}catch(e){}},t.load=i,t.useColors=function(){if("undefined"!=typeof window&&window.process&&"renderer"===window.process.type)return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},t.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:function(){try{return window.localStorage}catch(e){}}(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.formatters.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}},t.enable(i())}).call(this,n(7))},function(e,t,n){"use strict";t.encode=function(e){var t="";for(var n in e)e.hasOwnProperty(n)&&(t.length&&(t+="&"),t+=encodeURIComponent(n)+"="+encodeURIComponent(e[n]));return t},t.decode=function(e){for(var t={},n=e.split("&"),r=0,o=n.length;r<o;r++){var i=n[r].split("=");t[decodeURIComponent(i[0])]=decodeURIComponent(i[1])}return t}},function(e,t,n){"use strict";e.exports=function(e,t){var n=function(){};n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e}},function(e,t,n){"use strict";(function(r){var o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};function i(){var e;try{e=t.storage.debug}catch(e){}return!e&&void 0!==r&&"env"in r&&(e=r.env.DEBUG),e}(t=e.exports=n(63)).log=function(){return"object"===("undefined"==typeof console?"undefined":o(console))&&console.log&&Function.prototype.apply.call(console.log,console,arguments)},t.formatArgs=function(e){var n=this.useColors;if(e[0]=(n?"%c":"")+this.namespace+(n?" %c":" ")+e[0]+(n?"%c ":" ")+"+"+t.humanize(this.diff),!n)return;var r="color: "+this.color;e.splice(1,0,r,"color: inherit");var o=0,i=0;e[0].replace(/%[a-zA-Z%]/g,function(e){"%%"!==e&&"%c"===e&&(i=++o)}),e.splice(i,0,r)},t.save=function(e){try{null==e?t.storage.removeItem("debug"):t.storage.debug=e}catch(e){}},t.load=i,t.useColors=function(){if("undefined"!=typeof window&&window.process&&"renderer"===window.process.type)return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},t.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:function(){try{return window.localStorage}catch(e){}}(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.formatters.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}},t.enable(i())}).call(this,n(7))},function(e,t,n){"use strict";var r,o,i=e.exports={};function a(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function u(e){if(r===setTimeout)return setTimeout(e,0);if((r===a||!r)&&setTimeout)return r=setTimeout,setTimeout(e,0);try{return r(e,0)}catch(t){try{return r.call(null,e,0)}catch(t){return r.call(this,e,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:a}catch(e){r=a}try{o="function"==typeof clearTimeout?clearTimeout:s}catch(e){o=s}}();var l,c=[],f=!1,p=-1;function d(){f&&l&&(f=!1,l.length?c=l.concat(c):p=-1,c.length&&h())}function h(){if(!f){var e=u(d);f=!0;for(var t=c.length;t;){for(l=c,c=[];++p<t;)l&&l[p].run();p=-1,t=c.length}l=null,f=!1,function(e){if(o===clearTimeout)return clearTimeout(e);if((o===s||!o)&&clearTimeout)return o=clearTimeout,clearTimeout(e);try{o(e)}catch(t){try{return o.call(null,e)}catch(t){return o.call(this,e)}}}(e)}}function y(e,t){this.fun=e,this.array=t}function m(){}i.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new y(e,t)),1!==c.length||f||u(h)},y.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=m,i.addListener=m,i.once=m,i.off=m,i.removeListener=m,i.removeAllListeners=m,i.emit=m,i.prependListener=m,i.prependOnceListener=m,i.listeners=function(e){return[]},i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(e,t,n){"use strict";var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=1e3,i=60*o,a=60*i,s=24*a,u=365.25*s;function l(e,t,n){if(!(e<t))return e<1.5*t?Math.floor(e/t)+" "+n:Math.ceil(e/t)+" "+n+"s"}e.exports=function(e,t){t=t||{};var n=void 0===e?"undefined":r(e);if("string"===n&&e.length>0)return function(e){if((e=String(e)).length>100)return;var t=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(e);if(!t)return;var n=parseFloat(t[1]);switch((t[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return n*u;case"days":case"day":case"d":return n*s;case"hours":case"hour":case"hrs":case"hr":case"h":return n*a;case"minutes":case"minute":case"mins":case"min":case"m":return n*i;case"seconds":case"second":case"secs":case"sec":case"s":return n*o;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return n;default:return}}(e);if("number"===n&&!1===isNaN(e))return t.long?function(e){return l(e,s,"day")||l(e,a,"hour")||l(e,i,"minute")||l(e,o,"second")||e+" ms"}(e):function(e){if(e>=s)return Math.round(e/s)+"d";if(e>=a)return Math.round(e/a)+"h";if(e>=i)return Math.round(e/i)+"m";if(e>=o)return Math.round(e/o)+"s";return e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},function(e,t,n){"use strict";var r=n(44)("socket.io-parser"),o=n(1),i=n(46),a=n(18),s=n(19);function u(){}t.protocol=4,t.types=["CONNECT","DISCONNECT","EVENT","ACK","ERROR","BINARY_EVENT","BINARY_ACK"],t.CONNECT=0,t.DISCONNECT=1,t.EVENT=2,t.ACK=3,t.ERROR=4,t.BINARY_EVENT=5,t.BINARY_ACK=6,t.Encoder=u,t.Decoder=f;var l=t.ERROR+'"encode error"';function c(e){var n=""+e.type;if(t.BINARY_EVENT!==e.type&&t.BINARY_ACK!==e.type||(n+=e.attachments+"-"),e.nsp&&"/"!==e.nsp&&(n+=e.nsp+","),null!=e.id&&(n+=e.id),null!=e.data){var o=function(e){try{return JSON.stringify(e)}catch(e){return!1}}(e.data);if(!1===o)return l;n+=o}return r("encoded %j as %s",e,n),n}function f(){this.reconstructor=null}function p(e){this.reconPack=e,this.buffers=[]}function d(e){return{type:t.ERROR,data:"parser error: "+e}}u.prototype.encode=function(e,n){(r("encoding packet %j",e),t.BINARY_EVENT===e.type||t.BINARY_ACK===e.type)?function(e,t){i.removeBlobs(e,function(e){var n=i.deconstructPacket(e),r=c(n.packet),o=n.buffers;o.unshift(r),t(o)})}(e,n):n([c(e)])},o(f.prototype),f.prototype.add=function(e){var n;if("string"==typeof e)n=function(e){var n=0,o={type:Number(e.charAt(0))};if(null==t.types[o.type])return d("unknown packet type "+o.type);if(t.BINARY_EVENT===o.type||t.BINARY_ACK===o.type){for(var i="";"-"!==e.charAt(++n)&&(i+=e.charAt(n),n!=e.length););if(i!=Number(i)||"-"!==e.charAt(n))throw new Error("Illegal attachments");o.attachments=Number(i)}if("/"===e.charAt(n+1))for(o.nsp="";++n;){var s=e.charAt(n);if(","===s)break;if(o.nsp+=s,n===e.length)break}else o.nsp="/";var u=e.charAt(n+1);if(""!==u&&Number(u)==u){for(o.id="";++n;){var s=e.charAt(n);if(null==s||Number(s)!=s){--n;break}if(o.id+=e.charAt(n),n===e.length)break}o.id=Number(o.id)}if(e.charAt(++n)){var l=function(e){try{return JSON.parse(e)}catch(e){return!1}}(e.substr(n)),c=!1!==l&&(o.type===t.ERROR||a(l));if(!c)return d("invalid payload");o.data=l}return r("decoded %s as %j",e,o),o}(e),t.BINARY_EVENT===n.type||t.BINARY_ACK===n.type?(this.reconstructor=new p(n),0===this.reconstructor.reconPack.attachments&&this.emit("decoded",n)):this.emit("decoded",n);else{if(!s(e)&&!e.base64)throw new Error("Unknown type: "+e);if(!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");(n=this.reconstructor.takeBinaryData(e))&&(this.reconstructor=null,this.emit("decoded",n))}},f.prototype.destroy=function(){this.reconstructor&&this.reconstructor.finishedReconstruction()},p.prototype.takeBinaryData=function(e){if(this.buffers.push(e),this.buffers.length===this.reconPack.attachments){var t=i.reconstructPacket(this.reconPack,this.buffers);return this.finishedReconstruction(),t}return null},p.prototype.finishedReconstruction=function(){this.reconPack=null,this.buffers=[]}},function(e,t,n){"use strict";(function(t){var r=n(49);e.exports=function(e){var n=e.xdomain,o=e.xscheme,i=e.enablesXDR;try{if("undefined"!=typeof XMLHttpRequest&&(!n||r))return new XMLHttpRequest}catch(e){}try{if("undefined"!=typeof XDomainRequest&&!o&&i)return new XDomainRequest}catch(e){}if(!n)try{return new(t[["Active"].concat("Object").join("X")])("Microsoft.XMLHTTP")}catch(e){}}}).call(this,n(0))},function(e,t,n){"use strict";var r=n(2),o=n(1);function i(e){this.path=e.path,this.hostname=e.hostname,this.port=e.port,this.secure=e.secure,this.query=e.query,this.timestampParam=e.timestampParam,this.timestampRequests=e.timestampRequests,this.readyState="",this.agent=e.agent||!1,this.socket=e.socket,this.enablesXDR=e.enablesXDR,this.pfx=e.pfx,this.key=e.key,this.passphrase=e.passphrase,this.cert=e.cert,this.ca=e.ca,this.ciphers=e.ciphers,this.rejectUnauthorized=e.rejectUnauthorized,this.forceNode=e.forceNode,this.extraHeaders=e.extraHeaders,this.localAddress=e.localAddress}e.exports=i,o(i.prototype),i.prototype.onError=function(e,t){var n=new Error(e);return n.type="TransportError",n.description=t,this.emit("error",n),this},i.prototype.open=function(){return"closed"!==this.readyState&&""!==this.readyState||(this.readyState="opening",this.doOpen()),this},i.prototype.close=function(){return"opening"!==this.readyState&&"open"!==this.readyState||(this.doClose(),this.onClose()),this},i.prototype.send=function(e){if("open"!==this.readyState)throw new Error("Transport not open");this.write(e)},i.prototype.onOpen=function(){this.readyState="open",this.writable=!0,this.emit("open")},i.prototype.onData=function(e){var t=r.decodePacket(e,this.socket.binaryType);this.onPacket(t)},i.prototype.onPacket=function(e){this.emit("packet",e)},i.prototype.onClose=function(){this.readyState="closed",this.emit("close")}},function(e,t,n){"use strict";e.exports=n(31)},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(e){r[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,a,s=function(e){if(null===e||void 0===e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),u=1;u<arguments.length;u++){for(var l in n=Object(arguments[u]))o.call(n,l)&&(s[l]=n[l]);if(r){a=r(n);for(var c=0;c<a.length;c++)i.call(n,a[c])&&(s[a[c]]=n[a[c]])}}return s}},function(e,t,n){"use strict";var r=function(e){};e.exports=function(e,t,n,o,i,a,s,u){if(r(t),!e){var l;if(void 0===t)l=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[n,o,i,a,s,u],f=0;(l=new Error(t.replace(/%s/g,function(){return c[f++]}))).name="Invariant Violation"}throw l.framesToPop=1,l}}},function(e,t,n){"use strict";e.exports={}},function(e,t,n){"use strict";function r(e){return function(){return e}}var o=function(){};o.thatReturns=r,o.thatReturnsFalse=r(!1),o.thatReturnsTrue=r(!0),o.thatReturnsNull=r(null),o.thatReturnsThis=function(){return this},o.thatReturnsArgument=function(e){return e},e.exports=o},function(e,t,n){"use strict";var r=/^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,o=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];e.exports=function(e){var t=e,n=e.indexOf("["),i=e.indexOf("]");-1!=n&&-1!=i&&(e=e.substring(0,n)+e.substring(n,i).replace(/:/g,";")+e.substring(i,e.length));for(var a=r.exec(e||""),s={},u=14;u--;)s[o[u]]=a[u]||"";return-1!=n&&-1!=i&&(s.source=t,s.host=s.host.substring(1,s.host.length-1).replace(/;/g,":"),s.authority=s.authority.replace("[","").replace("]","").replace(/;/g,":"),s.ipv6uri=!0),s}},function(e,t,n){"use strict";var r={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==r.call(e)}},function(e,t,n){"use strict";(function(t){e.exports=function(e){return n&&t.Buffer.isBuffer(e)||r&&(e instanceof t.ArrayBuffer||o(e))};var n="function"==typeof t.Buffer&&"function"==typeof t.Buffer.isBuffer,r="function"==typeof t.ArrayBuffer,o=r&&"function"==typeof t.ArrayBuffer.isView?t.ArrayBuffer.isView:function(e){return e.buffer instanceof t.ArrayBuffer}}).call(this,n(0))},function(e,t,n){"use strict";var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=n(47),i=n(27),a=n(1),s=n(9),u=n(28),l=n(29),c=n(3)("socket.io-client:manager"),f=n(26),p=n(68),d=Object.prototype.hasOwnProperty;function h(e,t){if(!(this instanceof h))return new h(e,t);e&&"object"===(void 0===e?"undefined":r(e))&&(t=e,e=void 0),(t=t||{}).path=t.path||"/socket.io",this.nsps={},this.subs=[],this.opts=t,this.reconnection(!1!==t.reconnection),this.reconnectionAttempts(t.reconnectionAttempts||1/0),this.reconnectionDelay(t.reconnectionDelay||1e3),this.reconnectionDelayMax(t.reconnectionDelayMax||5e3),this.randomizationFactor(t.randomizationFactor||.5),this.backoff=new p({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()}),this.timeout(null==t.timeout?2e4:t.timeout),this.readyState="closed",this.uri=e,this.connecting=[],this.lastPing=null,this.encoding=!1,this.packetBuffer=[];var n=t.parser||s;this.encoder=new n.Encoder,this.decoder=new n.Decoder,this.autoConnect=!1!==t.autoConnect,this.autoConnect&&this.open()}e.exports=h,h.prototype.emitAll=function(){for(var e in this.emit.apply(this,arguments),this.nsps)d.call(this.nsps,e)&&this.nsps[e].emit.apply(this.nsps[e],arguments)},h.prototype.updateSocketIds=function(){for(var e in this.nsps)d.call(this.nsps,e)&&(this.nsps[e].id=this.generateId(e))},h.prototype.generateId=function(e){return("/"===e?"":e+"#")+this.engine.id},a(h.prototype),h.prototype.reconnection=function(e){return arguments.length?(this._reconnection=!!e,this):this._reconnection},h.prototype.reconnectionAttempts=function(e){return arguments.length?(this._reconnectionAttempts=e,this):this._reconnectionAttempts},h.prototype.reconnectionDelay=function(e){return arguments.length?(this._reconnectionDelay=e,this.backoff&&this.backoff.setMin(e),this):this._reconnectionDelay},h.prototype.randomizationFactor=function(e){return arguments.length?(this._randomizationFactor=e,this.backoff&&this.backoff.setJitter(e),this):this._randomizationFactor},h.prototype.reconnectionDelayMax=function(e){return arguments.length?(this._reconnectionDelayMax=e,this.backoff&&this.backoff.setMax(e),this):this._reconnectionDelayMax},h.prototype.timeout=function(e){return arguments.length?(this._timeout=e,this):this._timeout},h.prototype.maybeReconnectOnOpen=function(){!this.reconnecting&&this._reconnection&&0===this.backoff.attempts&&this.reconnect()},h.prototype.open=h.prototype.connect=function(e,t){if(c("readyState %s",this.readyState),~this.readyState.indexOf("open"))return this;c("opening %s",this.uri),this.engine=o(this.uri,this.opts);var n=this.engine,r=this;this.readyState="opening",this.skipReconnect=!1;var i=u(n,"open",function(){r.onopen(),e&&e()}),a=u(n,"error",function(t){if(c("connect_error"),r.cleanup(),r.readyState="closed",r.emitAll("connect_error",t),e){var n=new Error("Connection error");n.data=t,e(n)}else r.maybeReconnectOnOpen()});if(!1!==this._timeout){var s=this._timeout;c("connect attempt will timeout after %d",s);var l=setTimeout(function(){c("connect attempt timed out after %d",s),i.destroy(),n.close(),n.emit("error","timeout"),r.emitAll("connect_timeout",s)},s);this.subs.push({destroy:function(){clearTimeout(l)}})}return this.subs.push(i),this.subs.push(a),this},h.prototype.onopen=function(){c("open"),this.cleanup(),this.readyState="open",this.emit("open");var e=this.engine;this.subs.push(u(e,"data",l(this,"ondata"))),this.subs.push(u(e,"ping",l(this,"onping"))),this.subs.push(u(e,"pong",l(this,"onpong"))),this.subs.push(u(e,"error",l(this,"onerror"))),this.subs.push(u(e,"close",l(this,"onclose"))),this.subs.push(u(this.decoder,"decoded",l(this,"ondecoded")))},h.prototype.onping=function(){this.lastPing=new Date,this.emitAll("ping")},h.prototype.onpong=function(){this.emitAll("pong",new Date-this.lastPing)},h.prototype.ondata=function(e){this.decoder.add(e)},h.prototype.ondecoded=function(e){this.emit("packet",e)},h.prototype.onerror=function(e){c("error",e),this.emitAll("error",e)},h.prototype.socket=function(e,t){var n=this.nsps[e];if(!n){n=new i(this,e,t),this.nsps[e]=n;var r=this;n.on("connecting",o),n.on("connect",function(){n.id=r.generateId(e)}),this.autoConnect&&o()}function o(){~f(r.connecting,n)||r.connecting.push(n)}return n},h.prototype.destroy=function(e){var t=f(this.connecting,e);~t&&this.connecting.splice(t,1),this.connecting.length||this.close()},h.prototype.packet=function(e){c("writing packet %j",e);var t=this;e.query&&0===e.type&&(e.nsp+="?"+e.query),t.encoding?t.packetBuffer.push(e):(t.encoding=!0,this.encoder.encode(e,function(n){for(var r=0;r<n.length;r++)t.engine.write(n[r],e.options);t.encoding=!1,t.processPacketQueue()}))},h.prototype.processPacketQueue=function(){if(this.packetBuffer.length>0&&!this.encoding){var e=this.packetBuffer.shift();this.packet(e)}},h.prototype.cleanup=function(){c("cleanup");for(var e=this.subs.length,t=0;t<e;t++){this.subs.shift().destroy()}this.packetBuffer=[],this.encoding=!1,this.lastPing=null,this.decoder.destroy()},h.prototype.close=h.prototype.disconnect=function(){c("disconnect"),this.skipReconnect=!0,this.reconnecting=!1,"opening"===this.readyState&&this.cleanup(),this.backoff.reset(),this.readyState="closed",this.engine&&this.engine.close()},h.prototype.onclose=function(e){c("onclose"),this.cleanup(),this.backoff.reset(),this.readyState="closed",this.emit("close",e),this._reconnection&&!this.skipReconnect&&this.reconnect()},h.prototype.reconnect=function(){if(this.reconnecting||this.skipReconnect)return this;var e=this;if(this.backoff.attempts>=this._reconnectionAttempts)c("reconnect failed"),this.backoff.reset(),this.emitAll("reconnect_failed"),this.reconnecting=!1;else{var t=this.backoff.duration();c("will wait %dms before reconnect attempt",t),this.reconnecting=!0;var n=setTimeout(function(){e.skipReconnect||(c("attempting reconnect"),e.emitAll("reconnect_attempt",e.backoff.attempts),e.emitAll("reconnecting",e.backoff.attempts),e.skipReconnect||e.open(function(t){t?(c("reconnect attempt error"),e.reconnecting=!1,e.reconnect(),e.emitAll("reconnect_error",t.data)):(c("reconnect success"),e.onreconnect())}))},t);this.subs.push({destroy:function(){clearTimeout(n)}})}},h.prototype.onreconnect=function(){var e=this.backoff.attempts;this.reconnecting=!1,this.backoff.reset(),this.updateSocketIds(),this.emitAll("reconnect",e)}},function(e,t,n){"use strict";(function(e){var r=n(10),o=n(50),i=n(64),a=n(65);t.polling=function(t){var n=!1,a=!1,s=!1!==t.jsonp;if(e.location){var u="https:"===location.protocol,l=location.port;l||(l=u?443:80),n=t.hostname!==location.hostname||l!==t.port,a=t.secure!==u}if(t.xdomain=n,t.xscheme=a,"open"in new r(t)&&!t.forceJSONP)return new o(t);if(!s)throw new Error("JSONP disabled");return new i(t)},t.websocket=a}).call(this,n(0))},function(e,t,n){"use strict";var r=n(11),o=n(4),i=n(2),a=n(5),s=n(25),u=n(6)("engine.io-client:polling");e.exports=c;var l=null!=new(n(10))({xdomain:!1}).responseType;function c(e){var t=e&&e.forceBase64;l&&!t||(this.supportsBinary=!1),r.call(this,e)}a(c,r),c.prototype.name="polling",c.prototype.doOpen=function(){this.poll()},c.prototype.pause=function(e){var t=this;function n(){u("paused"),t.readyState="paused",e()}if(this.readyState="pausing",this.polling||!this.writable){var r=0;this.polling&&(u("we are currently polling - waiting to pause"),r++,this.once("pollComplete",function(){u("pre-pause polling complete"),--r||n()})),this.writable||(u("we are currently writing - waiting to pause"),r++,this.once("drain",function(){u("pre-pause writing complete"),--r||n()}))}else n()},c.prototype.poll=function(){u("polling"),this.polling=!0,this.doPoll(),this.emit("poll")},c.prototype.onData=function(e){var t=this;u("polling got data %s",e);i.decodePayload(e,this.socket.binaryType,function(e,n,r){if("opening"===t.readyState&&t.onOpen(),"close"===e.type)return t.onClose(),!1;t.onPacket(e)}),"closed"!==this.readyState&&(this.polling=!1,this.emit("pollComplete"),"open"===this.readyState?this.poll():u('ignoring poll - transport state "%s"',this.readyState))},c.prototype.doClose=function(){var e=this;function t(){u("writing close packet"),e.write([{type:"close"}])}"open"===this.readyState?(u("transport open - closing"),t()):(u("transport not open - deferring close"),this.once("open",t))},c.prototype.write=function(e){var t=this;this.writable=!1;var n=function(){t.writable=!0,t.emit("drain")};i.encodePayload(e,this.supportsBinary,function(e){t.doWrite(e,n)})},c.prototype.uri=function(){var e=this.query||{},t=this.secure?"https":"http",n="";return!1!==this.timestampRequests&&(e[this.timestampParam]=s()),this.supportsBinary||e.sid||(e.b64=1),e=o.encode(e),this.port&&("https"===t&&443!==Number(this.port)||"http"===t&&80!==Number(this.port))&&(n=":"+this.port),e.length&&(e="?"+e),t+"://"+(-1!==this.hostname.indexOf(":")?"["+this.hostname+"]":this.hostname)+n+this.path+e}},function(e,t,n){"use strict";(function(t){var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=n(56),i=Object.prototype.toString,a="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===i.call(Blob),s="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===i.call(File);e.exports=function e(n){if(!n||"object"!==(void 0===n?"undefined":r(n)))return!1;if(o(n)){for(var i=0,u=n.length;i<u;i++)if(e(n[i]))return!0;return!1}if("function"==typeof t&&t.isBuffer&&t.isBuffer(n)||"function"==typeof ArrayBuffer&&n instanceof ArrayBuffer||a&&n instanceof Blob||s&&n instanceof File)return!0;if(n.toJSON&&"function"==typeof n.toJSON&&1===arguments.length)return e(n.toJSON(),!0);for(var l in n)if(Object.prototype.hasOwnProperty.call(n,l)&&e(n[l]))return!0;return!1}}).call(this,n(52).Buffer)},function(e,t){(function(t){e.exports=t}).call(this,{})},function(e,t,n){"use strict";var r,o="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),i=64,a={},s=0,u=0;function l(e){var t="";do{t=o[e%i]+t,e=Math.floor(e/i)}while(e>0);return t}function c(){var e=l(+new Date);return e!==r?(s=0,r=e):e+"."+l(s++)}for(;u<i;u++)a[o[u]]=u;c.encode=l,c.decode=function(e){var t=0;for(u=0;u<e.length;u++)t=t*i+a[e.charAt(u)];return t},e.exports=c},function(e,t,n){"use strict";var r=[].indexOf;e.exports=function(e,t){if(r)return e.indexOf(t);for(var n=0;n<e.length;++n)if(e[n]===t)return n;return-1}},function(e,t,n){"use strict";var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=n(9),i=n(1),a=n(67),s=n(28),u=n(29),l=n(3)("socket.io-client:socket"),c=n(4),f=n(23);e.exports=h;var p={connect:1,connect_error:1,connect_timeout:1,connecting:1,disconnect:1,error:1,reconnect:1,reconnect_attempt:1,reconnect_failed:1,reconnect_error:1,reconnecting:1,ping:1,pong:1},d=i.prototype.emit;function h(e,t,n){this.io=e,this.nsp=t,this.json=this,this.ids=0,this.acks={},this.receiveBuffer=[],this.sendBuffer=[],this.connected=!1,this.disconnected=!0,this.flags={},n&&n.query&&(this.query=n.query),this.io.autoConnect&&this.open()}i(h.prototype),h.prototype.subEvents=function(){if(!this.subs){var e=this.io;this.subs=[s(e,"open",u(this,"onopen")),s(e,"packet",u(this,"onpacket")),s(e,"close",u(this,"onclose"))]}},h.prototype.open=h.prototype.connect=function(){return this.connected?this:(this.subEvents(),this.io.open(),"open"===this.io.readyState&&this.onopen(),this.emit("connecting"),this)},h.prototype.send=function(){var e=a(arguments);return e.unshift("message"),this.emit.apply(this,e),this},h.prototype.emit=function(e){if(p.hasOwnProperty(e))return d.apply(this,arguments),this;var t=a(arguments),n={type:(void 0!==this.flags.binary?this.flags.binary:f(t))?o.BINARY_EVENT:o.EVENT,data:t,options:{}};return n.options.compress=!this.flags||!1!==this.flags.compress,"function"==typeof t[t.length-1]&&(l("emitting packet with ack id %d",this.ids),this.acks[this.ids]=t.pop(),n.id=this.ids++),this.connected?this.packet(n):this.sendBuffer.push(n),this.flags={},this},h.prototype.packet=function(e){e.nsp=this.nsp,this.io.packet(e)},h.prototype.onopen=function(){if(l("transport is open - connecting"),"/"!==this.nsp)if(this.query){var e="object"===r(this.query)?c.encode(this.query):this.query;l("sending connect packet with query %s",e),this.packet({type:o.CONNECT,query:e})}else this.packet({type:o.CONNECT})},h.prototype.onclose=function(e){l("close (%s)",e),this.connected=!1,this.disconnected=!0,delete this.id,this.emit("disconnect",e)},h.prototype.onpacket=function(e){var t=e.nsp===this.nsp,n=e.type===o.ERROR&&"/"===e.nsp;if(t||n)switch(e.type){case o.CONNECT:this.onconnect();break;case o.EVENT:case o.BINARY_EVENT:this.onevent(e);break;case o.ACK:case o.BINARY_ACK:this.onack(e);break;case o.DISCONNECT:this.ondisconnect();break;case o.ERROR:this.emit("error",e.data)}},h.prototype.onevent=function(e){var t=e.data||[];l("emitting event %j",t),null!=e.id&&(l("attaching ack callback to event"),t.push(this.ack(e.id))),this.connected?d.apply(this,t):this.receiveBuffer.push(t)},h.prototype.ack=function(e){var t=this,n=!1;return function(){if(!n){n=!0;var r=a(arguments);l("sending ack %j",r),t.packet({type:f(r)?o.BINARY_ACK:o.ACK,id:e,data:r})}}},h.prototype.onack=function(e){var t=this.acks[e.id];"function"==typeof t?(l("calling ack %s with %j",e.id,e.data),t.apply(this,e.data),delete this.acks[e.id]):l("bad ack %s",e.id)},h.prototype.onconnect=function(){this.connected=!0,this.disconnected=!1,this.emit("connect"),this.emitBuffered()},h.prototype.emitBuffered=function(){var e;for(e=0;e<this.receiveBuffer.length;e++)d.apply(this,this.receiveBuffer[e]);for(this.receiveBuffer=[],e=0;e<this.sendBuffer.length;e++)this.packet(this.sendBuffer[e]);this.sendBuffer=[]},h.prototype.ondisconnect=function(){l("server disconnect (%s)",this.nsp),this.destroy(),this.onclose("io server disconnect")},h.prototype.destroy=function(){if(this.subs){for(var e=0;e<this.subs.length;e++)this.subs[e].destroy();this.subs=null}this.io.destroy(this)},h.prototype.close=h.prototype.disconnect=function(){return this.connected&&(l("performing disconnect (%s)",this.nsp),this.packet({type:o.DISCONNECT})),this.destroy(),this.connected&&this.onclose("io client disconnect"),this},h.prototype.compress=function(e){return this.flags.compress=e,this},h.prototype.binary=function(e){return this.flags.binary=e,this}},function(e,t,n){"use strict";e.exports=function(e,t,n){return e.on(t,n),{destroy:function(){e.removeListener(t,n)}}}},function(e,t,n){"use strict";var r=[].slice;e.exports=function(e,t){if("string"==typeof t&&(t=e[t]),"function"!=typeof t)throw new Error("bind() requires a function");var n=r.call(arguments,2);return function(){return t.apply(e,n.concat(r.call(arguments)))}}},function(e,t,n){"use strict";var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=a(n(12)),i=a(n(32));a(n(40));function a(e){return e&&e.__esModule?e:{default:e}}function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function l(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var c=a(n(41)).default.connect("http://localhost:3001"),f=function(e){function t(e){s(this,t);var n=u(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={name:"",messsage:""},n}return l(t,o.default.Component),r(t,[{key:"nameChanged",value:function(e){this.setState({name:e.target.value})}},{key:"messageChanged",value:function(e){this.setState({message:e.target.value})}},{key:"send",value:function(){c.emit("chat-msg",{name:this.state.name,message:this.state.message}),this.setState({message:""})}},{key:"render",value:function(){var e=this;return o.default.createElement("div",null,"名前:",o.default.createElement("br",null),o.default.createElement("input",{value:this.state.name,onChange:function(t){return e.nameChanged(t)}}),o.default.createElement("br",null),"メッセージ:",o.default.createElement("br",null),o.default.createElement("input",{value:this.state.message,onChange:function(t){return e.messageChanged(t)}}),o.default.createElement("br",null),o.default.createElement("button",{onClick:function(t){return e.send()}},"送信"))}}]),t}(),p=function(e){function t(e){s(this,t);var n=u(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={logs:[]},n}return l(t,o.default.Component),r(t,[{key:"componentDidMount",value:function(){var e=this;c.on("chat-msg",function(t){var n=e.state.logs;t.key="key_"+(e.state.logs.length+1),console.log(t),n.unshift(t),e.setState({logs:n})})}},{key:"render",value:function(){var e=this.state.logs.map(function(e){return o.default.createElement("div",{key:e.key},o.default.createElement("span",null,e.name),o.default.createElement("span",null,": ",e.message),o.default.createElement("p",{style:{clear:"both"}}))});return o.default.createElement("div",null,o.default.createElement("h1",null,"リアルタイムチャット"),o.default.createElement(f,null),o.default.createElement("div",null,e))}}]),t}();i.default.render(o.default.createElement(p,null),document.getElementById("root"))},function(e,t,n){"use strict";
/** @license React v16.4.2
 * react.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=n(13),i=n(14),a=n(15),s=n(16),u="function"==typeof Symbol&&Symbol.for,l=u?Symbol.for("react.element"):60103,c=u?Symbol.for("react.portal"):60106,f=u?Symbol.for("react.fragment"):60107,p=u?Symbol.for("react.strict_mode"):60108,d=u?Symbol.for("react.profiler"):60114,h=u?Symbol.for("react.provider"):60109,y=u?Symbol.for("react.context"):60110,m=u?Symbol.for("react.async_mode"):60111,g=u?Symbol.for("react.forward_ref"):60112;u&&Symbol.for("react.timeout");var v="function"==typeof Symbol&&Symbol.iterator;function b(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);i(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}var w={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}};function C(e,t,n){this.props=e,this.context=t,this.refs=a,this.updater=n||w}function k(){}function E(e,t,n){this.props=e,this.context=t,this.refs=a,this.updater=n||w}C.prototype.isReactComponent={},C.prototype.setState=function(e,t){"object"!==(void 0===e?"undefined":r(e))&&"function"!=typeof e&&null!=e&&b("85"),this.updater.enqueueSetState(this,e,t,"setState")},C.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},k.prototype=C.prototype;var x=E.prototype=new k;x.constructor=E,o(x,C.prototype),x.isPureReactComponent=!0;var S={current:null},_=Object.prototype.hasOwnProperty,T={key:!0,ref:!0,__self:!0,__source:!0};function P(e,t,n){var r=void 0,o={},i=null,a=null;if(null!=t)for(r in void 0!==t.ref&&(a=t.ref),void 0!==t.key&&(i=""+t.key),t)_.call(t,r)&&!T.hasOwnProperty(r)&&(o[r]=t[r]);var s=arguments.length-2;if(1===s)o.children=n;else if(1<s){for(var u=Array(s),c=0;c<s;c++)u[c]=arguments[c+2];o.children=u}if(e&&e.defaultProps)for(r in s=e.defaultProps)void 0===o[r]&&(o[r]=s[r]);return{$$typeof:l,type:e,key:i,ref:a,props:o,_owner:S.current}}function A(e){return"object"===(void 0===e?"undefined":r(e))&&null!==e&&e.$$typeof===l}var F=/\/+/g,R=[];function N(e,t,n,r){if(R.length){var o=R.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function O(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>R.length&&R.push(e)}function B(e,t,n,o){var i=void 0===e?"undefined":r(e);"undefined"!==i&&"boolean"!==i||(e=null);var a=!1;if(null===e)a=!0;else switch(i){case"string":case"number":a=!0;break;case"object":switch(e.$$typeof){case l:case c:a=!0}}if(a)return n(o,e,""===t?"."+U(e,0):t),1;if(a=0,t=""===t?".":t+":",Array.isArray(e))for(var s=0;s<e.length;s++){var u=t+U(i=e[s],s);a+=B(i,u,n,o)}else if(null===e||void 0===e?u=null:u="function"==typeof(u=v&&e[v]||e["@@iterator"])?u:null,"function"==typeof u)for(e=u.call(e),s=0;!(i=e.next()).done;)a+=B(i=i.value,u=t+U(i,s++),n,o);else"object"===i&&b("31","[object Object]"===(n=""+e)?"object with keys {"+Object.keys(e).join(", ")+"}":n,"");return a}function U(e,t){return"object"===(void 0===e?"undefined":r(e))&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return t[e]})}(e.key):t.toString(36)}function I(e,t){e.func.call(e.context,t,e.count++)}function D(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?M(e,r,n,s.thatReturnsArgument):null!=e&&(A(e)&&(t=o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(F,"$&/")+"/")+n,e={$$typeof:l,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}),r.push(e))}function M(e,t,n,r,o){var i="";null!=n&&(i=(""+n).replace(F,"$&/")+"/"),t=N(t,i,r,o),null==e||B(e,"",D,t),O(t)}var L={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return M(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;t=N(null,null,t,n),null==e||B(e,"",I,t),O(t)},count:function(e){return null==e?0:B(e,"",s.thatReturnsNull,null)},toArray:function(e){var t=[];return M(e,t,null,s.thatReturnsArgument),t},only:function(e){return A(e)||b("143"),e}},createRef:function(){return{current:null}},Component:C,PureComponent:E,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:y,_calculateChangedBits:t,_defaultValue:e,_currentValue:e,_currentValue2:e,_changedBits:0,_changedBits2:0,Provider:null,Consumer:null}).Provider={$$typeof:h,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:g,render:e}},Fragment:f,StrictMode:p,unstable_AsyncMode:m,unstable_Profiler:d,createElement:P,cloneElement:function(e,t,n){(null===e||void 0===e)&&b("267",e);var r=void 0,i=o({},e.props),a=e.key,s=e.ref,u=e._owner;if(null!=t){void 0!==t.ref&&(s=t.ref,u=S.current),void 0!==t.key&&(a=""+t.key);var c=void 0;for(r in e.type&&e.type.defaultProps&&(c=e.type.defaultProps),t)_.call(t,r)&&!T.hasOwnProperty(r)&&(i[r]=void 0===t[r]&&void 0!==c?c[r]:t[r])}if(1===(r=arguments.length-2))i.children=n;else if(1<r){c=Array(r);for(var f=0;f<r;f++)c[f]=arguments[f+2];i.children=c}return{$$typeof:l,type:e.type,key:a,ref:s,props:i,_owner:u}},createFactory:function(e){var t=P.bind(null,e);return t.type=e,t},isValidElement:A,version:"16.4.2",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:S,assign:o}},j={default:L},z=j&&L||j;e.exports=z.default?z.default:z},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(33)},function(e,t,n){"use strict";
/** @license React v16.4.2
 * react-dom.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=n(14),i=n(12),a=n(34),s=n(13),u=n(16),l=n(35),c=n(36),f=n(37),p=n(15);function d(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);o(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}i||d("227");var h={_caughtError:null,_hasCaughtError:!1,_rethrowError:null,_hasRethrowError:!1,invokeGuardedCallback:function(e,t,n,r,o,i,a,s,u){(function(e,t,n,r,o,i,a,s,u){this._hasCaughtError=!1,this._caughtError=null;var l=Array.prototype.slice.call(arguments,3);try{t.apply(n,l)}catch(e){this._caughtError=e,this._hasCaughtError=!0}}).apply(h,arguments)},invokeGuardedCallbackAndCatchFirstError:function(e,t,n,r,o,i,a,s,u){if(h.invokeGuardedCallback.apply(this,arguments),h.hasCaughtError()){var l=h.clearCaughtError();h._hasRethrowError||(h._hasRethrowError=!0,h._rethrowError=l)}},rethrowCaughtError:function(){return function(){if(h._hasRethrowError){var e=h._rethrowError;throw h._rethrowError=null,h._hasRethrowError=!1,e}}.apply(h,arguments)},hasCaughtError:function(){return h._hasCaughtError},clearCaughtError:function(){if(h._hasCaughtError){var e=h._caughtError;return h._caughtError=null,h._hasCaughtError=!1,e}d("198")}};var y=null,m={};function g(){if(y)for(var e in m){var t=m[e],n=y.indexOf(e);if(-1<n||d("96",e),!b[n])for(var r in t.extractEvents||d("97",e),b[n]=t,n=t.eventTypes){var o=void 0,i=n[r],a=t,s=r;w.hasOwnProperty(s)&&d("99",s),w[s]=i;var u=i.phasedRegistrationNames;if(u){for(o in u)u.hasOwnProperty(o)&&v(u[o],a,s);o=!0}else i.registrationName?(v(i.registrationName,a,s),o=!0):o=!1;o||d("98",r,e)}}}function v(e,t,n){C[e]&&d("100",e),C[e]=t,k[e]=t.eventTypes[n].dependencies}var b=[],w={},C={},k={};function E(e){y&&d("101"),y=Array.prototype.slice.call(e),g()}function x(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];m.hasOwnProperty(t)&&m[t]===r||(m[t]&&d("102",t),m[t]=r,n=!0)}n&&g()}var S={plugins:b,eventNameDispatchConfigs:w,registrationNameModules:C,registrationNameDependencies:k,possibleRegistrationNames:null,injectEventPluginOrder:E,injectEventPluginsByName:x},_=null,T=null,P=null;function A(e,t,n,r){t=e.type||"unknown-event",e.currentTarget=P(r),h.invokeGuardedCallbackAndCatchFirstError(t,n,void 0,e),e.currentTarget=null}function F(e,t){return null==t&&d("30"),null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function R(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var N=null;function O(e,t){if(e){var n=e._dispatchListeners,r=e._dispatchInstances;if(Array.isArray(n))for(var o=0;o<n.length&&!e.isPropagationStopped();o++)A(e,t,n[o],r[o]);else n&&A(e,t,n,r);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function B(e){return O(e,!0)}function U(e){return O(e,!1)}var I={injectEventPluginOrder:E,injectEventPluginsByName:x};function D(e,t){var n=e.stateNode;if(!n)return null;var o=_(n);if(!o)return null;n=o[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(o=!o.disabled)||(o=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!o;break e;default:e=!1}return e?null:(n&&"function"!=typeof n&&d("231",t,void 0===n?"undefined":r(n)),n)}function M(e,t){null!==e&&(N=F(N,e)),e=N,N=null,e&&(R(e,t?B:U),N&&d("95"),h.rethrowCaughtError())}function L(e,t,n,r){for(var o=null,i=0;i<b.length;i++){var a=b[i];a&&(a=a.extractEvents(e,t,n,r))&&(o=F(o,a))}M(o,!1)}var j={injection:I,getListener:D,runEventsInBatch:M,runExtractedEventsInBatch:L},z=Math.random().toString(36).slice(2),q="__reactInternalInstance$"+z,H="__reactEventHandlers$"+z;function V(e){if(e[q])return e[q];for(;!e[q];){if(!e.parentNode)return null;e=e.parentNode}return 5===(e=e[q]).tag||6===e.tag?e:null}function W(e){if(5===e.tag||6===e.tag)return e.stateNode;d("33")}function Y(e){return e[H]||null}var $={precacheFiberNode:function(e,t){t[q]=e},getClosestInstanceFromNode:V,getInstanceFromNode:function(e){return!(e=e[q])||5!==e.tag&&6!==e.tag?null:e},getNodeFromInstance:W,getFiberCurrentPropsFromNode:Y,updateFiberProps:function(e,t){e[H]=t}};function X(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function K(e,t,n){for(var r=[];e;)r.push(e),e=X(e);for(e=r.length;0<e--;)t(r[e],"captured",n);for(e=0;e<r.length;e++)t(r[e],"bubbled",n)}function Q(e,t,n){(t=D(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=F(n._dispatchListeners,t),n._dispatchInstances=F(n._dispatchInstances,e))}function J(e){e&&e.dispatchConfig.phasedRegistrationNames&&K(e._targetInst,Q,e)}function G(e){if(e&&e.dispatchConfig.phasedRegistrationNames){var t=e._targetInst;K(t=t?X(t):null,Q,e)}}function Z(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=D(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=F(n._dispatchListeners,t),n._dispatchInstances=F(n._dispatchInstances,e))}function ee(e){e&&e.dispatchConfig.registrationName&&Z(e._targetInst,null,e)}function te(e){R(e,J)}function ne(e,t,n,r){if(n&&r)e:{for(var o=n,i=r,a=0,s=o;s;s=X(s))a++;s=0;for(var u=i;u;u=X(u))s++;for(;0<a-s;)o=X(o),a--;for(;0<s-a;)i=X(i),s--;for(;a--;){if(o===i||o===i.alternate)break e;o=X(o),i=X(i)}o=null}else o=null;for(i=o,o=[];n&&n!==i&&(null===(a=n.alternate)||a!==i);)o.push(n),n=X(n);for(n=[];r&&r!==i&&(null===(a=r.alternate)||a!==i);)n.push(r),r=X(r);for(r=0;r<o.length;r++)Z(o[r],"bubbled",e);for(e=n.length;0<e--;)Z(n[e],"captured",t)}var re={accumulateTwoPhaseDispatches:te,accumulateTwoPhaseDispatchesSkipTarget:function(e){R(e,G)},accumulateEnterLeaveDispatches:ne,accumulateDirectDispatches:function(e){R(e,ee)}};function oe(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n["ms"+e]="MS"+t,n["O"+e]="o"+t.toLowerCase(),n}var ie={animationend:oe("Animation","AnimationEnd"),animationiteration:oe("Animation","AnimationIteration"),animationstart:oe("Animation","AnimationStart"),transitionend:oe("Transition","TransitionEnd")},ae={},se={};function ue(e){if(ae[e])return ae[e];if(!ie[e])return e;var t,n=ie[e];for(t in n)if(n.hasOwnProperty(t)&&t in se)return ae[e]=n[t];return e}a.canUseDOM&&(se=document.createElement("div").style,"AnimationEvent"in window||(delete ie.animationend.animation,delete ie.animationiteration.animation,delete ie.animationstart.animation),"TransitionEvent"in window||delete ie.transitionend.transition);var le=ue("animationend"),ce=ue("animationiteration"),fe=ue("animationstart"),pe=ue("transitionend"),de="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),he=null;function ye(){return!he&&a.canUseDOM&&(he="textContent"in document.documentElement?"textContent":"innerText"),he}var me={_root:null,_startText:null,_fallbackText:null};function ge(){if(me._fallbackText)return me._fallbackText;var e,t,n=me._startText,r=n.length,o=ve(),i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return me._fallbackText=o.slice(e,1<t?1-t:void 0),me._fallbackText}function ve(){return"value"in me._root?me._root.value:me._root[ye()]}var be="dispatchConfig _targetInst nativeEvent isDefaultPrevented isPropagationStopped _dispatchListeners _dispatchInstances".split(" "),we={type:null,target:null,currentTarget:u.thatReturnsNull,eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};function Ce(e,t,n,r){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?u.thatReturnsTrue:u.thatReturnsFalse,this.isPropagationStopped=u.thatReturnsFalse,this}function ke(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function Ee(e){e instanceof this||d("223"),e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function xe(e){e.eventPool=[],e.getPooled=ke,e.release=Ee}s(Ce.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=u.thatReturnsTrue)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=u.thatReturnsTrue)},persist:function(){this.isPersistent=u.thatReturnsTrue},isPersistent:u.thatReturnsFalse,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;for(t=0;t<be.length;t++)this[be[t]]=null}}),Ce.Interface=we,Ce.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var o=new t;return s(o,n.prototype),n.prototype=o,n.prototype.constructor=n,n.Interface=s({},r.Interface,e),n.extend=r.extend,xe(n),n},xe(Ce);var Se=Ce.extend({data:null}),_e=Ce.extend({data:null}),Te=[9,13,27,32],Pe=a.canUseDOM&&"CompositionEvent"in window,Ae=null;a.canUseDOM&&"documentMode"in document&&(Ae=document.documentMode);var Fe=a.canUseDOM&&"TextEvent"in window&&!Ae,Re=a.canUseDOM&&(!Pe||Ae&&8<Ae&&11>=Ae),Ne=String.fromCharCode(32),Oe={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},Be=!1;function Ue(e,t){switch(e){case"keyup":return-1!==Te.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function Ie(e){return"object"===(void 0===(e=e.detail)?"undefined":r(e))&&"data"in e?e.data:null}var De=!1;var Me={eventTypes:Oe,extractEvents:function(e,t,n,r){var o=void 0,i=void 0;if(Pe)e:{switch(e){case"compositionstart":o=Oe.compositionStart;break e;case"compositionend":o=Oe.compositionEnd;break e;case"compositionupdate":o=Oe.compositionUpdate;break e}o=void 0}else De?Ue(e,n)&&(o=Oe.compositionEnd):"keydown"===e&&229===n.keyCode&&(o=Oe.compositionStart);return o?(Re&&(De||o!==Oe.compositionStart?o===Oe.compositionEnd&&De&&(i=ge()):(me._root=r,me._startText=ve(),De=!0)),o=Se.getPooled(o,t,n,r),i?o.data=i:null!==(i=Ie(n))&&(o.data=i),te(o),i=o):i=null,(e=Fe?function(e,t){switch(e){case"compositionend":return Ie(t);case"keypress":return 32!==t.which?null:(Be=!0,Ne);case"textInput":return(e=t.data)===Ne&&Be?null:e;default:return null}}(e,n):function(e,t){if(De)return"compositionend"===e||!Pe&&Ue(e,t)?(e=ge(),me._root=null,me._startText=null,me._fallbackText=null,De=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Re?null:t.data;default:return null}}(e,n))?((t=_e.getPooled(Oe.beforeInput,t,n,r)).data=e,te(t)):t=null,null===i?t:null===t?i:[i,t]}},Le=null,je={injectFiberControlledHostComponent:function(e){Le=e}},ze=null,qe=null;function He(e){if(e=T(e)){Le&&"function"==typeof Le.restoreControlledState||d("194");var t=_(e.stateNode);Le.restoreControlledState(e.stateNode,e.type,t)}}function Ve(e){ze?qe?qe.push(e):qe=[e]:ze=e}function We(){return null!==ze||null!==qe}function Ye(){if(ze){var e=ze,t=qe;if(qe=ze=null,He(e),t)for(e=0;e<t.length;e++)He(t[e])}}var $e={injection:je,enqueueStateRestore:Ve,needsStateRestore:We,restoreStateIfNeeded:Ye};function Xe(e,t){return e(t)}function Ke(e,t,n){return e(t,n)}function Qe(){}var Je=!1;function Ge(e,t){if(Je)return e(t);Je=!0;try{return Xe(e,t)}finally{Je=!1,We()&&(Qe(),Ye())}}var Ze={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function et(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Ze[e.type]:"textarea"===t}function tt(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function nt(e,t){return!(!a.canUseDOM||t&&!("addEventListener"in document))&&((t=(e="on"+e)in document)||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t)}function rt(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function ot(e){e._valueTracker||(e._valueTracker=function(e){var t=rt(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function it(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=rt(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}var at=i.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,st="function"==typeof Symbol&&Symbol.for,ut=st?Symbol.for("react.element"):60103,lt=st?Symbol.for("react.portal"):60106,ct=st?Symbol.for("react.fragment"):60107,ft=st?Symbol.for("react.strict_mode"):60108,pt=st?Symbol.for("react.profiler"):60114,dt=st?Symbol.for("react.provider"):60109,ht=st?Symbol.for("react.context"):60110,yt=st?Symbol.for("react.async_mode"):60111,mt=st?Symbol.for("react.forward_ref"):60112,gt=st?Symbol.for("react.timeout"):60113,vt="function"==typeof Symbol&&Symbol.iterator;function bt(e){return null===e||void 0===e?null:"function"==typeof(e=vt&&e[vt]||e["@@iterator"])?e:null}function wt(e){var t=e.type;if("function"==typeof t)return t.displayName||t.name;if("string"==typeof t)return t;switch(t){case yt:return"AsyncMode";case ht:return"Context.Consumer";case ct:return"ReactFragment";case lt:return"ReactPortal";case pt:return"Profiler("+e.pendingProps.id+")";case dt:return"Context.Provider";case ft:return"StrictMode";case gt:return"Timeout"}if("object"===(void 0===t?"undefined":r(t))&&null!==t)switch(t.$$typeof){case mt:return""!==(e=t.render.displayName||t.render.name||"")?"ForwardRef("+e+")":"ForwardRef"}return null}function Ct(e){var t="";do{e:switch(e.tag){case 0:case 1:case 2:case 5:var n=e._debugOwner,r=e._debugSource,o=wt(e),i=null;n&&(i=wt(n)),n=r,o="\n    in "+(o||"Unknown")+(n?" (at "+n.fileName.replace(/^.*[\\\/]/,"")+":"+n.lineNumber+")":i?" (created by "+i+")":"");break e;default:o=""}t+=o,e=e.return}while(e);return t}var kt=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,Et=Object.prototype.hasOwnProperty,xt={},St={};function _t(e,t,n,o){if(null===t||void 0===t||function(e,t,n,o){if(null!==n&&0===n.type)return!1;switch(void 0===t?"undefined":r(t)){case"function":case"symbol":return!0;case"boolean":return!o&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,o))return!0;if(o)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}function Tt(e,t,n,r,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t}var Pt={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){Pt[e]=new Tt(e,0,!1,e,null)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];Pt[t]=new Tt(t,1,!1,e[1],null)}),["contentEditable","draggable","spellCheck","value"].forEach(function(e){Pt[e]=new Tt(e,2,!1,e.toLowerCase(),null)}),["autoReverse","externalResourcesRequired","preserveAlpha"].forEach(function(e){Pt[e]=new Tt(e,2,!1,e,null)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){Pt[e]=new Tt(e,3,!1,e.toLowerCase(),null)}),["checked","multiple","muted","selected"].forEach(function(e){Pt[e]=new Tt(e,3,!0,e.toLowerCase(),null)}),["capture","download"].forEach(function(e){Pt[e]=new Tt(e,4,!1,e.toLowerCase(),null)}),["cols","rows","size","span"].forEach(function(e){Pt[e]=new Tt(e,6,!1,e.toLowerCase(),null)}),["rowSpan","start"].forEach(function(e){Pt[e]=new Tt(e,5,!1,e.toLowerCase(),null)});var At=/[\-:]([a-z])/g;function Ft(e){return e[1].toUpperCase()}function Rt(e,t,n,r){var o=Pt.hasOwnProperty(t)?Pt[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(_t(t,n,o,r)&&(n=null),r||null===o?function(e){return!!Et.call(St,e)||!Et.call(xt,e)&&(kt.test(e)?St[e]=!0:(xt[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}function Nt(e,t){var n=t.checked;return s({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function Ot(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=Mt(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function Bt(e,t){null!=(t=t.checked)&&Rt(e,"checked",t,!1)}function Ut(e,t){Bt(e,t);var n=Mt(t.value);null!=n&&("number"===t.type?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n)),t.hasOwnProperty("value")?Dt(e,t.type,n):t.hasOwnProperty("defaultValue")&&Dt(e,t.type,Mt(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function It(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){t=""+e._wrapperState.initialValue;var r=e.value;n||t===r||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!e.defaultChecked,""!==n&&(e.name=n)}function Dt(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function Mt(e){switch(void 0===e?"undefined":r(e)){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(At,Ft);Pt[t]=new Tt(t,1,!1,e,null)}),"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(At,Ft);Pt[t]=new Tt(t,1,!1,e,"http://www.w3.org/1999/xlink")}),["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(At,Ft);Pt[t]=new Tt(t,1,!1,e,"http://www.w3.org/XML/1998/namespace")}),Pt.tabIndex=new Tt("tabIndex",1,!1,"tabindex",null);var Lt={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function jt(e,t,n){return(e=Ce.getPooled(Lt.change,e,t,n)).type="change",Ve(n),te(e),e}var zt=null,qt=null;function Ht(e){M(e,!1)}function Vt(e){if(it(W(e)))return e}function Wt(e,t){if("change"===e)return t}var Yt=!1;function $t(){zt&&(zt.detachEvent("onpropertychange",Xt),qt=zt=null)}function Xt(e){"value"===e.propertyName&&Vt(qt)&&Ge(Ht,e=jt(qt,e,tt(e)))}function Kt(e,t,n){"focus"===e?($t(),qt=n,(zt=t).attachEvent("onpropertychange",Xt)):"blur"===e&&$t()}function Qt(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Vt(qt)}function Jt(e,t){if("click"===e)return Vt(t)}function Gt(e,t){if("input"===e||"change"===e)return Vt(t)}a.canUseDOM&&(Yt=nt("input")&&(!document.documentMode||9<document.documentMode));var Zt={eventTypes:Lt,_isInputEventSupported:Yt,extractEvents:function(e,t,n,r){var o=t?W(t):window,i=void 0,a=void 0,s=o.nodeName&&o.nodeName.toLowerCase();if("select"===s||"input"===s&&"file"===o.type?i=Wt:et(o)?Yt?i=Gt:(i=Qt,a=Kt):(s=o.nodeName)&&"input"===s.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(i=Jt),i&&(i=i(e,t)))return jt(i,n,r);a&&a(e,o,t),"blur"===e&&(e=o._wrapperState)&&e.controlled&&"number"===o.type&&Dt(o,"number",o.value)}},en=Ce.extend({view:null,detail:null}),tn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function nn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=tn[e])&&!!t[e]}function rn(){return nn}var on=en.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:rn,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)}}),an=on.extend({pointerId:null,width:null,height:null,pressure:null,tiltX:null,tiltY:null,pointerType:null,isPrimary:null}),sn={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},un={eventTypes:sn,extractEvents:function(e,t,n,r){var o="mouseover"===e||"pointerover"===e,i="mouseout"===e||"pointerout"===e;if(o&&(n.relatedTarget||n.fromElement)||!i&&!o)return null;if(o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window,i?(i=t,t=(t=n.relatedTarget||n.toElement)?V(t):null):i=null,i===t)return null;var a=void 0,s=void 0,u=void 0,l=void 0;return"mouseout"===e||"mouseover"===e?(a=on,s=sn.mouseLeave,u=sn.mouseEnter,l="mouse"):"pointerout"!==e&&"pointerover"!==e||(a=an,s=sn.pointerLeave,u=sn.pointerEnter,l="pointer"),e=null==i?o:W(i),o=null==t?o:W(t),(s=a.getPooled(s,i,n,r)).type=l+"leave",s.target=e,s.relatedTarget=o,(n=a.getPooled(u,t,n,r)).type=l+"enter",n.target=o,n.relatedTarget=e,ne(s,n,i,t),[s,n]}};function ln(e){var t=e;if(e.alternate)for(;t.return;)t=t.return;else{if(0!=(2&t.effectTag))return 1;for(;t.return;)if(0!=(2&(t=t.return).effectTag))return 1}return 3===t.tag?2:3}function cn(e){2!==ln(e)&&d("188")}function fn(e){var t=e.alternate;if(!t)return 3===(t=ln(e))&&d("188"),1===t?null:e;for(var n=e,r=t;;){var o=n.return,i=o?o.alternate:null;if(!o||!i)break;if(o.child===i.child){for(var a=o.child;a;){if(a===n)return cn(o),e;if(a===r)return cn(o),t;a=a.sibling}d("188")}if(n.return!==r.return)n=o,r=i;else{a=!1;for(var s=o.child;s;){if(s===n){a=!0,n=o,r=i;break}if(s===r){a=!0,r=o,n=i;break}s=s.sibling}if(!a){for(s=i.child;s;){if(s===n){a=!0,n=i,r=o;break}if(s===r){a=!0,r=i,n=o;break}s=s.sibling}a||d("189")}}n.alternate!==r&&d("190")}return 3!==n.tag&&d("188"),n.stateNode.current===n?e:t}function pn(e){if(!(e=fn(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}var dn=Ce.extend({animationName:null,elapsedTime:null,pseudoElement:null}),hn=Ce.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),yn=en.extend({relatedTarget:null});function mn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var gn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},vn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},bn=en.extend({key:function(e){if(e.key){var t=gn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=mn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?vn[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:rn,charCode:function(e){return"keypress"===e.type?mn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?mn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),wn=on.extend({dataTransfer:null}),Cn=en.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:rn}),kn=Ce.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),En=on.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),xn=[["abort","abort"],[le,"animationEnd"],[ce,"animationIteration"],[fe,"animationStart"],["canplay","canPlay"],["canplaythrough","canPlayThrough"],["drag","drag"],["dragenter","dragEnter"],["dragexit","dragExit"],["dragleave","dragLeave"],["dragover","dragOver"],["durationchange","durationChange"],["emptied","emptied"],["encrypted","encrypted"],["ended","ended"],["error","error"],["gotpointercapture","gotPointerCapture"],["load","load"],["loadeddata","loadedData"],["loadedmetadata","loadedMetadata"],["loadstart","loadStart"],["lostpointercapture","lostPointerCapture"],["mousemove","mouseMove"],["mouseout","mouseOut"],["mouseover","mouseOver"],["playing","playing"],["pointermove","pointerMove"],["pointerout","pointerOut"],["pointerover","pointerOver"],["progress","progress"],["scroll","scroll"],["seeking","seeking"],["stalled","stalled"],["suspend","suspend"],["timeupdate","timeUpdate"],["toggle","toggle"],["touchmove","touchMove"],[pe,"transitionEnd"],["waiting","waiting"],["wheel","wheel"]],Sn={},_n={};function Tn(e,t){var n=e[0],r="on"+((e=e[1])[0].toUpperCase()+e.slice(1));t={phasedRegistrationNames:{bubbled:r,captured:r+"Capture"},dependencies:[n],isInteractive:t},Sn[e]=t,_n[n]=t}[["blur","blur"],["cancel","cancel"],["click","click"],["close","close"],["contextmenu","contextMenu"],["copy","copy"],["cut","cut"],["dblclick","doubleClick"],["dragend","dragEnd"],["dragstart","dragStart"],["drop","drop"],["focus","focus"],["input","input"],["invalid","invalid"],["keydown","keyDown"],["keypress","keyPress"],["keyup","keyUp"],["mousedown","mouseDown"],["mouseup","mouseUp"],["paste","paste"],["pause","pause"],["play","play"],["pointercancel","pointerCancel"],["pointerdown","pointerDown"],["pointerup","pointerUp"],["ratechange","rateChange"],["reset","reset"],["seeked","seeked"],["submit","submit"],["touchcancel","touchCancel"],["touchend","touchEnd"],["touchstart","touchStart"],["volumechange","volumeChange"]].forEach(function(e){Tn(e,!0)}),xn.forEach(function(e){Tn(e,!1)});var Pn={eventTypes:Sn,isInteractiveTopLevelEventType:function(e){return void 0!==(e=_n[e])&&!0===e.isInteractive},extractEvents:function(e,t,n,r){var o=_n[e];if(!o)return null;switch(e){case"keypress":if(0===mn(n))return null;case"keydown":case"keyup":e=bn;break;case"blur":case"focus":e=yn;break;case"click":if(2===n.button)return null;case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=on;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=wn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=Cn;break;case le:case ce:case fe:e=dn;break;case pe:e=kn;break;case"scroll":e=en;break;case"wheel":e=En;break;case"copy":case"cut":case"paste":e=hn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=an;break;default:e=Ce}return te(t=e.getPooled(o,t,n,r)),t}},An=Pn.isInteractiveTopLevelEventType,Fn=[];function Rn(e){var t=e.targetInst;do{if(!t){e.ancestors.push(t);break}var n;for(n=t;n.return;)n=n.return;if(!(n=3!==n.tag?null:n.stateNode.containerInfo))break;e.ancestors.push(t),t=V(n)}while(t);for(n=0;n<e.ancestors.length;n++)t=e.ancestors[n],L(e.topLevelType,t,e.nativeEvent,tt(e.nativeEvent))}var Nn=!0;function On(e){Nn=!!e}function Bn(e,t){if(!t)return null;var n=(An(e)?In:Dn).bind(null,e);t.addEventListener(e,n,!1)}function Un(e,t){if(!t)return null;var n=(An(e)?In:Dn).bind(null,e);t.addEventListener(e,n,!0)}function In(e,t){Ke(Dn,e,t)}function Dn(e,t){if(Nn){var n=tt(t);if(null===(n=V(n))||"number"!=typeof n.tag||2===ln(n)||(n=null),Fn.length){var r=Fn.pop();r.topLevelType=e,r.nativeEvent=t,r.targetInst=n,e=r}else e={topLevelType:e,nativeEvent:t,targetInst:n,ancestors:[]};try{Ge(Rn,e)}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>Fn.length&&Fn.push(e)}}}var Mn={get _enabled(){return Nn},setEnabled:On,isEnabled:function(){return Nn},trapBubbledEvent:Bn,trapCapturedEvent:Un,dispatchEvent:Dn},Ln={},jn=0,zn="_reactListenersID"+(""+Math.random()).slice(2);function qn(e){return Object.prototype.hasOwnProperty.call(e,zn)||(e[zn]=jn++,Ln[e[zn]]={}),Ln[e[zn]]}function Hn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Vn(e,t){var n,r=Hn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Hn(r)}}function Wn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var Yn=a.canUseDOM&&"documentMode"in document&&11>=document.documentMode,$n={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu focus keydown keyup mousedown mouseup selectionchange".split(" ")}},Xn=null,Kn=null,Qn=null,Jn=!1;function Gn(e,t){if(Jn||null==Xn||Xn!==l())return null;var n=Xn;return"selectionStart"in n&&Wn(n)?n={start:n.selectionStart,end:n.selectionEnd}:window.getSelection?n={anchorNode:(n=window.getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset}:n=void 0,Qn&&c(Qn,n)?null:(Qn=n,(e=Ce.getPooled($n.select,Kn,e,t)).type="select",e.target=Xn,te(e),e)}var Zn={eventTypes:$n,extractEvents:function(e,t,n,r){var o,i=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(o=!i)){e:{i=qn(i),o=k.onSelect;for(var a=0;a<o.length;a++){var s=o[a];if(!i.hasOwnProperty(s)||!i[s]){i=!1;break e}}i=!0}o=!i}if(o)return null;switch(i=t?W(t):window,e){case"focus":(et(i)||"true"===i.contentEditable)&&(Xn=i,Kn=t,Qn=null);break;case"blur":Qn=Kn=Xn=null;break;case"mousedown":Jn=!0;break;case"contextmenu":case"mouseup":return Jn=!1,Gn(n,r);case"selectionchange":if(Yn)break;case"keydown":case"keyup":return Gn(n,r)}return null}};I.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin TapEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),_=$.getFiberCurrentPropsFromNode,T=$.getInstanceFromNode,P=$.getNodeFromInstance,I.injectEventPluginsByName({SimpleEventPlugin:Pn,EnterLeaveEventPlugin:un,ChangeEventPlugin:Zt,SelectEventPlugin:Zn,BeforeInputEventPlugin:Me});var er="function"==typeof requestAnimationFrame?requestAnimationFrame:void 0,tr=Date,nr=setTimeout,rr=clearTimeout,or=void 0;if("object"===("undefined"==typeof performance?"undefined":r(performance))&&"function"==typeof performance.now){var ir=performance;or=function(){return ir.now()}}else or=function(){return tr.now()};var ar=void 0,sr=void 0;if(a.canUseDOM){var ur="function"==typeof er?er:function(){d("276")},lr=null,cr=null,fr=-1,pr=!1,dr=!1,hr=0,yr=33,mr=33,gr={didTimeout:!1,timeRemaining:function(){var e=hr-or();return 0<e?e:0}},vr=function(e,t){var n=e.scheduledCallback,r=!1;try{n(t),r=!0}finally{sr(e),r||(pr=!0,window.postMessage(br,"*"))}},br="__reactIdleCallback$"+Math.random().toString(36).slice(2);window.addEventListener("message",function(e){if(e.source===window&&e.data===br&&(pr=!1,null!==lr)){if(null!==lr){var t=or();if(!(-1===fr||fr>t)){e=-1;for(var n=[],r=lr;null!==r;){var o=r.timeoutTime;-1!==o&&o<=t?n.push(r):-1!==o&&(-1===e||o<e)&&(e=o),r=r.next}if(0<n.length)for(gr.didTimeout=!0,t=0,r=n.length;t<r;t++)vr(n[t],gr);fr=e}}for(e=or();0<hr-e&&null!==lr;)e=lr,gr.didTimeout=!1,vr(e,gr),e=or();null===lr||dr||(dr=!0,ur(wr))}},!1);var wr=function(e){dr=!1;var t=e-hr+mr;t<mr&&yr<mr?(8>t&&(t=8),mr=t<yr?yr:t):yr=t,hr=e+mr,pr||(pr=!0,window.postMessage(br,"*"))};ar=function(e,t){var n=-1;return null!=t&&"number"==typeof t.timeout&&(n=or()+t.timeout),(-1===fr||-1!==n&&n<fr)&&(fr=n),e={scheduledCallback:e,timeoutTime:n,prev:null,next:null},null===lr?lr=e:null!==(t=e.prev=cr)&&(t.next=e),cr=e,dr||(dr=!0,ur(wr)),e},sr=function(e){if(null!==e.prev||lr===e){var t=e.next,n=e.prev;e.next=null,e.prev=null,null!==t?null!==n?(n.next=t,t.prev=n):(t.prev=null,lr=t):null!==n?(n.next=null,cr=n):cr=lr=null}}}else{var Cr=new Map;ar=function(e){var t={scheduledCallback:e,timeoutTime:0,next:null,prev:null},n=nr(function(){e({timeRemaining:function(){return 1/0},didTimeout:!1})});return Cr.set(e,n),t},sr=function(e){var t=Cr.get(e.scheduledCallback);Cr.delete(e),rr(t)}}function kr(e,t){return e=s({children:void 0},t),(t=function(e){var t="";return i.Children.forEach(e,function(e){null==e||"string"!=typeof e&&"number"!=typeof e||(t+=e)}),t}(t.children))&&(e.children=t),e}function Er(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+n,t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function xr(e,t){var n=t.value;e._wrapperState={initialValue:null!=n?n:t.defaultValue,wasMultiple:!!t.multiple}}function Sr(e,t){return null!=t.dangerouslySetInnerHTML&&d("91"),s({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function _r(e,t){var n=t.value;null==n&&(n=t.defaultValue,null!=(t=t.children)&&(null!=n&&d("92"),Array.isArray(t)&&(1>=t.length||d("93"),t=t[0]),n=""+t),null==n&&(n="")),e._wrapperState={initialValue:""+n}}function Tr(e,t){var n=t.value;null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&(e.defaultValue=n)),null!=t.defaultValue&&(e.defaultValue=t.defaultValue)}function Pr(e){var t=e.textContent;t===e._wrapperState.initialValue&&(e.value=t)}var Ar={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function Fr(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Rr(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Fr(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var Nr=void 0,Or=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,o){MSApp.execUnsafeLocalFunction(function(){return e(t,n)})}:e}(function(e,t){if(e.namespaceURI!==Ar.svg||"innerHTML"in e)e.innerHTML=t;else{for((Nr=Nr||document.createElement("div")).innerHTML="<svg>"+t+"</svg>",t=Nr.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}});function Br(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var Ur={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},Ir=["Webkit","ms","Moz","O"];function Dr(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=n,i=t[n];o=null==i||"boolean"==typeof i||""===i?"":r||"number"!=typeof i||0===i||Ur.hasOwnProperty(o)&&Ur[o]?(""+i).trim():i+"px","float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(Ur).forEach(function(e){Ir.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Ur[t]=Ur[e]})});var Mr=s({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Lr(e,t,n){t&&(Mr[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML)&&d("137",e,n()),null!=t.dangerouslySetInnerHTML&&(null!=t.children&&d("60"),"object"===r(t.dangerouslySetInnerHTML)&&"__html"in t.dangerouslySetInnerHTML||d("61")),null!=t.style&&"object"!==r(t.style)&&d("62",n()))}function jr(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var zr=u.thatReturns("");function qr(e,t){var n=qn(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=k[t];for(var r=0;r<t.length;r++){var o=t[r];if(!n.hasOwnProperty(o)||!n[o]){switch(o){case"scroll":Un("scroll",e);break;case"focus":case"blur":Un("focus",e),Un("blur",e),n.blur=!0,n.focus=!0;break;case"cancel":case"close":nt(o,!0)&&Un(o,e);break;case"invalid":case"submit":case"reset":break;default:-1===de.indexOf(o)&&Bn(o,e)}n[o]=!0}}}function Hr(e,t,n,r){return n=9===n.nodeType?n:n.ownerDocument,r===Ar.html&&(r=Fr(e)),r===Ar.html?"script"===e?((e=n.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):e="string"==typeof t.is?n.createElement(e,{is:t.is}):n.createElement(e):e=n.createElementNS(r,e),e}function Vr(e,t){return(9===t.nodeType?t:t.ownerDocument).createTextNode(e)}function Wr(e,t,n,r){var o=jr(t,n);switch(t){case"iframe":case"object":Bn("load",e);var i=n;break;case"video":case"audio":for(i=0;i<de.length;i++)Bn(de[i],e);i=n;break;case"source":Bn("error",e),i=n;break;case"img":case"image":case"link":Bn("error",e),Bn("load",e),i=n;break;case"form":Bn("reset",e),Bn("submit",e),i=n;break;case"details":Bn("toggle",e),i=n;break;case"input":Ot(e,n),i=Nt(e,n),Bn("invalid",e),qr(r,"onChange");break;case"option":i=kr(e,n);break;case"select":xr(e,n),i=s({},n,{value:void 0}),Bn("invalid",e),qr(r,"onChange");break;case"textarea":_r(e,n),i=Sr(e,n),Bn("invalid",e),qr(r,"onChange");break;default:i=n}Lr(t,i,zr);var a,l=i;for(a in l)if(l.hasOwnProperty(a)){var c=l[a];"style"===a?Dr(e,c):"dangerouslySetInnerHTML"===a?null!=(c=c?c.__html:void 0)&&Or(e,c):"children"===a?"string"==typeof c?("textarea"!==t||""!==c)&&Br(e,c):"number"==typeof c&&Br(e,""+c):"suppressContentEditableWarning"!==a&&"suppressHydrationWarning"!==a&&"autoFocus"!==a&&(C.hasOwnProperty(a)?null!=c&&qr(r,a):null!=c&&Rt(e,a,c,o))}switch(t){case"input":ot(e),It(e,n,!1);break;case"textarea":ot(e),Pr(e);break;case"option":null!=n.value&&e.setAttribute("value",n.value);break;case"select":e.multiple=!!n.multiple,null!=(t=n.value)?Er(e,!!n.multiple,t,!1):null!=n.defaultValue&&Er(e,!!n.multiple,n.defaultValue,!0);break;default:"function"==typeof i.onClick&&(e.onclick=u)}}function Yr(e,t,n,r,o){var i=null;switch(t){case"input":n=Nt(e,n),r=Nt(e,r),i=[];break;case"option":n=kr(e,n),r=kr(e,r),i=[];break;case"select":n=s({},n,{value:void 0}),r=s({},r,{value:void 0}),i=[];break;case"textarea":n=Sr(e,n),r=Sr(e,r),i=[];break;default:"function"!=typeof n.onClick&&"function"==typeof r.onClick&&(e.onclick=u)}Lr(t,r,zr),t=e=void 0;var a=null;for(e in n)if(!r.hasOwnProperty(e)&&n.hasOwnProperty(e)&&null!=n[e])if("style"===e){var l=n[e];for(t in l)l.hasOwnProperty(t)&&(a||(a={}),a[t]="")}else"dangerouslySetInnerHTML"!==e&&"children"!==e&&"suppressContentEditableWarning"!==e&&"suppressHydrationWarning"!==e&&"autoFocus"!==e&&(C.hasOwnProperty(e)?i||(i=[]):(i=i||[]).push(e,null));for(e in r){var c=r[e];if(l=null!=n?n[e]:void 0,r.hasOwnProperty(e)&&c!==l&&(null!=c||null!=l))if("style"===e)if(l){for(t in l)!l.hasOwnProperty(t)||c&&c.hasOwnProperty(t)||(a||(a={}),a[t]="");for(t in c)c.hasOwnProperty(t)&&l[t]!==c[t]&&(a||(a={}),a[t]=c[t])}else a||(i||(i=[]),i.push(e,a)),a=c;else"dangerouslySetInnerHTML"===e?(c=c?c.__html:void 0,l=l?l.__html:void 0,null!=c&&l!==c&&(i=i||[]).push(e,""+c)):"children"===e?l===c||"string"!=typeof c&&"number"!=typeof c||(i=i||[]).push(e,""+c):"suppressContentEditableWarning"!==e&&"suppressHydrationWarning"!==e&&(C.hasOwnProperty(e)?(null!=c&&qr(o,e),i||l===c||(i=[])):(i=i||[]).push(e,c))}return a&&(i=i||[]).push("style",a),i}function $r(e,t,n,r,o){"input"===n&&"radio"===o.type&&null!=o.name&&Bt(e,o),jr(n,r),r=jr(n,o);for(var i=0;i<t.length;i+=2){var a=t[i],s=t[i+1];"style"===a?Dr(e,s):"dangerouslySetInnerHTML"===a?Or(e,s):"children"===a?Br(e,s):Rt(e,a,s,r)}switch(n){case"input":Ut(e,o);break;case"textarea":Tr(e,o);break;case"select":e._wrapperState.initialValue=void 0,t=e._wrapperState.wasMultiple,e._wrapperState.wasMultiple=!!o.multiple,null!=(n=o.value)?Er(e,!!o.multiple,n,!1):t!==!!o.multiple&&(null!=o.defaultValue?Er(e,!!o.multiple,o.defaultValue,!0):Er(e,!!o.multiple,o.multiple?[]:"",!1))}}function Xr(e,t,n,r,o){switch(t){case"iframe":case"object":Bn("load",e);break;case"video":case"audio":for(r=0;r<de.length;r++)Bn(de[r],e);break;case"source":Bn("error",e);break;case"img":case"image":case"link":Bn("error",e),Bn("load",e);break;case"form":Bn("reset",e),Bn("submit",e);break;case"details":Bn("toggle",e);break;case"input":Ot(e,n),Bn("invalid",e),qr(o,"onChange");break;case"select":xr(e,n),Bn("invalid",e),qr(o,"onChange");break;case"textarea":_r(e,n),Bn("invalid",e),qr(o,"onChange")}for(var i in Lr(t,n,zr),r=null,n)if(n.hasOwnProperty(i)){var a=n[i];"children"===i?"string"==typeof a?e.textContent!==a&&(r=["children",a]):"number"==typeof a&&e.textContent!==""+a&&(r=["children",""+a]):C.hasOwnProperty(i)&&null!=a&&qr(o,i)}switch(t){case"input":ot(e),It(e,n,!0);break;case"textarea":ot(e),Pr(e);break;case"select":case"option":break;default:"function"==typeof n.onClick&&(e.onclick=u)}return r}function Kr(e,t){return e.nodeValue!==t}var Qr={createElement:Hr,createTextNode:Vr,setInitialProperties:Wr,diffProperties:Yr,updateProperties:$r,diffHydratedProperties:Xr,diffHydratedText:Kr,warnForUnmatchedText:function(){},warnForDeletedHydratableElement:function(){},warnForDeletedHydratableText:function(){},warnForInsertedHydratedElement:function(){},warnForInsertedHydratedText:function(){},restoreControlledState:function(e,t,n){switch(t){case"input":if(Ut(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=Y(r);o||d("90"),it(r),Ut(r,o)}}}break;case"textarea":Tr(e,n);break;case"select":null!=(t=n.value)&&Er(e,!!n.multiple,t,!1)}}},Jr=null,Gr=null;function Zr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function eo(e,t){return"textarea"===e||"string"==typeof t.children||"number"==typeof t.children||"object"===r(t.dangerouslySetInnerHTML)&&null!==t.dangerouslySetInnerHTML&&"string"==typeof t.dangerouslySetInnerHTML.__html}var to=or,no=ar,ro=sr;function oo(e){for(e=e.nextSibling;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}function io(e){for(e=e.firstChild;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}new Set;var ao=[],so=-1;function uo(e){return{current:e}}function lo(e){0>so||(e.current=ao[so],ao[so]=null,so--)}function co(e,t){ao[++so]=e.current,e.current=t}var fo=uo(p),po=uo(!1),ho=p;function yo(e){return go(e)?ho:fo.current}function mo(e,t){var n=e.type.contextTypes;if(!n)return p;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function go(e){return 2===e.tag&&null!=e.type.childContextTypes}function vo(e){go(e)&&(lo(po),lo(fo))}function bo(e){lo(po),lo(fo)}function wo(e,t,n){fo.current!==p&&d("168"),co(fo,t),co(po,n)}function Co(e,t){var n=e.stateNode,r=e.type.childContextTypes;if("function"!=typeof n.getChildContext)return t;for(var o in n=n.getChildContext())o in r||d("108",wt(e)||"Unknown",o);return s({},t,n)}function ko(e){if(!go(e))return!1;var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||p,ho=fo.current,co(fo,t),co(po,po.current),!0}function Eo(e,t){var n=e.stateNode;if(n||d("169"),t){var r=Co(e,ho);n.__reactInternalMemoizedMergedChildContext=r,lo(po),lo(fo),co(fo,r)}else lo(po);co(po,t)}function xo(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=null,this.index=0,this.ref=null,this.pendingProps=t,this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.expirationTime=0,this.alternate=null}function So(e,t,n){var r=e.alternate;return null===r?((r=new xo(e.tag,t,e.key,e.mode)).type=e.type,r.stateNode=e.stateNode,r.alternate=e,e.alternate=r):(r.pendingProps=t,r.effectTag=0,r.nextEffect=null,r.firstEffect=null,r.lastEffect=null),r.expirationTime=n,r.child=e.child,r.memoizedProps=e.memoizedProps,r.memoizedState=e.memoizedState,r.updateQueue=e.updateQueue,r.sibling=e.sibling,r.index=e.index,r.ref=e.ref,r}function _o(e,t,n){var o=e.type,i=e.key;if(e=e.props,"function"==typeof o)var a=o.prototype&&o.prototype.isReactComponent?2:0;else if("string"==typeof o)a=5;else switch(o){case ct:return To(e.children,t,n,i);case yt:a=11,t|=3;break;case ft:a=11,t|=2;break;case pt:return(o=new xo(15,e,i,4|t)).type=pt,o.expirationTime=n,o;case gt:a=16,t|=2;break;default:e:{switch("object"===(void 0===o?"undefined":r(o))&&null!==o?o.$$typeof:null){case dt:a=13;break e;case ht:a=12;break e;case mt:a=14;break e;default:d("130",null==o?o:void 0===o?"undefined":r(o),"")}a=void 0}}return(t=new xo(a,e,i,t)).type=o,t.expirationTime=n,t}function To(e,t,n,r){return(e=new xo(10,e,r,t)).expirationTime=n,e}function Po(e,t,n){return(e=new xo(6,e,null,t)).expirationTime=n,e}function Ao(e,t,n){return(t=new xo(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Fo(e,t,n){return e={current:t=new xo(3,null,null,t?3:0),containerInfo:e,pendingChildren:null,earliestPendingTime:0,latestPendingTime:0,earliestSuspendedTime:0,latestSuspendedTime:0,latestPingedTime:0,pendingCommitExpirationTime:0,finishedWork:null,context:null,pendingContext:null,hydrate:n,remainingExpirationTime:0,firstBatch:null,nextScheduledRoot:null},t.stateNode=e}var Ro=null,No=null;function Oo(e){return function(t){try{return e(t)}catch(e){}}}function Bo(e){"function"==typeof Ro&&Ro(e)}function Uo(e){"function"==typeof No&&No(e)}var Io=!1;function Do(e){return{expirationTime:0,baseState:e,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Mo(e){return{expirationTime:e.expirationTime,baseState:e.baseState,firstUpdate:e.firstUpdate,lastUpdate:e.lastUpdate,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Lo(e){return{expirationTime:e,tag:0,payload:null,callback:null,next:null,nextEffect:null}}function jo(e,t,n){null===e.lastUpdate?e.firstUpdate=e.lastUpdate=t:(e.lastUpdate.next=t,e.lastUpdate=t),(0===e.expirationTime||e.expirationTime>n)&&(e.expirationTime=n)}function zo(e,t,n){var r=e.alternate;if(null===r){var o=e.updateQueue,i=null;null===o&&(o=e.updateQueue=Do(e.memoizedState))}else o=e.updateQueue,i=r.updateQueue,null===o?null===i?(o=e.updateQueue=Do(e.memoizedState),i=r.updateQueue=Do(r.memoizedState)):o=e.updateQueue=Mo(i):null===i&&(i=r.updateQueue=Mo(o));null===i||o===i?jo(o,t,n):null===o.lastUpdate||null===i.lastUpdate?(jo(o,t,n),jo(i,t,n)):(jo(o,t,n),i.lastUpdate=t)}function qo(e,t,n){var r=e.updateQueue;null===(r=null===r?e.updateQueue=Do(e.memoizedState):Ho(e,r)).lastCapturedUpdate?r.firstCapturedUpdate=r.lastCapturedUpdate=t:(r.lastCapturedUpdate.next=t,r.lastCapturedUpdate=t),(0===r.expirationTime||r.expirationTime>n)&&(r.expirationTime=n)}function Ho(e,t){var n=e.alternate;return null!==n&&t===n.updateQueue&&(t=e.updateQueue=Mo(t)),t}function Vo(e,t,n,r,o,i){switch(n.tag){case 1:return"function"==typeof(e=n.payload)?e.call(i,r,o):e;case 3:e.effectTag=-1025&e.effectTag|64;case 0:if(null===(o="function"==typeof(e=n.payload)?e.call(i,r,o):e)||void 0===o)break;return s({},r,o);case 2:Io=!0}return r}function Wo(e,t,n,r,o){if(Io=!1,!(0===t.expirationTime||t.expirationTime>o)){for(var i=(t=Ho(e,t)).baseState,a=null,s=0,u=t.firstUpdate,l=i;null!==u;){var c=u.expirationTime;c>o?(null===a&&(a=u,i=l),(0===s||s>c)&&(s=c)):(l=Vo(e,0,u,l,n,r),null!==u.callback&&(e.effectTag|=32,u.nextEffect=null,null===t.lastEffect?t.firstEffect=t.lastEffect=u:(t.lastEffect.nextEffect=u,t.lastEffect=u))),u=u.next}for(c=null,u=t.firstCapturedUpdate;null!==u;){var f=u.expirationTime;f>o?(null===c&&(c=u,null===a&&(i=l)),(0===s||s>f)&&(s=f)):(l=Vo(e,0,u,l,n,r),null!==u.callback&&(e.effectTag|=32,u.nextEffect=null,null===t.lastCapturedEffect?t.firstCapturedEffect=t.lastCapturedEffect=u:(t.lastCapturedEffect.nextEffect=u,t.lastCapturedEffect=u))),u=u.next}null===a&&(t.lastUpdate=null),null===c?t.lastCapturedUpdate=null:e.effectTag|=32,null===a&&null===c&&(i=l),t.baseState=i,t.firstUpdate=a,t.firstCapturedUpdate=c,t.expirationTime=s,e.memoizedState=l}}function Yo(e,t){"function"!=typeof e&&d("191",e),e.call(t)}function $o(e,t,n){for(null!==t.firstCapturedUpdate&&(null!==t.lastUpdate&&(t.lastUpdate.next=t.firstCapturedUpdate,t.lastUpdate=t.lastCapturedUpdate),t.firstCapturedUpdate=t.lastCapturedUpdate=null),e=t.firstEffect,t.firstEffect=t.lastEffect=null;null!==e;){var r=e.callback;null!==r&&(e.callback=null,Yo(r,n)),e=e.nextEffect}for(e=t.firstCapturedEffect,t.firstCapturedEffect=t.lastCapturedEffect=null;null!==e;)null!==(t=e.callback)&&(e.callback=null,Yo(t,n)),e=e.nextEffect}function Xo(e,t){return{value:e,source:t,stack:Ct(t)}}var Ko=uo(null),Qo=uo(null),Jo=uo(0);function Go(e){var t=e.type._context;co(Jo,t._changedBits),co(Qo,t._currentValue),co(Ko,e),t._currentValue=e.pendingProps.value,t._changedBits=e.stateNode}function Zo(e){var t=Jo.current,n=Qo.current;lo(Ko),lo(Qo),lo(Jo),(e=e.type._context)._currentValue=n,e._changedBits=t}var ei={},ti=uo(ei),ni=uo(ei),ri=uo(ei);function oi(e){return e===ei&&d("174"),e}function ii(e,t){co(ri,t),co(ni,e),co(ti,ei);var n=t.nodeType;switch(n){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:Rr(null,"");break;default:t=Rr(t=(n=8===n?t.parentNode:t).namespaceURI||null,n=n.tagName)}lo(ti),co(ti,t)}function ai(e){lo(ti),lo(ni),lo(ri)}function si(e){ni.current===e&&(lo(ti),lo(ni))}function ui(e,t,n){var r=e.memoizedState;r=null===(t=t(n,r))||void 0===t?r:s({},r,t),e.memoizedState=r,null!==(e=e.updateQueue)&&0===e.expirationTime&&(e.baseState=r)}var li={isMounted:function(e){return!!(e=e._reactInternalFiber)&&2===ln(e)},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=Ca(),o=Lo(r=ba(r,e));o.payload=t,void 0!==n&&null!==n&&(o.callback=n),zo(e,o,r),wa(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=Ca(),o=Lo(r=ba(r,e));o.tag=1,o.payload=t,void 0!==n&&null!==n&&(o.callback=n),zo(e,o,r),wa(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=Ca(),r=Lo(n=ba(n,e));r.tag=2,void 0!==t&&null!==t&&(r.callback=t),zo(e,r,n),wa(e,n)}};function ci(e,t,n,r,o,i){var a=e.stateNode;return e=e.type,"function"==typeof a.shouldComponentUpdate?a.shouldComponentUpdate(n,o,i):!e.prototype||!e.prototype.isPureReactComponent||(!c(t,n)||!c(r,o))}function fi(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&li.enqueueReplaceState(t,t.state,null)}function pi(e,t){var n=e.type,r=e.stateNode,o=e.pendingProps,i=yo(e);r.props=o,r.state=e.memoizedState,r.refs=p,r.context=mo(e,i),null!==(i=e.updateQueue)&&(Wo(e,i,o,r,t),r.state=e.memoizedState),"function"==typeof(i=e.type.getDerivedStateFromProps)&&(ui(e,i,o),r.state=e.memoizedState),"function"==typeof n.getDerivedStateFromProps||"function"==typeof r.getSnapshotBeforeUpdate||"function"!=typeof r.UNSAFE_componentWillMount&&"function"!=typeof r.componentWillMount||(n=r.state,"function"==typeof r.componentWillMount&&r.componentWillMount(),"function"==typeof r.UNSAFE_componentWillMount&&r.UNSAFE_componentWillMount(),n!==r.state&&li.enqueueReplaceState(r,r.state,null),null!==(i=e.updateQueue)&&(Wo(e,i,o,r,t),r.state=e.memoizedState)),"function"==typeof r.componentDidMount&&(e.effectTag|=4)}var di=Array.isArray;function hi(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!==(void 0===e?"undefined":r(e))){if(n._owner){var o=void 0;(n=n._owner)&&(2!==n.tag&&d("110"),o=n.stateNode),o||d("147",e);var i=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===i?t.ref:((t=function(e){var t=o.refs===p?o.refs={}:o.refs;null===e?delete t[i]:t[i]=e})._stringRef=i,t)}"string"!=typeof e&&d("148"),n._owner||d("254",e)}return e}function yi(e,t){"textarea"!==e.type&&d("31","[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,"")}function mi(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function o(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function i(e,t,n){return(e=So(e,t,n)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function s(t){return e&&null===t.alternate&&(t.effectTag=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Po(n,e.mode,r)).return=e,t):((t=i(t,n,r)).return=e,t)}function l(e,t,n,r){return null!==t&&t.type===n.type?((r=i(t,n.props,r)).ref=hi(e,t,n),r.return=e,r):((r=_o(n,e.mode,r)).ref=hi(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Ao(n,e.mode,r)).return=e,t):((t=i(t,n.children||[],r)).return=e,t)}function f(e,t,n,r,o){return null===t||10!==t.tag?((t=To(n,e.mode,r,o)).return=e,t):((t=i(t,n,r)).return=e,t)}function p(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Po(""+t,e.mode,n)).return=e,t;if("object"===(void 0===t?"undefined":r(t))&&null!==t){switch(t.$$typeof){case ut:return(n=_o(t,e.mode,n)).ref=hi(e,null,t),n.return=e,n;case lt:return(t=Ao(t,e.mode,n)).return=e,t}if(di(t)||bt(t))return(t=To(t,e.mode,n,null)).return=e,t;yi(e,t)}return null}function h(e,t,n,o){var i=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==i?null:u(e,t,""+n,o);if("object"===(void 0===n?"undefined":r(n))&&null!==n){switch(n.$$typeof){case ut:return n.key===i?n.type===ct?f(e,t,n.props.children,o,i):l(e,t,n,o):null;case lt:return n.key===i?c(e,t,n,o):null}if(di(n)||bt(n))return null!==i?null:f(e,t,n,o,null);yi(e,n)}return null}function y(e,t,n,o,i){if("string"==typeof o||"number"==typeof o)return u(t,e=e.get(n)||null,""+o,i);if("object"===(void 0===o?"undefined":r(o))&&null!==o){switch(o.$$typeof){case ut:return e=e.get(null===o.key?n:o.key)||null,o.type===ct?f(t,e,o.props.children,i,o.key):l(t,e,o,i);case lt:return c(t,e=e.get(null===o.key?n:o.key)||null,o,i)}if(di(o)||bt(o))return f(t,e=e.get(n)||null,o,i,null);yi(t,o)}return null}function m(r,i,s,u){for(var l=null,c=null,f=i,d=i=0,m=null;null!==f&&d<s.length;d++){f.index>d?(m=f,f=null):m=f.sibling;var g=h(r,f,s[d],u);if(null===g){null===f&&(f=m);break}e&&f&&null===g.alternate&&t(r,f),i=a(g,i,d),null===c?l=g:c.sibling=g,c=g,f=m}if(d===s.length)return n(r,f),l;if(null===f){for(;d<s.length;d++)(f=p(r,s[d],u))&&(i=a(f,i,d),null===c?l=f:c.sibling=f,c=f);return l}for(f=o(r,f);d<s.length;d++)(m=y(f,r,d,s[d],u))&&(e&&null!==m.alternate&&f.delete(null===m.key?d:m.key),i=a(m,i,d),null===c?l=m:c.sibling=m,c=m);return e&&f.forEach(function(e){return t(r,e)}),l}function g(r,i,s,u){var l=bt(s);"function"!=typeof l&&d("150"),null==(s=l.call(s))&&d("151");for(var c=l=null,f=i,m=i=0,g=null,v=s.next();null!==f&&!v.done;m++,v=s.next()){f.index>m?(g=f,f=null):g=f.sibling;var b=h(r,f,v.value,u);if(null===b){f||(f=g);break}e&&f&&null===b.alternate&&t(r,f),i=a(b,i,m),null===c?l=b:c.sibling=b,c=b,f=g}if(v.done)return n(r,f),l;if(null===f){for(;!v.done;m++,v=s.next())null!==(v=p(r,v.value,u))&&(i=a(v,i,m),null===c?l=v:c.sibling=v,c=v);return l}for(f=o(r,f);!v.done;m++,v=s.next())null!==(v=y(f,r,m,v.value,u))&&(e&&null!==v.alternate&&f.delete(null===v.key?m:v.key),i=a(v,i,m),null===c?l=v:c.sibling=v,c=v);return e&&f.forEach(function(e){return t(r,e)}),l}return function(e,o,a,u){var l="object"===(void 0===a?"undefined":r(a))&&null!==a&&a.type===ct&&null===a.key;l&&(a=a.props.children);var c="object"===(void 0===a?"undefined":r(a))&&null!==a;if(c)switch(a.$$typeof){case ut:e:{for(c=a.key,l=o;null!==l;){if(l.key===c){if(10===l.tag?a.type===ct:l.type===a.type){n(e,l.sibling),(o=i(l,a.type===ct?a.props.children:a.props,u)).ref=hi(e,l,a),o.return=e,e=o;break e}n(e,l);break}t(e,l),l=l.sibling}a.type===ct?((o=To(a.props.children,e.mode,u,a.key)).return=e,e=o):((u=_o(a,e.mode,u)).ref=hi(e,o,a),u.return=e,e=u)}return s(e);case lt:e:{for(l=a.key;null!==o;){if(o.key===l){if(4===o.tag&&o.stateNode.containerInfo===a.containerInfo&&o.stateNode.implementation===a.implementation){n(e,o.sibling),(o=i(o,a.children||[],u)).return=e,e=o;break e}n(e,o);break}t(e,o),o=o.sibling}(o=Ao(a,e.mode,u)).return=e,e=o}return s(e)}if("string"==typeof a||"number"==typeof a)return a=""+a,null!==o&&6===o.tag?(n(e,o.sibling),(o=i(o,a,u)).return=e,e=o):(n(e,o),(o=Po(a,e.mode,u)).return=e,e=o),s(e);if(di(a))return m(e,o,a,u);if(bt(a))return g(e,o,a,u);if(c&&yi(e,a),void 0===a&&!l)switch(e.tag){case 2:case 1:d("152",(u=e.type).displayName||u.name||"Component")}return n(e,o)}}var gi=mi(!0),vi=mi(!1),bi=null,wi=null,Ci=!1;function ki(e,t){var n=new xo(5,null,null,0);n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Ei(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);default:return!1}}function xi(e){if(Ci){var t=wi;if(t){var n=t;if(!Ei(e,t)){if(!(t=oo(n))||!Ei(e,t))return e.effectTag|=2,Ci=!1,void(bi=e);ki(bi,n)}bi=e,wi=io(t)}else e.effectTag|=2,Ci=!1,bi=e}}function Si(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag;)e=e.return;bi=e}function _i(e){if(e!==bi)return!1;if(!Ci)return Si(e),Ci=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!eo(t,e.memoizedProps))for(t=wi;t;)ki(e,t),t=oo(t);return Si(e),wi=bi?oo(e.stateNode):null,!0}function Ti(){wi=bi=null,Ci=!1}function Pi(e,t,n){Ai(e,t,n,t.expirationTime)}function Ai(e,t,n,r){t.child=null===e?vi(t,null,n,r):gi(t,e.child,n,r)}function Fi(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function Ri(e,t,n,r,o){Fi(e,t);var i=0!=(64&t.effectTag);if(!n&&!i)return r&&Eo(t,!1),Bi(e,t);n=t.stateNode,at.current=t;var a=i?null:n.render();return t.effectTag|=1,i&&(Ai(e,t,null,o),t.child=null),Ai(e,t,a,o),t.memoizedState=n.state,t.memoizedProps=n.props,r&&Eo(t,!0),t.child}function Ni(e){var t=e.stateNode;t.pendingContext?wo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&wo(0,t.context,!1),ii(e,t.containerInfo)}function Oi(e,t,n,r){var o=e.child;for(null!==o&&(o.return=e);null!==o;){switch(o.tag){case 12:var i=0|o.stateNode;if(o.type===t&&0!=(i&n)){for(i=o;null!==i;){var a=i.alternate;if(0===i.expirationTime||i.expirationTime>r)i.expirationTime=r,null!==a&&(0===a.expirationTime||a.expirationTime>r)&&(a.expirationTime=r);else{if(null===a||!(0===a.expirationTime||a.expirationTime>r))break;a.expirationTime=r}i=i.return}i=null}else i=o.child;break;case 13:i=o.type===e.type?null:o.child;break;default:i=o.child}if(null!==i)i.return=o;else for(i=o;null!==i;){if(i===e){i=null;break}if(null!==(o=i.sibling)){o.return=i.return,i=o;break}i=i.return}o=i}}function Bi(e,t){if(null!==e&&t.child!==e.child&&d("153"),null!==t.child){var n=So(e=t.child,e.pendingProps,e.expirationTime);for(t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=So(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}function Ui(e,t,n){if(0===t.expirationTime||t.expirationTime>n){switch(t.tag){case 3:Ni(t);break;case 2:ko(t);break;case 4:ii(t,t.stateNode.containerInfo);break;case 13:Go(t)}return null}switch(t.tag){case 0:null!==e&&d("155");var o=t.type,i=t.pendingProps,a=yo(t);return o=o(i,a=mo(t,a)),t.effectTag|=1,"object"===(void 0===o?"undefined":r(o))&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof?(a=t.type,t.tag=2,t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,"function"==typeof(a=a.getDerivedStateFromProps)&&ui(t,a,i),i=ko(t),o.updater=li,t.stateNode=o,o._reactInternalFiber=t,pi(t,n),e=Ri(e,t,!0,i,n)):(t.tag=1,Pi(e,t,o),t.memoizedProps=i,e=t.child),e;case 1:return i=t.type,n=t.pendingProps,po.current||t.memoizedProps!==n?(i=i(n,o=mo(t,o=yo(t))),t.effectTag|=1,Pi(e,t,i),t.memoizedProps=n,e=t.child):e=Bi(e,t),e;case 2:if(i=ko(t),null===e)if(null===t.stateNode){var s=t.pendingProps,u=t.type;o=yo(t);var l=2===t.tag&&null!=t.type.contextTypes;s=new u(s,a=l?mo(t,o):p),t.memoizedState=null!==s.state&&void 0!==s.state?s.state:null,s.updater=li,t.stateNode=s,s._reactInternalFiber=t,l&&((l=t.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,l.__reactInternalMemoizedMaskedChildContext=a),pi(t,n),o=!0}else{u=t.type,o=t.stateNode,l=t.memoizedProps,a=t.pendingProps,o.props=l;var c=o.context;s=mo(t,s=yo(t));var f=u.getDerivedStateFromProps;(u="function"==typeof f||"function"==typeof o.getSnapshotBeforeUpdate)||"function"!=typeof o.UNSAFE_componentWillReceiveProps&&"function"!=typeof o.componentWillReceiveProps||(l!==a||c!==s)&&fi(t,o,a,s),Io=!1;var h=t.memoizedState;c=o.state=h;var y=t.updateQueue;null!==y&&(Wo(t,y,a,o,n),c=t.memoizedState),l!==a||h!==c||po.current||Io?("function"==typeof f&&(ui(t,f,a),c=t.memoizedState),(l=Io||ci(t,l,a,h,c,s))?(u||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||("function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount()),"function"==typeof o.componentDidMount&&(t.effectTag|=4)):("function"==typeof o.componentDidMount&&(t.effectTag|=4),t.memoizedProps=a,t.memoizedState=c),o.props=a,o.state=c,o.context=s,o=l):("function"==typeof o.componentDidMount&&(t.effectTag|=4),o=!1)}else u=t.type,o=t.stateNode,a=t.memoizedProps,l=t.pendingProps,o.props=a,c=o.context,s=mo(t,s=yo(t)),(u="function"==typeof(f=u.getDerivedStateFromProps)||"function"==typeof o.getSnapshotBeforeUpdate)||"function"!=typeof o.UNSAFE_componentWillReceiveProps&&"function"!=typeof o.componentWillReceiveProps||(a!==l||c!==s)&&fi(t,o,l,s),Io=!1,c=t.memoizedState,h=o.state=c,null!==(y=t.updateQueue)&&(Wo(t,y,l,o,n),h=t.memoizedState),a!==l||c!==h||po.current||Io?("function"==typeof f&&(ui(t,f,l),h=t.memoizedState),(f=Io||ci(t,a,l,c,h,s))?(u||"function"!=typeof o.UNSAFE_componentWillUpdate&&"function"!=typeof o.componentWillUpdate||("function"==typeof o.componentWillUpdate&&o.componentWillUpdate(l,h,s),"function"==typeof o.UNSAFE_componentWillUpdate&&o.UNSAFE_componentWillUpdate(l,h,s)),"function"==typeof o.componentDidUpdate&&(t.effectTag|=4),"function"==typeof o.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof o.componentDidUpdate||a===e.memoizedProps&&c===e.memoizedState||(t.effectTag|=4),"function"!=typeof o.getSnapshotBeforeUpdate||a===e.memoizedProps&&c===e.memoizedState||(t.effectTag|=256),t.memoizedProps=l,t.memoizedState=h),o.props=l,o.state=h,o.context=s,o=f):("function"!=typeof o.componentDidUpdate||a===e.memoizedProps&&c===e.memoizedState||(t.effectTag|=4),"function"!=typeof o.getSnapshotBeforeUpdate||a===e.memoizedProps&&c===e.memoizedState||(t.effectTag|=256),o=!1);return Ri(e,t,o,i,n);case 3:return Ni(t),null!==(i=t.updateQueue)?(o=null!==(o=t.memoizedState)?o.element:null,Wo(t,i,t.pendingProps,null,n),(i=t.memoizedState.element)===o?(Ti(),e=Bi(e,t)):(o=t.stateNode,(o=(null===e||null===e.child)&&o.hydrate)&&(wi=io(t.stateNode.containerInfo),bi=t,o=Ci=!0),o?(t.effectTag|=2,t.child=vi(t,null,i,n)):(Ti(),Pi(e,t,i)),e=t.child)):(Ti(),e=Bi(e,t)),e;case 5:return oi(ri.current),(i=oi(ti.current))!==(o=Rr(i,t.type))&&(co(ni,t),co(ti,o)),null===e&&xi(t),i=t.type,l=t.memoizedProps,o=t.pendingProps,a=null!==e?e.memoizedProps:null,po.current||l!==o||((l=1&t.mode&&!!o.hidden)&&(t.expirationTime=1073741823),l&&1073741823===n)?(l=o.children,eo(i,o)?l=null:a&&eo(i,a)&&(t.effectTag|=16),Fi(e,t),1073741823!==n&&1&t.mode&&o.hidden?(t.expirationTime=1073741823,t.memoizedProps=o,e=null):(Pi(e,t,l),t.memoizedProps=o,e=t.child)):e=Bi(e,t),e;case 6:return null===e&&xi(t),t.memoizedProps=t.pendingProps,null;case 16:return null;case 4:return ii(t,t.stateNode.containerInfo),i=t.pendingProps,po.current||t.memoizedProps!==i?(null===e?t.child=gi(t,null,i,n):Pi(e,t,i),t.memoizedProps=i,e=t.child):e=Bi(e,t),e;case 14:return i=t.type.render,n=t.pendingProps,o=t.ref,po.current||t.memoizedProps!==n||o!==(null!==e?e.ref:null)?(Pi(e,t,i=i(n,o)),t.memoizedProps=n,e=t.child):e=Bi(e,t),e;case 10:return n=t.pendingProps,po.current||t.memoizedProps!==n?(Pi(e,t,n),t.memoizedProps=n,e=t.child):e=Bi(e,t),e;case 11:return n=t.pendingProps.children,po.current||null!==n&&t.memoizedProps!==n?(Pi(e,t,n),t.memoizedProps=n,e=t.child):e=Bi(e,t),e;case 15:return n=t.pendingProps,t.memoizedProps===n?e=Bi(e,t):(Pi(e,t,n.children),t.memoizedProps=n,e=t.child),e;case 13:return function(e,t,n){var r=t.type._context,o=t.pendingProps,i=t.memoizedProps,a=!0;if(po.current)a=!1;else if(i===o)return t.stateNode=0,Go(t),Bi(e,t);var s=o.value;if(t.memoizedProps=o,null===i)s=1073741823;else if(i.value===o.value){if(i.children===o.children&&a)return t.stateNode=0,Go(t),Bi(e,t);s=0}else{var u=i.value;if(u===s&&(0!==u||1/u==1/s)||u!=u&&s!=s){if(i.children===o.children&&a)return t.stateNode=0,Go(t),Bi(e,t);s=0}else if(s="function"==typeof r._calculateChangedBits?r._calculateChangedBits(u,s):1073741823,0==(s|=0)){if(i.children===o.children&&a)return t.stateNode=0,Go(t),Bi(e,t)}else Oi(t,r,s,n)}return t.stateNode=s,Go(t),Pi(e,t,o.children),t.child}(e,t,n);case 12:e:if(o=t.type,a=t.pendingProps,l=t.memoizedProps,i=o._currentValue,s=o._changedBits,po.current||0!==s||l!==a){if(t.memoizedProps=a,void 0!==(u=a.unstable_observedBits)&&null!==u||(u=1073741823),t.stateNode=u,0!=(s&u))Oi(t,o,s,n);else if(l===a){e=Bi(e,t);break e}n=(n=a.children)(i),t.effectTag|=1,Pi(e,t,n),e=t.child}else e=Bi(e,t);return e;default:d("156")}}function Ii(e){e.effectTag|=4}var Di=void 0,Mi=void 0,Li=void 0;function ji(e,t){var n=t.pendingProps;switch(t.tag){case 1:return null;case 2:return vo(t),null;case 3:ai(),bo();var r=t.stateNode;return r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(_i(t),t.effectTag&=-3),Di(t),null;case 5:si(t),r=oi(ri.current);var o=t.type;if(null!==e&&null!=t.stateNode){var i=e.memoizedProps,a=t.stateNode,s=oi(ti.current);a=Yr(a,o,i,n,r),Mi(e,t,a,o,i,n,r,s),e.ref!==t.ref&&(t.effectTag|=128)}else{if(!n)return null===t.stateNode&&d("166"),null;if(e=oi(ti.current),_i(t))n=t.stateNode,o=t.type,i=t.memoizedProps,n[q]=t,n[H]=i,r=Xr(n,o,i,e,r),t.updateQueue=r,null!==r&&Ii(t);else{(e=Hr(o,n,r,e))[q]=t,e[H]=n;e:for(i=t.child;null!==i;){if(5===i.tag||6===i.tag)e.appendChild(i.stateNode);else if(4!==i.tag&&null!==i.child){i.child.return=i,i=i.child;continue}if(i===t)break;for(;null===i.sibling;){if(null===i.return||i.return===t)break e;i=i.return}i.sibling.return=i.return,i=i.sibling}Wr(e,o,n,r),Zr(o,n)&&Ii(t),t.stateNode=e}null!==t.ref&&(t.effectTag|=128)}return null;case 6:if(e&&null!=t.stateNode)Li(e,t,e.memoizedProps,n);else{if("string"!=typeof n)return null===t.stateNode&&d("166"),null;r=oi(ri.current),oi(ti.current),_i(t)?(r=t.stateNode,n=t.memoizedProps,r[q]=t,Kr(r,n)&&Ii(t)):((r=Vr(n,r))[q]=t,t.stateNode=r)}return null;case 14:case 16:case 10:case 11:case 15:return null;case 4:return ai(),Di(t),null;case 13:return Zo(t),null;case 12:return null;case 0:d("167");default:d("156")}}function zi(e,t){var n=t.source;null===t.stack&&null!==n&&Ct(n),null!==n&&wt(n),t=t.value,null!==e&&2===e.tag&&wt(e);try{t&&t.suppressReactErrorLogging||console.error(t)}catch(e){e&&e.suppressReactErrorLogging||console.error(e)}}function qi(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){ga(e,t)}else t.current=null}function Hi(e){switch(Uo(e),e.tag){case 2:qi(e);var t=e.stateNode;if("function"==typeof t.componentWillUnmount)try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){ga(e,t)}break;case 5:qi(e);break;case 4:Yi(e)}}function Vi(e){return 5===e.tag||3===e.tag||4===e.tag}function Wi(e){e:{for(var t=e.return;null!==t;){if(Vi(t)){var n=t;break e}t=t.return}d("160"),n=void 0}var r=t=void 0;switch(n.tag){case 5:t=n.stateNode,r=!1;break;case 3:case 4:t=n.stateNode.containerInfo,r=!0;break;default:d("161")}16&n.effectTag&&(Br(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||Vi(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var o=e;;){if(5===o.tag||6===o.tag)if(n)if(r){var i=t,a=o.stateNode,s=n;8===i.nodeType?i.parentNode.insertBefore(a,s):i.insertBefore(a,s)}else t.insertBefore(o.stateNode,n);else r?(i=t,a=o.stateNode,8===i.nodeType?i.parentNode.insertBefore(a,i):i.appendChild(a)):t.appendChild(o.stateNode);else if(4!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===e)break;for(;null===o.sibling;){if(null===o.return||o.return===e)return;o=o.return}o.sibling.return=o.return,o=o.sibling}}function Yi(e){for(var t=e,n=!1,r=void 0,o=void 0;;){if(!n){n=t.return;e:for(;;){switch(null===n&&d("160"),n.tag){case 5:r=n.stateNode,o=!1;break e;case 3:case 4:r=n.stateNode.containerInfo,o=!0;break e}n=n.return}n=!0}if(5===t.tag||6===t.tag){e:for(var i=t,a=i;;)if(Hi(a),null!==a.child&&4!==a.tag)a.child.return=a,a=a.child;else{if(a===i)break;for(;null===a.sibling;){if(null===a.return||a.return===i)break e;a=a.return}a.sibling.return=a.return,a=a.sibling}o?(i=r,a=t.stateNode,8===i.nodeType?i.parentNode.removeChild(a):i.removeChild(a)):r.removeChild(t.stateNode)}else if(4===t.tag?r=t.stateNode.containerInfo:Hi(t),null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;4===(t=t.return).tag&&(n=!1)}t.sibling.return=t.return,t=t.sibling}}function $i(e,t){switch(t.tag){case 2:break;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps;e=null!==e?e.memoizedProps:r;var o=t.type,i=t.updateQueue;t.updateQueue=null,null!==i&&(n[H]=r,$r(n,i,o,e,r))}break;case 6:null===t.stateNode&&d("162"),t.stateNode.nodeValue=t.memoizedProps;break;case 3:case 15:case 16:break;default:d("163")}}function Xi(e,t,n){(n=Lo(n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){es(r),zi(e,t)},n}function Ki(e,t,n){(n=Lo(n)).tag=3;var r=e.stateNode;return null!==r&&"function"==typeof r.componentDidCatch&&(n.callback=function(){null===pa?pa=new Set([this]):pa.add(this);var n=t.value,r=t.stack;zi(e,t),this.componentDidCatch(n,{componentStack:null!==r?r:""})}),n}function Qi(e,t,n,r,o,i){n.effectTag|=512,n.firstEffect=n.lastEffect=null,r=Xo(r,n),e=t;do{switch(e.tag){case 3:return e.effectTag|=1024,void qo(e,r=Xi(e,r,i),i);case 2:if(t=r,n=e.stateNode,0==(64&e.effectTag)&&null!==n&&"function"==typeof n.componentDidCatch&&(null===pa||!pa.has(n)))return e.effectTag|=1024,void qo(e,r=Ki(e,t,i),i)}e=e.return}while(null!==e)}function Ji(e){switch(e.tag){case 2:vo(e);var t=e.effectTag;return 1024&t?(e.effectTag=-1025&t|64,e):null;case 3:return ai(),bo(),1024&(t=e.effectTag)?(e.effectTag=-1025&t|64,e):null;case 5:return si(e),null;case 16:return 1024&(t=e.effectTag)?(e.effectTag=-1025&t|64,e):null;case 4:return ai(),null;case 13:return Zo(e),null;default:return null}}Di=function(){},Mi=function(e,t,n){(t.updateQueue=n)&&Ii(t)},Li=function(e,t,n,r){n!==r&&Ii(t)};var Gi=to(),Zi=2,ea=Gi,ta=0,na=0,ra=!1,oa=null,ia=null,aa=0,sa=-1,ua=!1,la=null,ca=!1,fa=!1,pa=null;function da(){if(null!==oa)for(var e=oa.return;null!==e;){var t=e;switch(t.tag){case 2:vo(t);break;case 3:ai(),bo();break;case 5:si(t);break;case 4:ai();break;case 13:Zo(t)}e=e.return}ia=null,aa=0,sa=-1,ua=!1,oa=null,fa=!1}function ha(e){for(;;){var t=e.alternate,n=e.return,r=e.sibling;if(0==(512&e.effectTag)){t=ji(t,e);var o=e;if(1073741823===aa||1073741823!==o.expirationTime){var i=0;switch(o.tag){case 3:case 2:var a=o.updateQueue;null!==a&&(i=a.expirationTime)}for(a=o.child;null!==a;)0!==a.expirationTime&&(0===i||i>a.expirationTime)&&(i=a.expirationTime),a=a.sibling;o.expirationTime=i}if(null!==t)return t;if(null!==n&&0==(512&n.effectTag)&&(null===n.firstEffect&&(n.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==n.lastEffect&&(n.lastEffect.nextEffect=e.firstEffect),n.lastEffect=e.lastEffect),1<e.effectTag&&(null!==n.lastEffect?n.lastEffect.nextEffect=e:n.firstEffect=e,n.lastEffect=e)),null!==r)return r;if(null===n){fa=!0;break}e=n}else{if(null!==(e=Ji(e)))return e.effectTag&=511,e;if(null!==n&&(n.firstEffect=n.lastEffect=null,n.effectTag|=512),null!==r)return r;if(null===n)break;e=n}}return null}function ya(e){var t=Ui(e.alternate,e,aa);return null===t&&(t=ha(e)),at.current=null,t}function ma(e,t,n){ra&&d("243"),ra=!0,t===aa&&e===ia&&null!==oa||(da(),aa=t,sa=-1,oa=So((ia=e).current,null,aa),e.pendingCommitExpirationTime=0);var r=!1;for(ua=!n||aa<=Zi;;){try{if(n)for(;null!==oa&&!Za();)oa=ya(oa);else for(;null!==oa;)oa=ya(oa)}catch(t){if(null===oa)r=!0,es(t);else{null===oa&&d("271");var o=(n=oa).return;if(null===o){r=!0,es(t);break}Qi(e,o,n,t,0,aa),oa=ha(n)}}break}if(ra=!1,r)return null;if(null===oa){if(fa)return e.pendingCommitExpirationTime=t,e.current.alternate;ua&&d("262"),0<=sa&&setTimeout(function(){var t=e.current.expirationTime;0!==t&&(0===e.remainingExpirationTime||e.remainingExpirationTime<t)&&Va(e,t)},sa),function(e){null===Aa&&d("246"),Aa.remainingExpirationTime=e}(e.current.expirationTime)}return null}function ga(e,t){var n;e:{for(ra&&!ca&&d("263"),n=e.return;null!==n;){switch(n.tag){case 2:var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromCatch||"function"==typeof r.componentDidCatch&&(null===pa||!pa.has(r))){zo(n,e=Ki(n,e=Xo(t,e),1),1),wa(n,1),n=void 0;break e}break;case 3:zo(n,e=Xi(n,e=Xo(t,e),1),1),wa(n,1),n=void 0;break e}n=n.return}3===e.tag&&(zo(e,n=Xi(e,n=Xo(t,e),1),1),wa(e,1)),n=void 0}return n}function va(){var e=2+25*(1+((Ca()-2+500)/25|0));return e<=ta&&(e=ta+1),ta=e}function ba(e,t){return e=0!==na?na:ra?ca?1:aa:1&t.mode?Ma?2+10*(1+((e-2+15)/10|0)):2+25*(1+((e-2+500)/25|0)):1,Ma&&(0===Ra||e>Ra)&&(Ra=e),e}function wa(e,t){for(;null!==e;){if((0===e.expirationTime||e.expirationTime>t)&&(e.expirationTime=t),null!==e.alternate&&(0===e.alternate.expirationTime||e.alternate.expirationTime>t)&&(e.alternate.expirationTime=t),null===e.return){if(3!==e.tag)break;var n=e.stateNode;!ra&&0!==aa&&t<aa&&da();var r=n.current.expirationTime;ra&&!ca&&ia===n||Va(n,r),za>ja&&d("185")}e=e.return}}function Ca(){return ea=to()-Gi,Zi=2+(ea/10|0)}function ka(e){var t=na;na=2+25*(1+((Ca()-2+500)/25|0));try{return e()}finally{na=t}}function Ea(e,t,n,r,o){var i=na;na=1;try{return e(t,n,r,o)}finally{na=i}}var xa=null,Sa=null,_a=0,Ta=void 0,Pa=!1,Aa=null,Fa=0,Ra=0,Na=!1,Oa=!1,Ba=null,Ua=null,Ia=!1,Da=!1,Ma=!1,La=null,ja=1e3,za=0,qa=1;function Ha(e){if(0!==_a){if(e>_a)return;null!==Ta&&ro(Ta)}var t=to()-Gi;_a=e,Ta=no(Ya,{timeout:10*(e-2)-t})}function Va(e,t){if(null===e.nextScheduledRoot)e.remainingExpirationTime=t,null===Sa?(xa=Sa=e,e.nextScheduledRoot=e):(Sa=Sa.nextScheduledRoot=e).nextScheduledRoot=xa;else{var n=e.remainingExpirationTime;(0===n||t<n)&&(e.remainingExpirationTime=t)}Pa||(Ia?Da&&(Aa=e,Fa=1,Ja(e,1,!1)):1===t?$a():Ha(t))}function Wa(){var e=0,t=null;if(null!==Sa)for(var n=Sa,r=xa;null!==r;){var o=r.remainingExpirationTime;if(0===o){if((null===n||null===Sa)&&d("244"),r===r.nextScheduledRoot){xa=Sa=r.nextScheduledRoot=null;break}if(r===xa)xa=o=r.nextScheduledRoot,Sa.nextScheduledRoot=o,r.nextScheduledRoot=null;else{if(r===Sa){(Sa=n).nextScheduledRoot=xa,r.nextScheduledRoot=null;break}n.nextScheduledRoot=r.nextScheduledRoot,r.nextScheduledRoot=null}r=n.nextScheduledRoot}else{if((0===e||o<e)&&(e=o,t=r),r===Sa)break;n=r,r=r.nextScheduledRoot}}null!==(n=Aa)&&n===t&&1===e?za++:za=0,Aa=t,Fa=e}function Ya(e){Xa(0,!0,e)}function $a(){Xa(1,!1,null)}function Xa(e,t,n){if(Ua=n,Wa(),t)for(;null!==Aa&&0!==Fa&&(0===e||e>=Fa)&&(!Na||Ca()>=Fa);)Ca(),Ja(Aa,Fa,!Na),Wa();else for(;null!==Aa&&0!==Fa&&(0===e||e>=Fa);)Ja(Aa,Fa,!1),Wa();null!==Ua&&(_a=0,Ta=null),0!==Fa&&Ha(Fa),Ua=null,Na=!1,Qa()}function Ka(e,t){Pa&&d("253"),Aa=e,Fa=t,Ja(e,t,!1),$a(),Qa()}function Qa(){if(za=0,null!==La){var e=La;La=null;for(var t=0;t<e.length;t++){var n=e[t];try{n._onComplete()}catch(e){Oa||(Oa=!0,Ba=e)}}}if(Oa)throw e=Ba,Ba=null,Oa=!1,e}function Ja(e,t,n){Pa&&d("245"),Pa=!0,n?null!==(n=e.finishedWork)?Ga(e,n,t):null!==(n=ma(e,t,!0))&&(Za()?e.finishedWork=n:Ga(e,n,t)):null!==(n=e.finishedWork)?Ga(e,n,t):null!==(n=ma(e,t,!1))&&Ga(e,n,t),Pa=!1}function Ga(e,t,n){var r=e.firstBatch;if(null!==r&&r._expirationTime<=n&&(null===La?La=[r]:La.push(r),r._defer))return e.finishedWork=t,void(e.remainingExpirationTime=0);if(e.finishedWork=null,ca=ra=!0,(n=t.stateNode).current===t&&d("177"),0===(r=n.pendingCommitExpirationTime)&&d("261"),n.pendingCommitExpirationTime=0,Ca(),at.current=null,1<t.effectTag)if(null!==t.lastEffect){t.lastEffect.nextEffect=t;var o=t.firstEffect}else o=t;else o=t.firstEffect;Jr=Nn;var i=l();if(Wn(i)){if("selectionStart"in i)var a={start:i.selectionStart,end:i.selectionEnd};else e:{var s=window.getSelection&&window.getSelection();if(s&&0!==s.rangeCount){a=s.anchorNode;var u=s.anchorOffset,c=s.focusNode;s=s.focusOffset;try{a.nodeType,c.nodeType}catch(e){a=null;break e}var p=0,h=-1,y=-1,m=0,g=0,v=i,b=null;t:for(;;){for(var w;v!==a||0!==u&&3!==v.nodeType||(h=p+u),v!==c||0!==s&&3!==v.nodeType||(y=p+s),3===v.nodeType&&(p+=v.nodeValue.length),null!==(w=v.firstChild);)b=v,v=w;for(;;){if(v===i)break t;if(b===a&&++m===u&&(h=p),b===c&&++g===s&&(y=p),null!==(w=v.nextSibling))break;b=(v=b).parentNode}v=w}a=-1===h||-1===y?null:{start:h,end:y}}else a=null}a=a||{start:0,end:0}}else a=null;for(Gr={focusedElem:i,selectionRange:a},On(!1),la=o;null!==la;){i=!1,a=void 0;try{for(;null!==la;){if(256&la.effectTag){var C=la.alternate;switch((u=la).tag){case 2:if(256&u.effectTag&&null!==C){var k=C.memoizedProps,E=C.memoizedState,x=u.stateNode;x.props=u.memoizedProps,x.state=u.memoizedState;var S=x.getSnapshotBeforeUpdate(k,E);x.__reactInternalSnapshotBeforeUpdate=S}break;case 3:case 5:case 6:case 4:break;default:d("163")}}la=la.nextEffect}}catch(e){i=!0,a=e}i&&(null===la&&d("178"),ga(la,a),null!==la&&(la=la.nextEffect))}for(la=o;null!==la;){C=!1,k=void 0;try{for(;null!==la;){var _=la.effectTag;if(16&_&&Br(la.stateNode,""),128&_){var T=la.alternate;if(null!==T){var P=T.ref;null!==P&&("function"==typeof P?P(null):P.current=null)}}switch(14&_){case 2:Wi(la),la.effectTag&=-3;break;case 6:Wi(la),la.effectTag&=-3,$i(la.alternate,la);break;case 4:$i(la.alternate,la);break;case 8:Yi(E=la),E.return=null,E.child=null,E.alternate&&(E.alternate.child=null,E.alternate.return=null)}la=la.nextEffect}}catch(e){C=!0,k=e}C&&(null===la&&d("178"),ga(la,k),null!==la&&(la=la.nextEffect))}if(P=Gr,T=l(),_=P.focusedElem,C=P.selectionRange,T!==_&&f(document.documentElement,_)){null!==C&&Wn(_)&&(T=C.start,void 0===(P=C.end)&&(P=T),"selectionStart"in _?(_.selectionStart=T,_.selectionEnd=Math.min(P,_.value.length)):window.getSelection&&(T=window.getSelection(),k=_[ye()].length,P=Math.min(C.start,k),C=void 0===C.end?P:Math.min(C.end,k),!T.extend&&P>C&&(k=C,C=P,P=k),k=Vn(_,P),E=Vn(_,C),k&&E&&(1!==T.rangeCount||T.anchorNode!==k.node||T.anchorOffset!==k.offset||T.focusNode!==E.node||T.focusOffset!==E.offset)&&((x=document.createRange()).setStart(k.node,k.offset),T.removeAllRanges(),P>C?(T.addRange(x),T.extend(E.node,E.offset)):(x.setEnd(E.node,E.offset),T.addRange(x))))),T=[];for(P=_;P=P.parentNode;)1===P.nodeType&&T.push({element:P,left:P.scrollLeft,top:P.scrollTop});for("function"==typeof _.focus&&_.focus(),_=0;_<T.length;_++)(P=T[_]).element.scrollLeft=P.left,P.element.scrollTop=P.top}for(Gr=null,On(Jr),Jr=null,n.current=t,la=o;null!==la;){o=!1,_=void 0;try{for(T=r;null!==la;){var A=la.effectTag;if(36&A){var F=la.alternate;switch(C=T,(P=la).tag){case 2:var R=P.stateNode;if(4&P.effectTag)if(null===F)R.props=P.memoizedProps,R.state=P.memoizedState,R.componentDidMount();else{var N=F.memoizedProps,O=F.memoizedState;R.props=P.memoizedProps,R.state=P.memoizedState,R.componentDidUpdate(N,O,R.__reactInternalSnapshotBeforeUpdate)}var B=P.updateQueue;null!==B&&(R.props=P.memoizedProps,R.state=P.memoizedState,$o(P,B,R));break;case 3:var U=P.updateQueue;if(null!==U){if(k=null,null!==P.child)switch(P.child.tag){case 5:k=P.child.stateNode;break;case 2:k=P.child.stateNode}$o(P,U,k)}break;case 5:var I=P.stateNode;null===F&&4&P.effectTag&&Zr(P.type,P.memoizedProps)&&I.focus();break;case 6:case 4:case 15:case 16:break;default:d("163")}}if(128&A){P=void 0;var D=la.ref;if(null!==D){var M=la.stateNode;switch(la.tag){case 5:P=M;break;default:P=M}"function"==typeof D?D(P):D.current=P}}var L=la.nextEffect;la.nextEffect=null,la=L}}catch(e){o=!0,_=e}o&&(null===la&&d("178"),ga(la,_),null!==la&&(la=la.nextEffect))}ra=ca=!1,Bo(t.stateNode),0===(t=n.current.expirationTime)&&(pa=null),e.remainingExpirationTime=t}function Za(){return!(null===Ua||Ua.timeRemaining()>qa)&&(Na=!0)}function es(e){null===Aa&&d("246"),Aa.remainingExpirationTime=0,Oa||(Oa=!0,Ba=e)}function ts(e,t){var n=Ia;Ia=!0;try{return e(t)}finally{(Ia=n)||Pa||$a()}}function ns(e,t){if(Ia&&!Da){Da=!0;try{return e(t)}finally{Da=!1}}return e(t)}function rs(e,t){Pa&&d("187");var n=Ia;Ia=!0;try{return Ea(e,t)}finally{Ia=n,$a()}}function os(e,t,n){if(Ma)return e(t,n);Ia||Pa||0===Ra||(Xa(Ra,!1,null),Ra=0);var r=Ma,o=Ia;Ia=Ma=!0;try{return e(t,n)}finally{Ma=r,(Ia=o)||Pa||$a()}}function is(e){var t=Ia;Ia=!0;try{Ea(e)}finally{(Ia=t)||Pa||Xa(1,!1,null)}}function as(e,t,n,r,o){var i=t.current;if(n){var a;n=n._reactInternalFiber;e:{for(2===ln(n)&&2===n.tag||d("170"),a=n;3!==a.tag;){if(go(a)){a=a.stateNode.__reactInternalMemoizedMergedChildContext;break e}(a=a.return)||d("171")}a=a.stateNode.context}n=go(n)?Co(n,a):a}else n=p;return null===t.context?t.context=n:t.pendingContext=n,t=o,(o=Lo(r)).payload={element:e},null!==(t=void 0===t?null:t)&&(o.callback=t),zo(i,o,r),wa(i,r),r}function ss(e){var t=e._reactInternalFiber;return void 0===t&&("function"==typeof e.render?d("188"):d("268",Object.keys(e))),null===(e=pn(t))?null:e.stateNode}function us(e,t,n,r){var o=t.current;return as(e,t,n,o=ba(Ca(),o),r)}function ls(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function cs(e){var t=e.findFiberByHostInstance;return function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);Ro=Oo(function(e){return t.onCommitFiberRoot(n,e)}),No=Oo(function(e){return t.onCommitFiberUnmount(n,e)})}catch(e){}return!0}(s({},e,{findHostInstanceByFiber:function(e){return null===(e=pn(e))?null:e.stateNode},findFiberByHostInstance:function(e){return t?t(e):null}}))}var fs=ts,ps=os,ds=function(){Pa||0===Ra||(Xa(Ra,!1,null),Ra=0)};function hs(e){this._expirationTime=va(),this._root=e,this._callbacks=this._next=null,this._hasChildren=this._didComplete=!1,this._children=null,this._defer=!0}function ys(){this._callbacks=null,this._didCommit=!1,this._onCommit=this._onCommit.bind(this)}function ms(e,t,n){this._internalRoot=Fo(e,t,n)}function gs(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function vs(e,t,n,r,o){gs(n)||d("200");var i=n._reactRootContainer;if(i){if("function"==typeof o){var a=o;o=function(){var e=ls(i._internalRoot);a.call(e)}}null!=e?i.legacy_renderSubtreeIntoContainer(e,t,o):i.render(t,o)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new ms(e,!1,t)}(n,r),"function"==typeof o){var s=o;o=function(){var e=ls(i._internalRoot);s.call(e)}}ns(function(){null!=e?i.legacy_renderSubtreeIntoContainer(e,t,o):i.render(t,o)})}return ls(i._internalRoot)}function bs(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return gs(t)||d("200"),function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:lt,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}je.injectFiberControlledHostComponent(Qr),hs.prototype.render=function(e){this._defer||d("250"),this._hasChildren=!0,this._children=e;var t=this._root._internalRoot,n=this._expirationTime,r=new ys;return as(e,t,null,n,r._onCommit),r},hs.prototype.then=function(e){if(this._didComplete)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},hs.prototype.commit=function(){var e=this._root._internalRoot,t=e.firstBatch;if(this._defer&&null!==t||d("251"),this._hasChildren){var n=this._expirationTime;if(t!==this){this._hasChildren&&(n=this._expirationTime=t._expirationTime,this.render(this._children));for(var r=null,o=t;o!==this;)r=o,o=o._next;null===r&&d("251"),r._next=o._next,this._next=t,e.firstBatch=this}this._defer=!1,Ka(e,n),t=this._next,this._next=null,null!==(t=e.firstBatch=t)&&t._hasChildren&&t.render(t._children)}else this._next=null,this._defer=!1},hs.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++)(0,e[t])()}},ys.prototype.then=function(e){if(this._didCommit)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},ys.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++){var n=e[t];"function"!=typeof n&&d("191",n),n()}}},ms.prototype.render=function(e,t){var n=this._internalRoot,r=new ys;return null!==(t=void 0===t?null:t)&&r.then(t),us(e,n,null,r._onCommit),r},ms.prototype.unmount=function(e){var t=this._internalRoot,n=new ys;return null!==(e=void 0===e?null:e)&&n.then(e),us(null,t,null,n._onCommit),n},ms.prototype.legacy_renderSubtreeIntoContainer=function(e,t,n){var r=this._internalRoot,o=new ys;return null!==(n=void 0===n?null:n)&&o.then(n),us(t,r,e,o._onCommit),o},ms.prototype.createBatch=function(){var e=new hs(this),t=e._expirationTime,n=this._internalRoot,r=n.firstBatch;if(null===r)n.firstBatch=e,e._next=null;else{for(n=null;null!==r&&r._expirationTime<=t;)n=r,r=r._next;e._next=r,null!==n&&(n._next=e)}return e},Xe=fs,Ke=ps,Qe=ds;var ws={createPortal:bs,findDOMNode:function(e){return null==e?null:1===e.nodeType?e:ss(e)},hydrate:function(e,t,n){return vs(null,e,t,!0,n)},render:function(e,t,n){return vs(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){return(null==e||void 0===e._reactInternalFiber)&&d("38"),vs(e,t,n,!1,r)},unmountComponentAtNode:function(e){return gs(e)||d("40"),!!e._reactRootContainer&&(ns(function(){vs(null,null,e,!1,function(){e._reactRootContainer=null})}),!0)},unstable_createPortal:function(){return bs.apply(void 0,arguments)},unstable_batchedUpdates:ts,unstable_deferredUpdates:ka,unstable_interactiveUpdates:os,flushSync:rs,unstable_flushControlled:is,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{EventPluginHub:j,EventPluginRegistry:S,EventPropagators:re,ReactControlledComponent:$e,ReactDOMComponentTree:$,ReactDOMEventListener:Mn},unstable_createRoot:function(e,t){return new ms(e,!0,null!=t&&!0===t.hydrate)}};cs({findFiberByHostInstance:V,bundleType:0,version:"16.4.2",rendererPackageName:"react-dom"});var Cs={default:ws},ks=Cs&&ws||Cs;e.exports=ks.default?ks.default:ks},function(e,t,n){"use strict";var r=!("undefined"==typeof window||!window.document||!window.document.createElement),o={canUseDOM:r,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:r&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:r&&!!window.screen,isInWorker:!r};e.exports=o},function(e,t,n){"use strict";e.exports=function(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}},function(e,t,n){"use strict";var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=Object.prototype.hasOwnProperty;function i(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}e.exports=function(e,t){if(i(e,t))return!0;if("object"!==(void 0===e?"undefined":r(e))||null===e||"object"!==(void 0===t?"undefined":r(t))||null===t)return!1;var n=Object.keys(e),a=Object.keys(t);if(n.length!==a.length)return!1;for(var s=0;s<n.length;s++)if(!o.call(t,n[s])||!i(e[n[s]],t[n[s]]))return!1;return!0}},function(e,t,n){"use strict";var r=n(38);e.exports=function e(t,n){return!(!t||!n)&&(t===n||!r(t)&&(r(n)?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}},function(e,t,n){"use strict";var r=n(39);e.exports=function(e){return r(e)&&3==e.nodeType}},function(e,t,n){"use strict";var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};e.exports=function(e){var t=(e?e.ownerDocument||e:document).defaultView||window;return!(!e||!("function"==typeof t.Node?e instanceof t.Node:"object"===(void 0===e?"undefined":r(e))&&"number"==typeof e.nodeType&&"string"==typeof e.nodeName))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.styles={h1:{backgroundColor:"blue"},form:{padding:12},log:{border:"1px solid silver"},name:{border:"1px solid silver"},msg:{border:"1px solid silver"}}},function(e,t,n){"use strict";var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=n(42),i=n(9),a=n(20),s=n(3)("socket.io-client");e.exports=t=l;var u=t.managers={};function l(e,t){"object"===(void 0===e?"undefined":r(e))&&(t=e,e=void 0),t=t||{};var n,i=o(e),l=i.source,c=i.id,f=i.path,p=u[c]&&f in u[c].nsps;return t.forceNew||t["force new connection"]||!1===t.multiplex||p?(s("ignoring socket cache for %s",l),n=a(l,t)):(u[c]||(s("new io instance for %s",l),u[c]=a(l,t)),n=u[c]),i.query&&!t.query&&(t.query=i.query),n.socket(i.path,t)}t.protocol=i.protocol,t.connect=l,t.Manager=n(20),t.Socket=n(27)},function(e,t,n){"use strict";(function(t){var r=n(17),o=n(3)("socket.io-client:url");e.exports=function(e,n){var i=e;n=n||t.location,null==e&&(e=n.protocol+"//"+n.host);"string"==typeof e&&("/"===e.charAt(0)&&(e="/"===e.charAt(1)?n.protocol+e:n.host+e),/^(https?|wss?):\/\//.test(e)||(o("protocol-less url %s",e),e=void 0!==n?n.protocol+"//"+e:"https://"+e),o("parse %s",e),i=r(e));i.port||(/^(http|ws)$/.test(i.protocol)?i.port="80":/^(http|ws)s$/.test(i.protocol)&&(i.port="443"));i.path=i.path||"/";var a=-1!==i.host.indexOf(":")?"["+i.host+"]":i.host;return i.id=i.protocol+"://"+a+":"+i.port,i.href=i.protocol+"://"+a+(n&&n.port===i.port?"":":"+i.port),i}}).call(this,n(0))},function(e,t,n){"use strict";function r(e){var n;function r(){if(r.enabled){var e=r,o=+new Date,i=o-(n||o);e.diff=i,e.prev=n,e.curr=o,n=o;for(var a=new Array(arguments.length),s=0;s<a.length;s++)a[s]=arguments[s];a[0]=t.coerce(a[0]),"string"!=typeof a[0]&&a.unshift("%O");var u=0;a[0]=a[0].replace(/%([a-zA-Z%])/g,function(n,r){if("%%"===n)return n;u++;var o=t.formatters[r];if("function"==typeof o){var i=a[u];n=o.call(e,i),a.splice(u,1),u--}return n}),t.formatArgs.call(e,a),(r.log||t.log||console.log.bind(console)).apply(e,a)}}return r.namespace=e,r.enabled=t.enabled(e),r.useColors=t.useColors(),r.color=function(e){var n,r=0;for(n in e)r=(r<<5)-r+e.charCodeAt(n),r|=0;return t.colors[Math.abs(r)%t.colors.length]}(e),r.destroy=o,"function"==typeof t.init&&t.init(r),t.instances.push(r),r}function o(){var e=t.instances.indexOf(this);return-1!==e&&(t.instances.splice(e,1),!0)}(t=e.exports=r.debug=r.default=r).coerce=function(e){return e instanceof Error?e.stack||e.message:e},t.disable=function(){t.enable("")},t.enable=function(e){var n;t.save(e),t.names=[],t.skips=[];var r=("string"==typeof e?e:"").split(/[\s,]+/),o=r.length;for(n=0;n<o;n++)r[n]&&("-"===(e=r[n].replace(/\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.substr(1)+"$")):t.names.push(new RegExp("^"+e+"$")));for(n=0;n<t.instances.length;n++){var i=t.instances[n];i.enabled=t.enabled(i.namespace)}},t.enabled=function(e){if("*"===e[e.length-1])return!0;var n,r;for(n=0,r=t.skips.length;n<r;n++)if(t.skips[n].test(e))return!1;for(n=0,r=t.names.length;n<r;n++)if(t.names[n].test(e))return!0;return!1},t.humanize=n(8),t.instances=[],t.names=[],t.skips=[],t.formatters={}},function(e,t,n){"use strict";(function(r){var o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};function i(){var e;try{e=t.storage.debug}catch(e){}return!e&&void 0!==r&&"env"in r&&(e=r.env.DEBUG),e}(t=e.exports=n(45)).log=function(){return"object"===("undefined"==typeof console?"undefined":o(console))&&console.log&&Function.prototype.apply.call(console.log,console,arguments)},t.formatArgs=function(e){var n=this.useColors;if(e[0]=(n?"%c":"")+this.namespace+(n?" %c":" ")+e[0]+(n?"%c ":" ")+"+"+t.humanize(this.diff),!n)return;var r="color: "+this.color;e.splice(1,0,r,"color: inherit");var o=0,i=0;e[0].replace(/%[a-zA-Z%]/g,function(e){"%%"!==e&&"%c"===e&&(i=++o)}),e.splice(i,0,r)},t.save=function(e){try{null==e?t.storage.removeItem("debug"):t.storage.debug=e}catch(e){}},t.load=i,t.useColors=function(){if("undefined"!=typeof window&&window.process&&"renderer"===window.process.type)return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},t.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:function(){try{return window.localStorage}catch(e){}}(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.formatters.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}},t.enable(i())}).call(this,n(7))},function(e,t,n){"use strict";function r(e){var n;function r(){if(r.enabled){var e=r,o=+new Date,i=o-(n||o);e.diff=i,e.prev=n,e.curr=o,n=o;for(var a=new Array(arguments.length),s=0;s<a.length;s++)a[s]=arguments[s];a[0]=t.coerce(a[0]),"string"!=typeof a[0]&&a.unshift("%O");var u=0;a[0]=a[0].replace(/%([a-zA-Z%])/g,function(n,r){if("%%"===n)return n;u++;var o=t.formatters[r];if("function"==typeof o){var i=a[u];n=o.call(e,i),a.splice(u,1),u--}return n}),t.formatArgs.call(e,a),(r.log||t.log||console.log.bind(console)).apply(e,a)}}return r.namespace=e,r.enabled=t.enabled(e),r.useColors=t.useColors(),r.color=function(e){var n,r=0;for(n in e)r=(r<<5)-r+e.charCodeAt(n),r|=0;return t.colors[Math.abs(r)%t.colors.length]}(e),r.destroy=o,"function"==typeof t.init&&t.init(r),t.instances.push(r),r}function o(){var e=t.instances.indexOf(this);return-1!==e&&(t.instances.splice(e,1),!0)}(t=e.exports=r.debug=r.default=r).coerce=function(e){return e instanceof Error?e.stack||e.message:e},t.disable=function(){t.enable("")},t.enable=function(e){var n;t.save(e),t.names=[],t.skips=[];var r=("string"==typeof e?e:"").split(/[\s,]+/),o=r.length;for(n=0;n<o;n++)r[n]&&("-"===(e=r[n].replace(/\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.substr(1)+"$")):t.names.push(new RegExp("^"+e+"$")));for(n=0;n<t.instances.length;n++){var i=t.instances[n];i.enabled=t.enabled(i.namespace)}},t.enabled=function(e){if("*"===e[e.length-1])return!0;var n,r;for(n=0,r=t.skips.length;n<r;n++)if(t.skips[n].test(e))return!1;for(n=0,r=t.names.length;n<r;n++)if(t.names[n].test(e))return!0;return!1},t.humanize=n(8),t.instances=[],t.names=[],t.skips=[],t.formatters={}},function(e,t,n){"use strict";(function(e){var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=n(18),i=n(19),a=Object.prototype.toString,s="function"==typeof e.Blob||"[object BlobConstructor]"===a.call(e.Blob),u="function"==typeof e.File||"[object FileConstructor]"===a.call(e.File);t.deconstructPacket=function(e){var t=[],n=e.data,a=e;return a.data=function e(t,n){if(!t)return t;if(i(t)){var a={_placeholder:!0,num:n.length};return n.push(t),a}if(o(t)){for(var s=new Array(t.length),u=0;u<t.length;u++)s[u]=e(t[u],n);return s}if("object"===(void 0===t?"undefined":r(t))&&!(t instanceof Date)){var s={};for(var l in t)s[l]=e(t[l],n);return s}return t}(n,t),a.attachments=t.length,{packet:a,buffers:t}},t.reconstructPacket=function(e,t){return e.data=function e(t,n){if(!t)return t;if(t&&t._placeholder)return n[t.num];if(o(t))for(var i=0;i<t.length;i++)t[i]=e(t[i],n);else if("object"===(void 0===t?"undefined":r(t)))for(var a in t)t[a]=e(t[a],n);return t}(e.data,t),e.attachments=void 0,e},t.removeBlobs=function(e,t){var n=0,a=e;!function e(l,c,f){if(!l)return l;if(s&&l instanceof Blob||u&&l instanceof File){n++;var p=new FileReader;p.onload=function(){f?f[c]=this.result:a=this.result,--n||t(a)},p.readAsArrayBuffer(l)}else if(o(l))for(var d=0;d<l.length;d++)e(l[d],d,l);else if("object"===(void 0===l?"undefined":r(l))&&!i(l))for(var h in l)e(l[h],h,l)}(a),n||t(a)}}).call(this,n(0))},function(e,t,n){"use strict";e.exports=n(48),e.exports.parser=n(2)},function(e,t,n){"use strict";(function(t){var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=n(21),i=n(1),a=n(6)("engine.io-client:socket"),s=n(26),u=n(2),l=n(17),c=n(4);function f(e,n){if(!(this instanceof f))return new f(e,n);n=n||{},e&&"object"===(void 0===e?"undefined":r(e))&&(n=e,e=null),e?(e=l(e),n.hostname=e.host,n.secure="https"===e.protocol||"wss"===e.protocol,n.port=e.port,e.query&&(n.query=e.query)):n.host&&(n.hostname=l(n.host).host),this.secure=null!=n.secure?n.secure:t.location&&"https:"===location.protocol,n.hostname&&!n.port&&(n.port=this.secure?"443":"80"),this.agent=n.agent||!1,this.hostname=n.hostname||(t.location?location.hostname:"localhost"),this.port=n.port||(t.location&&location.port?location.port:this.secure?443:80),this.query=n.query||{},"string"==typeof this.query&&(this.query=c.decode(this.query)),this.upgrade=!1!==n.upgrade,this.path=(n.path||"/engine.io").replace(/\/$/,"")+"/",this.forceJSONP=!!n.forceJSONP,this.jsonp=!1!==n.jsonp,this.forceBase64=!!n.forceBase64,this.enablesXDR=!!n.enablesXDR,this.timestampParam=n.timestampParam||"t",this.timestampRequests=n.timestampRequests,this.transports=n.transports||["polling","websocket"],this.transportOptions=n.transportOptions||{},this.readyState="",this.writeBuffer=[],this.prevBufferLen=0,this.policyPort=n.policyPort||843,this.rememberUpgrade=n.rememberUpgrade||!1,this.binaryType=null,this.onlyBinaryUpgrades=n.onlyBinaryUpgrades,this.perMessageDeflate=!1!==n.perMessageDeflate&&(n.perMessageDeflate||{}),!0===this.perMessageDeflate&&(this.perMessageDeflate={}),this.perMessageDeflate&&null==this.perMessageDeflate.threshold&&(this.perMessageDeflate.threshold=1024),this.pfx=n.pfx||null,this.key=n.key||null,this.passphrase=n.passphrase||null,this.cert=n.cert||null,this.ca=n.ca||null,this.ciphers=n.ciphers||null,this.rejectUnauthorized=void 0===n.rejectUnauthorized||n.rejectUnauthorized,this.forceNode=!!n.forceNode;var o="object"===(void 0===t?"undefined":r(t))&&t;o.global===o&&(n.extraHeaders&&Object.keys(n.extraHeaders).length>0&&(this.extraHeaders=n.extraHeaders),n.localAddress&&(this.localAddress=n.localAddress)),this.id=null,this.upgrades=null,this.pingInterval=null,this.pingTimeout=null,this.pingIntervalTimer=null,this.pingTimeoutTimer=null,this.open()}e.exports=f,f.priorWebsocketSuccess=!1,i(f.prototype),f.protocol=u.protocol,f.Socket=f,f.Transport=n(11),f.transports=n(21),f.parser=n(2),f.prototype.createTransport=function(e){a('creating transport "%s"',e);var t=function(e){var t={};for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}(this.query);t.EIO=u.protocol,t.transport=e;var n=this.transportOptions[e]||{};return this.id&&(t.sid=this.id),new o[e]({query:t,socket:this,agent:n.agent||this.agent,hostname:n.hostname||this.hostname,port:n.port||this.port,secure:n.secure||this.secure,path:n.path||this.path,forceJSONP:n.forceJSONP||this.forceJSONP,jsonp:n.jsonp||this.jsonp,forceBase64:n.forceBase64||this.forceBase64,enablesXDR:n.enablesXDR||this.enablesXDR,timestampRequests:n.timestampRequests||this.timestampRequests,timestampParam:n.timestampParam||this.timestampParam,policyPort:n.policyPort||this.policyPort,pfx:n.pfx||this.pfx,key:n.key||this.key,passphrase:n.passphrase||this.passphrase,cert:n.cert||this.cert,ca:n.ca||this.ca,ciphers:n.ciphers||this.ciphers,rejectUnauthorized:n.rejectUnauthorized||this.rejectUnauthorized,perMessageDeflate:n.perMessageDeflate||this.perMessageDeflate,extraHeaders:n.extraHeaders||this.extraHeaders,forceNode:n.forceNode||this.forceNode,localAddress:n.localAddress||this.localAddress,requestTimeout:n.requestTimeout||this.requestTimeout,protocols:n.protocols||void 0})},f.prototype.open=function(){var e;if(this.rememberUpgrade&&f.priorWebsocketSuccess&&-1!==this.transports.indexOf("websocket"))e="websocket";else{if(0===this.transports.length){var t=this;return void setTimeout(function(){t.emit("error","No transports available")},0)}e=this.transports[0]}this.readyState="opening";try{e=this.createTransport(e)}catch(e){return this.transports.shift(),void this.open()}e.open(),this.setTransport(e)},f.prototype.setTransport=function(e){a("setting transport %s",e.name);var t=this;this.transport&&(a("clearing existing transport %s",this.transport.name),this.transport.removeAllListeners()),this.transport=e,e.on("drain",function(){t.onDrain()}).on("packet",function(e){t.onPacket(e)}).on("error",function(e){t.onError(e)}).on("close",function(){t.onClose("transport close")})},f.prototype.probe=function(e){a('probing transport "%s"',e);var t=this.createTransport(e,{probe:1}),n=!1,r=this;function o(){if(r.onlyBinaryUpgrades){var o=!this.supportsBinary&&r.transport.supportsBinary;n=n||o}n||(a('probe transport "%s" opened',e),t.send([{type:"ping",data:"probe"}]),t.once("packet",function(o){if(!n)if("pong"===o.type&&"probe"===o.data){if(a('probe transport "%s" pong',e),r.upgrading=!0,r.emit("upgrading",t),!t)return;f.priorWebsocketSuccess="websocket"===t.name,a('pausing current transport "%s"',r.transport.name),r.transport.pause(function(){n||"closed"!==r.readyState&&(a("changing transport and sending upgrade packet"),p(),r.setTransport(t),t.send([{type:"upgrade"}]),r.emit("upgrade",t),t=null,r.upgrading=!1,r.flush())})}else{a('probe transport "%s" failed',e);var i=new Error("probe error");i.transport=t.name,r.emit("upgradeError",i)}}))}function i(){n||(n=!0,p(),t.close(),t=null)}function s(n){var o=new Error("probe error: "+n);o.transport=t.name,i(),a('probe transport "%s" failed because of error: %s',e,n),r.emit("upgradeError",o)}function u(){s("transport closed")}function l(){s("socket closed")}function c(e){t&&e.name!==t.name&&(a('"%s" works - aborting "%s"',e.name,t.name),i())}function p(){t.removeListener("open",o),t.removeListener("error",s),t.removeListener("close",u),r.removeListener("close",l),r.removeListener("upgrading",c)}f.priorWebsocketSuccess=!1,t.once("open",o),t.once("error",s),t.once("close",u),this.once("close",l),this.once("upgrading",c),t.open()},f.prototype.onOpen=function(){if(a("socket open"),this.readyState="open",f.priorWebsocketSuccess="websocket"===this.transport.name,this.emit("open"),this.flush(),"open"===this.readyState&&this.upgrade&&this.transport.pause){a("starting upgrade probes");for(var e=0,t=this.upgrades.length;e<t;e++)this.probe(this.upgrades[e])}},f.prototype.onPacket=function(e){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState)switch(a('socket receive: type "%s", data "%s"',e.type,e.data),this.emit("packet",e),this.emit("heartbeat"),e.type){case"open":this.onHandshake(JSON.parse(e.data));break;case"pong":this.setPing(),this.emit("pong");break;case"error":var t=new Error("server error");t.code=e.data,this.onError(t);break;case"message":this.emit("data",e.data),this.emit("message",e.data)}else a('packet received with socket readyState "%s"',this.readyState)},f.prototype.onHandshake=function(e){this.emit("handshake",e),this.id=e.sid,this.transport.query.sid=e.sid,this.upgrades=this.filterUpgrades(e.upgrades),this.pingInterval=e.pingInterval,this.pingTimeout=e.pingTimeout,this.onOpen(),"closed"!==this.readyState&&(this.setPing(),this.removeListener("heartbeat",this.onHeartbeat),this.on("heartbeat",this.onHeartbeat))},f.prototype.onHeartbeat=function(e){clearTimeout(this.pingTimeoutTimer);var t=this;t.pingTimeoutTimer=setTimeout(function(){"closed"!==t.readyState&&t.onClose("ping timeout")},e||t.pingInterval+t.pingTimeout)},f.prototype.setPing=function(){var e=this;clearTimeout(e.pingIntervalTimer),e.pingIntervalTimer=setTimeout(function(){a("writing ping packet - expecting pong within %sms",e.pingTimeout),e.ping(),e.onHeartbeat(e.pingTimeout)},e.pingInterval)},f.prototype.ping=function(){var e=this;this.sendPacket("ping",function(){e.emit("ping")})},f.prototype.onDrain=function(){this.writeBuffer.splice(0,this.prevBufferLen),this.prevBufferLen=0,0===this.writeBuffer.length?this.emit("drain"):this.flush()},f.prototype.flush=function(){"closed"!==this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length&&(a("flushing %d packets in socket",this.writeBuffer.length),this.transport.send(this.writeBuffer),this.prevBufferLen=this.writeBuffer.length,this.emit("flush"))},f.prototype.write=f.prototype.send=function(e,t,n){return this.sendPacket("message",e,t,n),this},f.prototype.sendPacket=function(e,t,n,r){if("function"==typeof t&&(r=t,t=void 0),"function"==typeof n&&(r=n,n=null),"closing"!==this.readyState&&"closed"!==this.readyState){(n=n||{}).compress=!1!==n.compress;var o={type:e,data:t,options:n};this.emit("packetCreate",o),this.writeBuffer.push(o),r&&this.once("flush",r),this.flush()}},f.prototype.close=function(){if("opening"===this.readyState||"open"===this.readyState){this.readyState="closing";var e=this;this.writeBuffer.length?this.once("drain",function(){this.upgrading?r():t()}):this.upgrading?r():t()}function t(){e.onClose("forced close"),a("socket closing - telling transport to close"),e.transport.close()}function n(){e.removeListener("upgrade",n),e.removeListener("upgradeError",n),t()}function r(){e.once("upgrade",n),e.once("upgradeError",n)}return this},f.prototype.onError=function(e){a("socket error %j",e),f.priorWebsocketSuccess=!1,this.emit("error",e),this.onClose("transport error",e)},f.prototype.onClose=function(e,t){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState){a('socket close with reason: "%s"',e);clearTimeout(this.pingIntervalTimer),clearTimeout(this.pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),this.readyState="closed",this.id=null,this.emit("close",e,t),this.writeBuffer=[],this.prevBufferLen=0}},f.prototype.filterUpgrades=function(e){for(var t=[],n=0,r=e.length;n<r;n++)~s(this.transports,e[n])&&t.push(e[n]);return t}}).call(this,n(0))},function(e,t,n){"use strict";try{e.exports="undefined"!=typeof XMLHttpRequest&&"withCredentials"in new XMLHttpRequest}catch(t){e.exports=!1}},function(e,t,n){"use strict";(function(t){var r=n(10),o=n(22),i=n(1),a=n(5),s=n(6)("engine.io-client:polling-xhr");function u(){}function l(e){if(o.call(this,e),this.requestTimeout=e.requestTimeout,this.extraHeaders=e.extraHeaders,t.location){var n="https:"===location.protocol,r=location.port;r||(r=n?443:80),this.xd=e.hostname!==t.location.hostname||r!==e.port,this.xs=e.secure!==n}}function c(e){this.method=e.method||"GET",this.uri=e.uri,this.xd=!!e.xd,this.xs=!!e.xs,this.async=!1!==e.async,this.data=void 0!==e.data?e.data:null,this.agent=e.agent,this.isBinary=e.isBinary,this.supportsBinary=e.supportsBinary,this.enablesXDR=e.enablesXDR,this.requestTimeout=e.requestTimeout,this.pfx=e.pfx,this.key=e.key,this.passphrase=e.passphrase,this.cert=e.cert,this.ca=e.ca,this.ciphers=e.ciphers,this.rejectUnauthorized=e.rejectUnauthorized,this.extraHeaders=e.extraHeaders,this.create()}function f(){for(var e in c.requests)c.requests.hasOwnProperty(e)&&c.requests[e].abort()}e.exports=l,e.exports.Request=c,a(l,o),l.prototype.supportsBinary=!0,l.prototype.request=function(e){return(e=e||{}).uri=this.uri(),e.xd=this.xd,e.xs=this.xs,e.agent=this.agent||!1,e.supportsBinary=this.supportsBinary,e.enablesXDR=this.enablesXDR,e.pfx=this.pfx,e.key=this.key,e.passphrase=this.passphrase,e.cert=this.cert,e.ca=this.ca,e.ciphers=this.ciphers,e.rejectUnauthorized=this.rejectUnauthorized,e.requestTimeout=this.requestTimeout,e.extraHeaders=this.extraHeaders,new c(e)},l.prototype.doWrite=function(e,t){var n="string"!=typeof e&&void 0!==e,r=this.request({method:"POST",data:e,isBinary:n}),o=this;r.on("success",t),r.on("error",function(e){o.onError("xhr post error",e)}),this.sendXhr=r},l.prototype.doPoll=function(){s("xhr poll");var e=this.request(),t=this;e.on("data",function(e){t.onData(e)}),e.on("error",function(e){t.onError("xhr poll error",e)}),this.pollXhr=e},i(c.prototype),c.prototype.create=function(){var e={agent:this.agent,xdomain:this.xd,xscheme:this.xs,enablesXDR:this.enablesXDR};e.pfx=this.pfx,e.key=this.key,e.passphrase=this.passphrase,e.cert=this.cert,e.ca=this.ca,e.ciphers=this.ciphers,e.rejectUnauthorized=this.rejectUnauthorized;var n=this.xhr=new r(e),o=this;try{s("xhr open %s: %s",this.method,this.uri),n.open(this.method,this.uri,this.async);try{if(this.extraHeaders)for(var i in n.setDisableHeaderCheck&&n.setDisableHeaderCheck(!0),this.extraHeaders)this.extraHeaders.hasOwnProperty(i)&&n.setRequestHeader(i,this.extraHeaders[i])}catch(e){}if("POST"===this.method)try{this.isBinary?n.setRequestHeader("Content-type","application/octet-stream"):n.setRequestHeader("Content-type","text/plain;charset=UTF-8")}catch(e){}try{n.setRequestHeader("Accept","*/*")}catch(e){}"withCredentials"in n&&(n.withCredentials=!0),this.requestTimeout&&(n.timeout=this.requestTimeout),this.hasXDR()?(n.onload=function(){o.onLoad()},n.onerror=function(){o.onError(n.responseText)}):n.onreadystatechange=function(){if(2===n.readyState)try{var e=n.getResponseHeader("Content-Type");o.supportsBinary&&"application/octet-stream"===e&&(n.responseType="arraybuffer")}catch(e){}4===n.readyState&&(200===n.status||1223===n.status?o.onLoad():setTimeout(function(){o.onError(n.status)},0))},s("xhr data %s",this.data),n.send(this.data)}catch(e){return void setTimeout(function(){o.onError(e)},0)}t.document&&(this.index=c.requestsCount++,c.requests[this.index]=this)},c.prototype.onSuccess=function(){this.emit("success"),this.cleanup()},c.prototype.onData=function(e){this.emit("data",e),this.onSuccess()},c.prototype.onError=function(e){this.emit("error",e),this.cleanup(!0)},c.prototype.cleanup=function(e){if(void 0!==this.xhr&&null!==this.xhr){if(this.hasXDR()?this.xhr.onload=this.xhr.onerror=u:this.xhr.onreadystatechange=u,e)try{this.xhr.abort()}catch(e){}t.document&&delete c.requests[this.index],this.xhr=null}},c.prototype.onLoad=function(){var e;try{var t;try{t=this.xhr.getResponseHeader("Content-Type")}catch(e){}e="application/octet-stream"===t&&this.xhr.response||this.xhr.responseText}catch(e){this.onError(e)}null!=e&&this.onData(e)},c.prototype.hasXDR=function(){return void 0!==t.XDomainRequest&&!this.xs&&this.enablesXDR},c.prototype.abort=function(){this.cleanup()},c.requestsCount=0,c.requests={},t.document&&(t.attachEvent?t.attachEvent("onunload",f):t.addEventListener&&t.addEventListener("beforeunload",f,!1))}).call(this,n(0))},function(e,t,n){"use strict";e.exports=Object.keys||function(e){var t=[],n=Object.prototype.hasOwnProperty;for(var r in e)n.call(e,r)&&t.push(r);return t}},function(e,t,n){"use strict";(function(e){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
var r=n(53),o=n(54),i=n(55);function a(){return u.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function s(e,t){if(a()<t)throw new RangeError("Invalid typed array length");return u.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(t)).__proto__=u.prototype:(null===e&&(e=new u(t)),e.length=t),e}function u(e,t,n){if(!(u.TYPED_ARRAY_SUPPORT||this instanceof u))return new u(e,t,n);if("number"==typeof e){if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return f(this,e)}return l(this,e,t,n)}function l(e,t,n,r){if("number"==typeof t)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer?function(e,t,n,r){if(t.byteLength,n<0||t.byteLength<n)throw new RangeError("'offset' is out of bounds");if(t.byteLength<n+(r||0))throw new RangeError("'length' is out of bounds");t=void 0===n&&void 0===r?new Uint8Array(t):void 0===r?new Uint8Array(t,n):new Uint8Array(t,n,r);u.TYPED_ARRAY_SUPPORT?(e=t).__proto__=u.prototype:e=p(e,t);return e}(e,t,n,r):"string"==typeof t?function(e,t,n){"string"==typeof n&&""!==n||(n="utf8");if(!u.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var r=0|h(t,n),o=(e=s(e,r)).write(t,n);o!==r&&(e=e.slice(0,o));return e}(e,t,n):function(e,t){if(u.isBuffer(t)){var n=0|d(t.length);return 0===(e=s(e,n)).length?e:(t.copy(e,0,0,n),e)}if(t){if("undefined"!=typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||"length"in t)return"number"!=typeof t.length||function(e){return e!=e}(t.length)?s(e,0):p(e,t);if("Buffer"===t.type&&i(t.data))return p(e,t.data)}throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(e,t)}function c(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function f(e,t){if(c(t),e=s(e,t<0?0:0|d(t)),!u.TYPED_ARRAY_SUPPORT)for(var n=0;n<t;++n)e[n]=0;return e}function p(e,t){var n=t.length<0?0:0|d(t.length);e=s(e,n);for(var r=0;r<n;r+=1)e[r]=255&t[r];return e}function d(e){if(e>=a())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+a().toString(16)+" bytes");return 0|e}function h(e,t){if(u.isBuffer(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!=typeof e&&(e=""+e);var n=e.length;if(0===n)return 0;for(var r=!1;;)switch(t){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return j(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return z(e).length;default:if(r)return j(e).length;t=(""+t).toLowerCase(),r=!0}}function y(e,t,n){var r=e[t];e[t]=e[n],e[n]=r}function m(e,t,n,r,o){if(0===e.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=o?0:e.length-1),n<0&&(n=e.length+n),n>=e.length){if(o)return-1;n=e.length-1}else if(n<0){if(!o)return-1;n=0}if("string"==typeof t&&(t=u.from(t,r)),u.isBuffer(t))return 0===t.length?-1:g(e,t,n,r,o);if("number"==typeof t)return t&=255,u.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?o?Uint8Array.prototype.indexOf.call(e,t,n):Uint8Array.prototype.lastIndexOf.call(e,t,n):g(e,[t],n,r,o);throw new TypeError("val must be string, number or Buffer")}function g(e,t,n,r,o){var i,a=1,s=e.length,u=t.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(e.length<2||t.length<2)return-1;a=2,s/=2,u/=2,n/=2}function l(e,t){return 1===a?e[t]:e.readUInt16BE(t*a)}if(o){var c=-1;for(i=n;i<s;i++)if(l(e,i)===l(t,-1===c?0:i-c)){if(-1===c&&(c=i),i-c+1===u)return c*a}else-1!==c&&(i-=i-c),c=-1}else for(n+u>s&&(n=s-u),i=n;i>=0;i--){for(var f=!0,p=0;p<u;p++)if(l(e,i+p)!==l(t,p)){f=!1;break}if(f)return i}return-1}function v(e,t,n,r){n=Number(n)||0;var o=e.length-n;r?(r=Number(r))>o&&(r=o):r=o;var i=t.length;if(i%2!=0)throw new TypeError("Invalid hex string");r>i/2&&(r=i/2);for(var a=0;a<r;++a){var s=parseInt(t.substr(2*a,2),16);if(isNaN(s))return a;e[n+a]=s}return a}function b(e,t,n,r){return q(j(t,e.length-n),e,n,r)}function w(e,t,n,r){return q(function(e){for(var t=[],n=0;n<e.length;++n)t.push(255&e.charCodeAt(n));return t}(t),e,n,r)}function C(e,t,n,r){return w(e,t,n,r)}function k(e,t,n,r){return q(z(t),e,n,r)}function E(e,t,n,r){return q(function(e,t){for(var n,r,o,i=[],a=0;a<e.length&&!((t-=2)<0);++a)n=e.charCodeAt(a),r=n>>8,o=n%256,i.push(o),i.push(r);return i}(t,e.length-n),e,n,r)}function x(e,t,n){return 0===t&&n===e.length?r.fromByteArray(e):r.fromByteArray(e.slice(t,n))}function S(e,t,n){n=Math.min(e.length,n);for(var r=[],o=t;o<n;){var i,a,s,u,l=e[o],c=null,f=l>239?4:l>223?3:l>191?2:1;if(o+f<=n)switch(f){case 1:l<128&&(c=l);break;case 2:128==(192&(i=e[o+1]))&&(u=(31&l)<<6|63&i)>127&&(c=u);break;case 3:i=e[o+1],a=e[o+2],128==(192&i)&&128==(192&a)&&(u=(15&l)<<12|(63&i)<<6|63&a)>2047&&(u<55296||u>57343)&&(c=u);break;case 4:i=e[o+1],a=e[o+2],s=e[o+3],128==(192&i)&&128==(192&a)&&128==(192&s)&&(u=(15&l)<<18|(63&i)<<12|(63&a)<<6|63&s)>65535&&u<1114112&&(c=u)}null===c?(c=65533,f=1):c>65535&&(c-=65536,r.push(c>>>10&1023|55296),c=56320|1023&c),r.push(c),o+=f}return function(e){var t=e.length;if(t<=_)return String.fromCharCode.apply(String,e);var n="",r=0;for(;r<t;)n+=String.fromCharCode.apply(String,e.slice(r,r+=_));return n}(r)}t.Buffer=u,t.SlowBuffer=function(e){+e!=e&&(e=0);return u.alloc(+e)},t.INSPECT_MAX_BYTES=50,u.TYPED_ARRAY_SUPPORT=void 0!==e.TYPED_ARRAY_SUPPORT?e.TYPED_ARRAY_SUPPORT:function(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()&&"function"==typeof e.subarray&&0===e.subarray(1,1).byteLength}catch(e){return!1}}(),t.kMaxLength=a(),u.poolSize=8192,u._augment=function(e){return e.__proto__=u.prototype,e},u.from=function(e,t,n){return l(null,e,t,n)},u.TYPED_ARRAY_SUPPORT&&(u.prototype.__proto__=Uint8Array.prototype,u.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&u[Symbol.species]===u&&Object.defineProperty(u,Symbol.species,{value:null,configurable:!0})),u.alloc=function(e,t,n){return function(e,t,n,r){return c(t),t<=0?s(e,t):void 0!==n?"string"==typeof r?s(e,t).fill(n,r):s(e,t).fill(n):s(e,t)}(null,e,t,n)},u.allocUnsafe=function(e){return f(null,e)},u.allocUnsafeSlow=function(e){return f(null,e)},u.isBuffer=function(e){return!(null==e||!e._isBuffer)},u.compare=function(e,t){if(!u.isBuffer(e)||!u.isBuffer(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var n=e.length,r=t.length,o=0,i=Math.min(n,r);o<i;++o)if(e[o]!==t[o]){n=e[o],r=t[o];break}return n<r?-1:r<n?1:0},u.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(e,t){if(!i(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return u.alloc(0);var n;if(void 0===t)for(t=0,n=0;n<e.length;++n)t+=e[n].length;var r=u.allocUnsafe(t),o=0;for(n=0;n<e.length;++n){var a=e[n];if(!u.isBuffer(a))throw new TypeError('"list" argument must be an Array of Buffers');a.copy(r,o),o+=a.length}return r},u.byteLength=h,u.prototype._isBuffer=!0,u.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)y(this,t,t+1);return this},u.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)y(this,t,t+3),y(this,t+1,t+2);return this},u.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)y(this,t,t+7),y(this,t+1,t+6),y(this,t+2,t+5),y(this,t+3,t+4);return this},u.prototype.toString=function(){var e=0|this.length;return 0===e?"":0===arguments.length?S(this,0,e):function(e,t,n){var r=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return A(this,t,n);case"utf8":case"utf-8":return S(this,t,n);case"ascii":return T(this,t,n);case"latin1":case"binary":return P(this,t,n);case"base64":return x(this,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return F(this,t,n);default:if(r)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),r=!0}}.apply(this,arguments)},u.prototype.equals=function(e){if(!u.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===u.compare(this,e)},u.prototype.inspect=function(){var e="",n=t.INSPECT_MAX_BYTES;return this.length>0&&(e=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(e+=" ... ")),"<Buffer "+e+">"},u.prototype.compare=function(e,t,n,r,o){if(!u.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===n&&(n=e?e.length:0),void 0===r&&(r=0),void 0===o&&(o=this.length),t<0||n>e.length||r<0||o>this.length)throw new RangeError("out of range index");if(r>=o&&t>=n)return 0;if(r>=o)return-1;if(t>=n)return 1;if(t>>>=0,n>>>=0,r>>>=0,o>>>=0,this===e)return 0;for(var i=o-r,a=n-t,s=Math.min(i,a),l=this.slice(r,o),c=e.slice(t,n),f=0;f<s;++f)if(l[f]!==c[f]){i=l[f],a=c[f];break}return i<a?-1:a<i?1:0},u.prototype.includes=function(e,t,n){return-1!==this.indexOf(e,t,n)},u.prototype.indexOf=function(e,t,n){return m(this,e,t,n,!0)},u.prototype.lastIndexOf=function(e,t,n){return m(this,e,t,n,!1)},u.prototype.write=function(e,t,n,r){if(void 0===t)r="utf8",n=this.length,t=0;else if(void 0===n&&"string"==typeof t)r=t,n=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var o=this.length-t;if((void 0===n||n>o)&&(n=o),e.length>0&&(n<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var i=!1;;)switch(r){case"hex":return v(this,e,t,n);case"utf8":case"utf-8":return b(this,e,t,n);case"ascii":return w(this,e,t,n);case"latin1":case"binary":return C(this,e,t,n);case"base64":return k(this,e,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return E(this,e,t,n);default:if(i)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),i=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var _=4096;function T(e,t,n){var r="";n=Math.min(e.length,n);for(var o=t;o<n;++o)r+=String.fromCharCode(127&e[o]);return r}function P(e,t,n){var r="";n=Math.min(e.length,n);for(var o=t;o<n;++o)r+=String.fromCharCode(e[o]);return r}function A(e,t,n){var r=e.length;(!t||t<0)&&(t=0),(!n||n<0||n>r)&&(n=r);for(var o="",i=t;i<n;++i)o+=L(e[i]);return o}function F(e,t,n){for(var r=e.slice(t,n),o="",i=0;i<r.length;i+=2)o+=String.fromCharCode(r[i]+256*r[i+1]);return o}function R(e,t,n){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>n)throw new RangeError("Trying to access beyond buffer length")}function N(e,t,n,r,o,i){if(!u.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>o||t<i)throw new RangeError('"value" argument is out of bounds');if(n+r>e.length)throw new RangeError("Index out of range")}function O(e,t,n,r){t<0&&(t=65535+t+1);for(var o=0,i=Math.min(e.length-n,2);o<i;++o)e[n+o]=(t&255<<8*(r?o:1-o))>>>8*(r?o:1-o)}function B(e,t,n,r){t<0&&(t=4294967295+t+1);for(var o=0,i=Math.min(e.length-n,4);o<i;++o)e[n+o]=t>>>8*(r?o:3-o)&255}function U(e,t,n,r,o,i){if(n+r>e.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function I(e,t,n,r,i){return i||U(e,0,n,4),o.write(e,t,n,r,23,4),n+4}function D(e,t,n,r,i){return i||U(e,0,n,8),o.write(e,t,n,r,52,8),n+8}u.prototype.slice=function(e,t){var n,r=this.length;if(e=~~e,t=void 0===t?r:~~t,e<0?(e+=r)<0&&(e=0):e>r&&(e=r),t<0?(t+=r)<0&&(t=0):t>r&&(t=r),t<e&&(t=e),u.TYPED_ARRAY_SUPPORT)(n=this.subarray(e,t)).__proto__=u.prototype;else{var o=t-e;n=new u(o,void 0);for(var i=0;i<o;++i)n[i]=this[i+e]}return n},u.prototype.readUIntLE=function(e,t,n){e|=0,t|=0,n||R(e,t,this.length);for(var r=this[e],o=1,i=0;++i<t&&(o*=256);)r+=this[e+i]*o;return r},u.prototype.readUIntBE=function(e,t,n){e|=0,t|=0,n||R(e,t,this.length);for(var r=this[e+--t],o=1;t>0&&(o*=256);)r+=this[e+--t]*o;return r},u.prototype.readUInt8=function(e,t){return t||R(e,1,this.length),this[e]},u.prototype.readUInt16LE=function(e,t){return t||R(e,2,this.length),this[e]|this[e+1]<<8},u.prototype.readUInt16BE=function(e,t){return t||R(e,2,this.length),this[e]<<8|this[e+1]},u.prototype.readUInt32LE=function(e,t){return t||R(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},u.prototype.readUInt32BE=function(e,t){return t||R(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},u.prototype.readIntLE=function(e,t,n){e|=0,t|=0,n||R(e,t,this.length);for(var r=this[e],o=1,i=0;++i<t&&(o*=256);)r+=this[e+i]*o;return r>=(o*=128)&&(r-=Math.pow(2,8*t)),r},u.prototype.readIntBE=function(e,t,n){e|=0,t|=0,n||R(e,t,this.length);for(var r=t,o=1,i=this[e+--r];r>0&&(o*=256);)i+=this[e+--r]*o;return i>=(o*=128)&&(i-=Math.pow(2,8*t)),i},u.prototype.readInt8=function(e,t){return t||R(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},u.prototype.readInt16LE=function(e,t){t||R(e,2,this.length);var n=this[e]|this[e+1]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt16BE=function(e,t){t||R(e,2,this.length);var n=this[e+1]|this[e]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt32LE=function(e,t){return t||R(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},u.prototype.readInt32BE=function(e,t){return t||R(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},u.prototype.readFloatLE=function(e,t){return t||R(e,4,this.length),o.read(this,e,!0,23,4)},u.prototype.readFloatBE=function(e,t){return t||R(e,4,this.length),o.read(this,e,!1,23,4)},u.prototype.readDoubleLE=function(e,t){return t||R(e,8,this.length),o.read(this,e,!0,52,8)},u.prototype.readDoubleBE=function(e,t){return t||R(e,8,this.length),o.read(this,e,!1,52,8)},u.prototype.writeUIntLE=function(e,t,n,r){(e=+e,t|=0,n|=0,r)||N(this,e,t,n,Math.pow(2,8*n)-1,0);var o=1,i=0;for(this[t]=255&e;++i<n&&(o*=256);)this[t+i]=e/o&255;return t+n},u.prototype.writeUIntBE=function(e,t,n,r){(e=+e,t|=0,n|=0,r)||N(this,e,t,n,Math.pow(2,8*n)-1,0);var o=n-1,i=1;for(this[t+o]=255&e;--o>=0&&(i*=256);)this[t+o]=e/i&255;return t+n},u.prototype.writeUInt8=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,1,255,0),u.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=255&e,t+1},u.prototype.writeUInt16LE=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):O(this,e,t,!0),t+2},u.prototype.writeUInt16BE=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):O(this,e,t,!1),t+2},u.prototype.writeUInt32LE=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e):B(this,e,t,!0),t+4},u.prototype.writeUInt32BE=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):B(this,e,t,!1),t+4},u.prototype.writeIntLE=function(e,t,n,r){if(e=+e,t|=0,!r){var o=Math.pow(2,8*n-1);N(this,e,t,n,o-1,-o)}var i=0,a=1,s=0;for(this[t]=255&e;++i<n&&(a*=256);)e<0&&0===s&&0!==this[t+i-1]&&(s=1),this[t+i]=(e/a>>0)-s&255;return t+n},u.prototype.writeIntBE=function(e,t,n,r){if(e=+e,t|=0,!r){var o=Math.pow(2,8*n-1);N(this,e,t,n,o-1,-o)}var i=n-1,a=1,s=0;for(this[t+i]=255&e;--i>=0&&(a*=256);)e<0&&0===s&&0!==this[t+i+1]&&(s=1),this[t+i]=(e/a>>0)-s&255;return t+n},u.prototype.writeInt8=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,1,127,-128),u.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[t]=255&e,t+1},u.prototype.writeInt16LE=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):O(this,e,t,!0),t+2},u.prototype.writeInt16BE=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):O(this,e,t,!1),t+2},u.prototype.writeInt32LE=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,4,2147483647,-2147483648),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):B(this,e,t,!0),t+4},u.prototype.writeInt32BE=function(e,t,n){return e=+e,t|=0,n||N(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):B(this,e,t,!1),t+4},u.prototype.writeFloatLE=function(e,t,n){return I(this,e,t,!0,n)},u.prototype.writeFloatBE=function(e,t,n){return I(this,e,t,!1,n)},u.prototype.writeDoubleLE=function(e,t,n){return D(this,e,t,!0,n)},u.prototype.writeDoubleBE=function(e,t,n){return D(this,e,t,!1,n)},u.prototype.copy=function(e,t,n,r){if(n||(n=0),r||0===r||(r=this.length),t>=e.length&&(t=e.length),t||(t=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),e.length-t<r-n&&(r=e.length-t+n);var o,i=r-n;if(this===e&&n<t&&t<r)for(o=i-1;o>=0;--o)e[o+t]=this[o+n];else if(i<1e3||!u.TYPED_ARRAY_SUPPORT)for(o=0;o<i;++o)e[o+t]=this[o+n];else Uint8Array.prototype.set.call(e,this.subarray(n,n+i),t);return i},u.prototype.fill=function(e,t,n,r){if("string"==typeof e){if("string"==typeof t?(r=t,t=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),1===e.length){var o=e.charCodeAt(0);o<256&&(e=o)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!u.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<n)throw new RangeError("Out of range index");if(n<=t)return this;var i;if(t>>>=0,n=void 0===n?this.length:n>>>0,e||(e=0),"number"==typeof e)for(i=t;i<n;++i)this[i]=e;else{var a=u.isBuffer(e)?e:j(new u(e,r).toString()),s=a.length;for(i=0;i<n-t;++i)this[i+t]=a[i%s]}return this};var M=/[^+\/0-9A-Za-z-_]/g;function L(e){return e<16?"0"+e.toString(16):e.toString(16)}function j(e,t){var n;t=t||1/0;for(var r=e.length,o=null,i=[],a=0;a<r;++a){if((n=e.charCodeAt(a))>55295&&n<57344){if(!o){if(n>56319){(t-=3)>-1&&i.push(239,191,189);continue}if(a+1===r){(t-=3)>-1&&i.push(239,191,189);continue}o=n;continue}if(n<56320){(t-=3)>-1&&i.push(239,191,189),o=n;continue}n=65536+(o-55296<<10|n-56320)}else o&&(t-=3)>-1&&i.push(239,191,189);if(o=null,n<128){if((t-=1)<0)break;i.push(n)}else if(n<2048){if((t-=2)<0)break;i.push(n>>6|192,63&n|128)}else if(n<65536){if((t-=3)<0)break;i.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;i.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return i}function z(e){return r.toByteArray(function(e){if((e=function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}(e).replace(M,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function q(e,t,n,r){for(var o=0;o<r&&!(o+n>=t.length||o>=e.length);++o)t[o+n]=e[o];return o}}).call(this,n(0))},function(e,t,n){"use strict";t.byteLength=function(e){var t=l(e),n=t[0],r=t[1];return 3*(n+r)/4-r},t.toByteArray=function(e){for(var t,n=l(e),r=n[0],a=n[1],s=new i(function(e,t,n){return 3*(t+n)/4-n}(0,r,a)),u=0,c=a>0?r-4:r,f=0;f<c;f+=4)t=o[e.charCodeAt(f)]<<18|o[e.charCodeAt(f+1)]<<12|o[e.charCodeAt(f+2)]<<6|o[e.charCodeAt(f+3)],s[u++]=t>>16&255,s[u++]=t>>8&255,s[u++]=255&t;2===a&&(t=o[e.charCodeAt(f)]<<2|o[e.charCodeAt(f+1)]>>4,s[u++]=255&t);1===a&&(t=o[e.charCodeAt(f)]<<10|o[e.charCodeAt(f+1)]<<4|o[e.charCodeAt(f+2)]>>2,s[u++]=t>>8&255,s[u++]=255&t);return s},t.fromByteArray=function(e){for(var t,n=e.length,o=n%3,i=[],a=0,s=n-o;a<s;a+=16383)i.push(f(e,a,a+16383>s?s:a+16383));1===o?(t=e[n-1],i.push(r[t>>2]+r[t<<4&63]+"==")):2===o&&(t=(e[n-2]<<8)+e[n-1],i.push(r[t>>10]+r[t>>4&63]+r[t<<2&63]+"="));return i.join("")};for(var r=[],o=[],i="undefined"!=typeof Uint8Array?Uint8Array:Array,a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",s=0,u=a.length;s<u;++s)r[s]=a[s],o[a.charCodeAt(s)]=s;function l(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=e.indexOf("=");return-1===n&&(n=t),[n,n===t?0:4-n%4]}function c(e){return r[e>>18&63]+r[e>>12&63]+r[e>>6&63]+r[63&e]}function f(e,t,n){for(var r,o=[],i=t;i<n;i+=3)r=(e[i]<<16&16711680)+(e[i+1]<<8&65280)+(255&e[i+2]),o.push(c(r));return o.join("")}o["-".charCodeAt(0)]=62,o["_".charCodeAt(0)]=63},function(e,t,n){"use strict";t.read=function(e,t,n,r,o){var i,a,s=8*o-r-1,u=(1<<s)-1,l=u>>1,c=-7,f=n?o-1:0,p=n?-1:1,d=e[t+f];for(f+=p,i=d&(1<<-c)-1,d>>=-c,c+=s;c>0;i=256*i+e[t+f],f+=p,c-=8);for(a=i&(1<<-c)-1,i>>=-c,c+=r;c>0;a=256*a+e[t+f],f+=p,c-=8);if(0===i)i=1-l;else{if(i===u)return a?NaN:1/0*(d?-1:1);a+=Math.pow(2,r),i-=l}return(d?-1:1)*a*Math.pow(2,i-r)},t.write=function(e,t,n,r,o,i){var a,s,u,l=8*i-o-1,c=(1<<l)-1,f=c>>1,p=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,d=r?0:i-1,h=r?1:-1,y=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(s=isNaN(t)?1:0,a=c):(a=Math.floor(Math.log(t)/Math.LN2),t*(u=Math.pow(2,-a))<1&&(a--,u*=2),(t+=a+f>=1?p/u:p*Math.pow(2,1-f))*u>=2&&(a++,u/=2),a+f>=c?(s=0,a=c):a+f>=1?(s=(t*u-1)*Math.pow(2,o),a+=f):(s=t*Math.pow(2,f-1)*Math.pow(2,o),a=0));o>=8;e[n+d]=255&s,d+=h,s/=256,o-=8);for(a=a<<o|s,l+=o;l>0;e[n+d]=255&a,d+=h,a/=256,l-=8);e[n+d-h]|=128*y}},function(e,t,n){"use strict";var r={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==r.call(e)}},function(e,t,n){"use strict";var r={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==r.call(e)}},function(e,t,n){"use strict";e.exports=function(e,t,n){var r=e.byteLength;if(t=t||0,n=n||r,e.slice)return e.slice(t,n);if(t<0&&(t+=r),n<0&&(n+=r),n>r&&(n=r),t>=r||t>=n||0===r)return new ArrayBuffer(0);for(var o=new Uint8Array(e),i=new Uint8Array(n-t),a=t,s=0;a<n;a++,s++)i[s]=o[a];return i.buffer}},function(e,t,n){"use strict";function r(){}e.exports=function(e,t,n){var o=!1;return n=n||r,i.count=e,0===e?t():i;function i(e,r){if(i.count<=0)throw new Error("after called too many times");--i.count,e?(o=!0,t(e),t=n):0!==i.count||o||t(null,r)}}},function(e,t,n){"use strict";(function(e,r){var o,i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};!function(a){var s="object"==i(t)&&t,u="object"==i(e)&&e&&e.exports==s&&e,l="object"==(void 0===r?"undefined":i(r))&&r;l.global!==l&&l.window!==l||(a=l);var c,f,p,d=String.fromCharCode;function h(e){for(var t,n,r=[],o=0,i=e.length;o<i;)(t=e.charCodeAt(o++))>=55296&&t<=56319&&o<i?56320==(64512&(n=e.charCodeAt(o++)))?r.push(((1023&t)<<10)+(1023&n)+65536):(r.push(t),o--):r.push(t);return r}function y(e,t){if(e>=55296&&e<=57343){if(t)throw Error("Lone surrogate U+"+e.toString(16).toUpperCase()+" is not a scalar value");return!1}return!0}function m(e,t){return d(e>>t&63|128)}function g(e,t){if(0==(4294967168&e))return d(e);var n="";return 0==(4294965248&e)?n=d(e>>6&31|192):0==(4294901760&e)?(y(e,t)||(e=65533),n=d(e>>12&15|224),n+=m(e,6)):0==(4292870144&e)&&(n=d(e>>18&7|240),n+=m(e,12),n+=m(e,6)),n+=d(63&e|128)}function v(){if(p>=f)throw Error("Invalid byte index");var e=255&c[p];if(p++,128==(192&e))return 63&e;throw Error("Invalid continuation byte")}function b(e){var t,n;if(p>f)throw Error("Invalid byte index");if(p==f)return!1;if(t=255&c[p],p++,0==(128&t))return t;if(192==(224&t)){if((n=(31&t)<<6|v())>=128)return n;throw Error("Invalid continuation byte")}if(224==(240&t)){if((n=(15&t)<<12|v()<<6|v())>=2048)return y(n,e)?n:65533;throw Error("Invalid continuation byte")}if(240==(248&t)&&(n=(7&t)<<18|v()<<12|v()<<6|v())>=65536&&n<=1114111)return n;throw Error("Invalid UTF-8 detected")}var w={version:"2.1.2",encode:function(e,t){for(var n=!1!==(t=t||{}).strict,r=h(e),o=r.length,i=-1,a="";++i<o;)a+=g(r[i],n);return a},decode:function(e,t){var n=!1!==(t=t||{}).strict;c=h(e),f=c.length,p=0;for(var r,o=[];!1!==(r=b(n));)o.push(r);return function(e){for(var t,n=e.length,r=-1,o="";++r<n;)(t=e[r])>65535&&(o+=d((t-=65536)>>>10&1023|55296),t=56320|1023&t),o+=d(t);return o}(o)}};if("object"==i(n(24))&&n(24))void 0===(o=function(){return w}.call(t,n,t,e))||(e.exports=o);else if(s&&!s.nodeType)if(u)u.exports=w;else{var C={}.hasOwnProperty;for(var k in w)C.call(w,k)&&(s[k]=w[k])}else a.utf8=w}(void 0)}).call(this,n(60)(e),n(0))},function(e,t,n){"use strict";e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){"use strict";!function(){for(var e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",n=new Uint8Array(256),r=0;r<e.length;r++)n[e.charCodeAt(r)]=r;t.encode=function(t){var n,r=new Uint8Array(t),o=r.length,i="";for(n=0;n<o;n+=3)i+=e[r[n]>>2],i+=e[(3&r[n])<<4|r[n+1]>>4],i+=e[(15&r[n+1])<<2|r[n+2]>>6],i+=e[63&r[n+2]];return o%3==2?i=i.substring(0,i.length-1)+"=":o%3==1&&(i=i.substring(0,i.length-2)+"=="),i},t.decode=function(e){var t,r,o,i,a,s=.75*e.length,u=e.length,l=0;"="===e[e.length-1]&&(s--,"="===e[e.length-2]&&s--);var c=new ArrayBuffer(s),f=new Uint8Array(c);for(t=0;t<u;t+=4)r=n[e.charCodeAt(t)],o=n[e.charCodeAt(t+1)],i=n[e.charCodeAt(t+2)],a=n[e.charCodeAt(t+3)],f[l++]=r<<2|o>>4,f[l++]=(15&o)<<4|i>>2,f[l++]=(3&i)<<6|63&a;return c}}()},function(e,t,n){"use strict";(function(t){var n=t.BlobBuilder||t.WebKitBlobBuilder||t.MSBlobBuilder||t.MozBlobBuilder,r=function(){try{return 2===new Blob(["hi"]).size}catch(e){return!1}}(),o=r&&function(){try{return 2===new Blob([new Uint8Array([1,2])]).size}catch(e){return!1}}(),i=n&&n.prototype.append&&n.prototype.getBlob;function a(e){for(var t=0;t<e.length;t++){var n=e[t];if(n.buffer instanceof ArrayBuffer){var r=n.buffer;if(n.byteLength!==r.byteLength){var o=new Uint8Array(n.byteLength);o.set(new Uint8Array(r,n.byteOffset,n.byteLength)),r=o.buffer}e[t]=r}}}function s(e,t){t=t||{};var r=new n;a(e);for(var o=0;o<e.length;o++)r.append(e[o]);return t.type?r.getBlob(t.type):r.getBlob()}function u(e,t){return a(e),new Blob(e,t||{})}e.exports=r?o?t.Blob:u:i?s:void 0}).call(this,n(0))},function(e,t,n){"use strict";function r(e){var n;function r(){if(r.enabled){var e=r,o=+new Date,i=o-(n||o);e.diff=i,e.prev=n,e.curr=o,n=o;for(var a=new Array(arguments.length),s=0;s<a.length;s++)a[s]=arguments[s];a[0]=t.coerce(a[0]),"string"!=typeof a[0]&&a.unshift("%O");var u=0;a[0]=a[0].replace(/%([a-zA-Z%])/g,function(n,r){if("%%"===n)return n;u++;var o=t.formatters[r];if("function"==typeof o){var i=a[u];n=o.call(e,i),a.splice(u,1),u--}return n}),t.formatArgs.call(e,a),(r.log||t.log||console.log.bind(console)).apply(e,a)}}return r.namespace=e,r.enabled=t.enabled(e),r.useColors=t.useColors(),r.color=function(e){var n,r=0;for(n in e)r=(r<<5)-r+e.charCodeAt(n),r|=0;return t.colors[Math.abs(r)%t.colors.length]}(e),r.destroy=o,"function"==typeof t.init&&t.init(r),t.instances.push(r),r}function o(){var e=t.instances.indexOf(this);return-1!==e&&(t.instances.splice(e,1),!0)}(t=e.exports=r.debug=r.default=r).coerce=function(e){return e instanceof Error?e.stack||e.message:e},t.disable=function(){t.enable("")},t.enable=function(e){var n;t.save(e),t.names=[],t.skips=[];var r=("string"==typeof e?e:"").split(/[\s,]+/),o=r.length;for(n=0;n<o;n++)r[n]&&("-"===(e=r[n].replace(/\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.substr(1)+"$")):t.names.push(new RegExp("^"+e+"$")));for(n=0;n<t.instances.length;n++){var i=t.instances[n];i.enabled=t.enabled(i.namespace)}},t.enabled=function(e){if("*"===e[e.length-1])return!0;var n,r;for(n=0,r=t.skips.length;n<r;n++)if(t.skips[n].test(e))return!1;for(n=0,r=t.names.length;n<r;n++)if(t.names[n].test(e))return!0;return!1},t.humanize=n(8),t.instances=[],t.names=[],t.skips=[],t.formatters={}},function(e,t,n){"use strict";(function(t){var r=n(22),o=n(5);e.exports=l;var i,a=/\n/g,s=/\\n/g;function u(){}function l(e){r.call(this,e),this.query=this.query||{},i||(t.___eio||(t.___eio=[]),i=t.___eio),this.index=i.length;var n=this;i.push(function(e){n.onData(e)}),this.query.j=this.index,t.document&&t.addEventListener&&t.addEventListener("beforeunload",function(){n.script&&(n.script.onerror=u)},!1)}o(l,r),l.prototype.supportsBinary=!1,l.prototype.doClose=function(){this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),this.form&&(this.form.parentNode.removeChild(this.form),this.form=null,this.iframe=null),r.prototype.doClose.call(this)},l.prototype.doPoll=function(){var e=this,t=document.createElement("script");this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),t.async=!0,t.src=this.uri(),t.onerror=function(t){e.onError("jsonp poll error",t)};var n=document.getElementsByTagName("script")[0];n?n.parentNode.insertBefore(t,n):(document.head||document.body).appendChild(t),this.script=t,"undefined"!=typeof navigator&&/gecko/i.test(navigator.userAgent)&&setTimeout(function(){var e=document.createElement("iframe");document.body.appendChild(e),document.body.removeChild(e)},100)},l.prototype.doWrite=function(e,t){var n=this;if(!this.form){var r,o=document.createElement("form"),i=document.createElement("textarea"),u=this.iframeId="eio_iframe_"+this.index;o.className="socketio",o.style.position="absolute",o.style.top="-1000px",o.style.left="-1000px",o.target=u,o.method="POST",o.setAttribute("accept-charset","utf-8"),i.name="d",o.appendChild(i),document.body.appendChild(o),this.form=o,this.area=i}function l(){c(),t()}function c(){if(n.iframe)try{n.form.removeChild(n.iframe)}catch(e){n.onError("jsonp polling iframe removal error",e)}try{var e='<iframe src="javascript:0" name="'+n.iframeId+'">';r=document.createElement(e)}catch(e){(r=document.createElement("iframe")).name=n.iframeId,r.src="javascript:0"}r.id=n.iframeId,n.form.appendChild(r),n.iframe=r}this.form.action=this.uri(),c(),e=e.replace(s,"\\\n"),this.area.value=e.replace(a,"\\n");try{this.form.submit()}catch(e){}this.iframe.attachEvent?this.iframe.onreadystatechange=function(){"complete"===n.iframe.readyState&&l()}:this.iframe.onload=l}}).call(this,n(0))},function(e,t,n){"use strict";(function(t){var r,o=n(11),i=n(2),a=n(4),s=n(5),u=n(25),l=n(6)("engine.io-client:websocket"),c=t.WebSocket||t.MozWebSocket;if("undefined"==typeof window)try{r=n(66)}catch(e){}var f=c;function p(e){e&&e.forceBase64&&(this.supportsBinary=!1),this.perMessageDeflate=e.perMessageDeflate,this.usingBrowserWebSocket=c&&!e.forceNode,this.protocols=e.protocols,this.usingBrowserWebSocket||(f=r),o.call(this,e)}f||"undefined"!=typeof window||(f=r),e.exports=p,s(p,o),p.prototype.name="websocket",p.prototype.supportsBinary=!0,p.prototype.doOpen=function(){if(this.check()){var e=this.uri(),t=this.protocols,n={agent:this.agent,perMessageDeflate:this.perMessageDeflate};n.pfx=this.pfx,n.key=this.key,n.passphrase=this.passphrase,n.cert=this.cert,n.ca=this.ca,n.ciphers=this.ciphers,n.rejectUnauthorized=this.rejectUnauthorized,this.extraHeaders&&(n.headers=this.extraHeaders),this.localAddress&&(n.localAddress=this.localAddress);try{this.ws=this.usingBrowserWebSocket?t?new f(e,t):new f(e):new f(e,t,n)}catch(e){return this.emit("error",e)}void 0===this.ws.binaryType&&(this.supportsBinary=!1),this.ws.supports&&this.ws.supports.binary?(this.supportsBinary=!0,this.ws.binaryType="nodebuffer"):this.ws.binaryType="arraybuffer",this.addEventListeners()}},p.prototype.addEventListeners=function(){var e=this;this.ws.onopen=function(){e.onOpen()},this.ws.onclose=function(){e.onClose()},this.ws.onmessage=function(t){e.onData(t.data)},this.ws.onerror=function(t){e.onError("websocket error",t)}},p.prototype.write=function(e){var n=this;this.writable=!1;for(var r=e.length,o=0,a=r;o<a;o++)!function(e){i.encodePacket(e,n.supportsBinary,function(o){if(!n.usingBrowserWebSocket){var i={};if(e.options&&(i.compress=e.options.compress),n.perMessageDeflate)("string"==typeof o?t.Buffer.byteLength(o):o.length)<n.perMessageDeflate.threshold&&(i.compress=!1)}try{n.usingBrowserWebSocket?n.ws.send(o):n.ws.send(o,i)}catch(e){l("websocket closed before onclose event")}--r||s()})}(e[o]);function s(){n.emit("flush"),setTimeout(function(){n.writable=!0,n.emit("drain")},0)}},p.prototype.onClose=function(){o.prototype.onClose.call(this)},p.prototype.doClose=function(){void 0!==this.ws&&this.ws.close()},p.prototype.uri=function(){var e=this.query||{},t=this.secure?"wss":"ws",n="";return this.port&&("wss"===t&&443!==Number(this.port)||"ws"===t&&80!==Number(this.port))&&(n=":"+this.port),this.timestampRequests&&(e[this.timestampParam]=u()),this.supportsBinary||(e.b64=1),(e=a.encode(e)).length&&(e="?"+e),t+"://"+(-1!==this.hostname.indexOf(":")?"["+this.hostname+"]":this.hostname)+n+this.path+e},p.prototype.check=function(){return!(!f||"__initialize"in f&&this.name===p.prototype.name)}}).call(this,n(0))},function(e,t){},function(e,t,n){"use strict";e.exports=function(e,t){for(var n=[],r=(t=t||0)||0;r<e.length;r++)n[r-t]=e[r];return n}},function(e,t,n){"use strict";function r(e){e=e||{},this.ms=e.min||100,this.max=e.max||1e4,this.factor=e.factor||2,this.jitter=e.jitter>0&&e.jitter<=1?e.jitter:0,this.attempts=0}e.exports=r,r.prototype.duration=function(){var e=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var t=Math.random(),n=Math.floor(t*this.jitter*e);e=0==(1&Math.floor(10*t))?e-n:e+n}return 0|Math.min(e,this.max)},r.prototype.reset=function(){this.attempts=0},r.prototype.setMin=function(e){this.ms=e},r.prototype.setMax=function(e){this.max=e},r.prototype.setJitter=function(e){this.jitter=e}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50LWVtaXR0ZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1wYXJzZXIvbGliL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1jbGllbnQvbm9kZV9tb2R1bGVzL2RlYnVnL3NyYy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wYXJzZXFzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb21wb25lbnQtaW5oZXJpdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9ub2RlX21vZHVsZXMvZGVidWcvc3JjL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1wYXJzZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL3htbGh0dHByZXF1ZXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi90cmFuc3BvcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmplY3QtYXNzaWduL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9pbnZhcmlhbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2VtcHR5T2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9lbXB0eUZ1bmN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wYXJzZXVyaS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLXBhcnNlci9ub2RlX21vZHVsZXMvaXNhcnJheS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLXBhcnNlci9pcy1idWZmZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1jbGllbnQvbGliL21hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL3RyYW5zcG9ydHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL3RyYW5zcG9ydHMvcG9sbGluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGFzLWJpbmFyeTIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2FtZC1vcHRpb25zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy95ZWFzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW5kZXhvZi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9saWIvc29ja2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L2xpYi9vbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50LWJpbmQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9nZXRBY3RpdmVFbGVtZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9zaGFsbG93RXF1YWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2NvbnRhaW5zTm9kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvaXNUZXh0Tm9kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvaXNOb2RlLmpzIiwid2VicGFjazovLy8uL3NyYy9zdHlsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1jbGllbnQvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L2xpYi91cmwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1jbGllbnQvbm9kZV9tb2R1bGVzL2RlYnVnL3NyYy9kZWJ1Zy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLXBhcnNlci9ub2RlX21vZHVsZXMvZGVidWcvc3JjL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1wYXJzZXIvbm9kZV9tb2R1bGVzL2RlYnVnL3NyYy9kZWJ1Zy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLXBhcnNlci9iaW5hcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi9zb2NrZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hhcy1jb3JzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi90cmFuc3BvcnRzL3BvbGxpbmcteGhyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tcGFyc2VyL2xpYi9rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9idWZmZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jhc2U2NC1qcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaWVlZTc1NC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXNhcnJheS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGFzLWJpbmFyeTIvbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FycmF5YnVmZmVyLnNsaWNlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hZnRlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLXBhcnNlci9saWIvdXRmOC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYXNlNjQtYXJyYXlidWZmZXIvbGliL2Jhc2U2NC1hcnJheWJ1ZmZlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmxvYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9ub2RlX21vZHVsZXMvZGVidWcvc3JjL2RlYnVnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi90cmFuc3BvcnRzL3BvbGxpbmctanNvbnAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL3RyYW5zcG9ydHMvd2Vic29ja2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90by1hcnJheS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFja28yL2luZGV4LmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiZyIsInRoaXMiLCJGdW5jdGlvbiIsImV2YWwiLCJlIiwid2luZG93IiwiX3R5cGVvZiIsIkVtaXR0ZXIiLCJvYmoiLCJtaXhpbiIsIm9uIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50IiwiZm4iLCJfY2FsbGJhY2tzIiwicHVzaCIsIm9uY2UiLCJvZmYiLCJhcHBseSIsImFyZ3VtZW50cyIsInJlbW92ZUxpc3RlbmVyIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImxlbmd0aCIsImNiIiwiY2FsbGJhY2tzIiwic3BsaWNlIiwiZW1pdCIsImFyZ3MiLCJzbGljZSIsImxlbiIsImxpc3RlbmVycyIsImhhc0xpc3RlbmVycyIsImJhc2U2NGVuY29kZXIiLCJrZXlzIiwiaGFzQmluYXJ5Iiwic2xpY2VCdWZmZXIiLCJhZnRlciIsInV0ZjgiLCJnbG9iYWwiLCJBcnJheUJ1ZmZlciIsImlzQW5kcm9pZCIsIm5hdmlnYXRvciIsInRlc3QiLCJ1c2VyQWdlbnQiLCJpc1BoYW50b21KUyIsImRvbnRTZW5kQmxvYnMiLCJwcm90b2NvbCIsInBhY2tldHMiLCJvcGVuIiwiY2xvc2UiLCJwaW5nIiwicG9uZyIsIm1lc3NhZ2UiLCJ1cGdyYWRlIiwibm9vcCIsInBhY2tldHNsaXN0IiwiZXJyIiwidHlwZSIsImRhdGEiLCJCbG9iIiwibWFwIiwiYXJ5IiwiZWFjaCIsImRvbmUiLCJyZXN1bHQiLCJBcnJheSIsIm5leHQiLCJlYWNoV2l0aEluZGV4IiwiZWwiLCJlcnJvciIsIm1zZyIsImVuY29kZVBhY2tldCIsInBhY2tldCIsInN1cHBvcnRzQmluYXJ5IiwidXRmOGVuY29kZSIsImNhbGxiYWNrIiwidW5kZWZpbmVkIiwiYnVmZmVyIiwiZW5jb2RlQmFzZTY0UGFja2V0IiwiY29udGVudEFycmF5IiwiVWludDhBcnJheSIsInJlc3VsdEJ1ZmZlciIsImJ5dGVMZW5ndGgiLCJlbmNvZGVBcnJheUJ1ZmZlciIsImZyIiwiRmlsZVJlYWRlciIsIm9ubG9hZCIsInJlYWRBc0FycmF5QnVmZmVyIiwiZW5jb2RlQmxvYkFzQXJyYXlCdWZmZXIiLCJibG9iIiwiZW5jb2RlQmxvYiIsImJhc2U2NCIsImVuY29kZUJhc2U2NE9iamVjdCIsImVuY29kZWQiLCJlbmNvZGUiLCJTdHJpbmciLCJzdHJpY3QiLCJiNjRkYXRhIiwiYjY0Iiwic3BsaXQiLCJyZWFkQXNEYXRhVVJMIiwiZnJvbUNoYXJDb2RlIiwidHlwZWQiLCJiYXNpYyIsImJ0b2EiLCJkZWNvZGVQYWNrZXQiLCJiaW5hcnlUeXBlIiwidXRmOGRlY29kZSIsImNoYXJBdCIsImRlY29kZUJhc2U2NFBhY2tldCIsInN1YnN0ciIsImRlY29kZSIsInRyeURlY29kZSIsIk51bWJlciIsInN1YnN0cmluZyIsInJlc3QiLCJlbmNvZGVQYXlsb2FkIiwiaXNCaW5hcnkiLCJlbmNvZGVQYXlsb2FkQXNCbG9iIiwiZW5jb2RlUGF5bG9hZEFzQXJyYXlCdWZmZXIiLCJkb25lQ2FsbGJhY2siLCJzZXRMZW5ndGhIZWFkZXIiLCJyZXN1bHRzIiwiam9pbiIsImRlY29kZVBheWxvYWQiLCJkZWNvZGVQYXlsb2FkQXNCaW5hcnkiLCJjaHIiLCJlbmNvZGVkUGFja2V0cyIsInRvdGFsTGVuZ3RoIiwicmVkdWNlIiwiYWNjIiwidG9TdHJpbmciLCJyZXN1bHRBcnJheSIsImJ1ZmZlckluZGV4IiwiZm9yRWFjaCIsImlzU3RyaW5nIiwiYWIiLCJ2aWV3IiwiY2hhckNvZGVBdCIsImxlblN0ciIsInBhcnNlSW50IiwiYmluYXJ5SWRlbnRpZmllciIsInNpemUiLCJsZW5ndGhBcnkiLCJidWZmZXJUYWlsIiwiYnVmZmVycyIsInRhaWxBcnJheSIsIm1zZ0xlbmd0aCIsInRvdGFsIiwibG9hZCIsInN0b3JhZ2UiLCJkZWJ1ZyIsInByb2Nlc3MiLCJlbnYiLCJERUJVRyIsImxvZyIsImNvbnNvbGUiLCJmb3JtYXRBcmdzIiwidXNlQ29sb3JzIiwibmFtZXNwYWNlIiwiaHVtYW5pemUiLCJkaWZmIiwiY29sb3IiLCJpbmRleCIsImxhc3RDIiwicmVwbGFjZSIsIm1hdGNoIiwic2F2ZSIsIm5hbWVzcGFjZXMiLCJyZW1vdmVJdGVtIiwidG9Mb3dlckNhc2UiLCJkb2N1bWVudCIsImRvY3VtZW50RWxlbWVudCIsInN0eWxlIiwiV2Via2l0QXBwZWFyYW5jZSIsImZpcmVidWciLCJleGNlcHRpb24iLCJ0YWJsZSIsIlJlZ0V4cCIsIiQxIiwiY2hyb21lIiwibG9jYWwiLCJsb2NhbFN0b3JhZ2UiLCJsb2NhbHN0b3JhZ2UiLCJjb2xvcnMiLCJmb3JtYXR0ZXJzIiwiaiIsInYiLCJKU09OIiwic3RyaW5naWZ5IiwiZW5hYmxlIiwic3RyIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwicXMiLCJxcnkiLCJwYWlycyIsInBhaXIiLCJkZWNvZGVVUklDb21wb25lbnQiLCJhIiwiYiIsImNvbnN0cnVjdG9yIiwiY2FjaGVkU2V0VGltZW91dCIsImNhY2hlZENsZWFyVGltZW91dCIsImRlZmF1bHRTZXRUaW1vdXQiLCJFcnJvciIsImRlZmF1bHRDbGVhclRpbWVvdXQiLCJydW5UaW1lb3V0IiwiZnVuIiwic2V0VGltZW91dCIsImNsZWFyVGltZW91dCIsImN1cnJlbnRRdWV1ZSIsInF1ZXVlIiwiZHJhaW5pbmciLCJxdWV1ZUluZGV4IiwiY2xlYW5VcE5leHRUaWNrIiwiY29uY2F0IiwiZHJhaW5RdWV1ZSIsInRpbWVvdXQiLCJydW4iLCJtYXJrZXIiLCJydW5DbGVhclRpbWVvdXQiLCJJdGVtIiwiYXJyYXkiLCJuZXh0VGljayIsInRpdGxlIiwiYnJvd3NlciIsImFyZ3YiLCJ2ZXJzaW9uIiwidmVyc2lvbnMiLCJhZGRMaXN0ZW5lciIsInByZXBlbmRMaXN0ZW5lciIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJiaW5kaW5nIiwiY3dkIiwiY2hkaXIiLCJkaXIiLCJ1bWFzayIsImgiLCJ5IiwicGx1cmFsIiwibXMiLCJNYXRoIiwiZmxvb3IiLCJjZWlsIiwidmFsIiwib3B0aW9ucyIsImV4ZWMiLCJwYXJzZUZsb2F0IiwicGFyc2UiLCJpc05hTiIsImxvbmciLCJmbXRMb25nIiwicm91bmQiLCJmbXRTaG9ydCIsImJpbmFyeSIsImlzQXJyYXkiLCJpc0J1ZiIsIkVuY29kZXIiLCJ0eXBlcyIsIkNPTk5FQ1QiLCJESVNDT05ORUNUIiwiRVZFTlQiLCJBQ0siLCJFUlJPUiIsIkJJTkFSWV9FVkVOVCIsIkJJTkFSWV9BQ0siLCJEZWNvZGVyIiwiRVJST1JfUEFDS0VUIiwiZW5jb2RlQXNTdHJpbmciLCJhdHRhY2htZW50cyIsIm5zcCIsImlkIiwicGF5bG9hZCIsInRyeVN0cmluZ2lmeSIsInJlY29uc3RydWN0b3IiLCJCaW5hcnlSZWNvbnN0cnVjdG9yIiwicmVjb25QYWNrIiwicmVtb3ZlQmxvYnMiLCJibG9ibGVzc0RhdGEiLCJkZWNvbnN0cnVjdGlvbiIsImRlY29uc3RydWN0UGFja2V0IiwicGFjayIsInVuc2hpZnQiLCJlbmNvZGVBc0JpbmFyeSIsImFkZCIsImJ1ZiIsInRyeVBhcnNlIiwiaXNQYXlsb2FkVmFsaWQiLCJkZWNvZGVTdHJpbmciLCJ0YWtlQmluYXJ5RGF0YSIsImRlc3Ryb3kiLCJmaW5pc2hlZFJlY29uc3RydWN0aW9uIiwiYmluRGF0YSIsInJlY29uc3RydWN0UGFja2V0IiwiaGFzQ09SUyIsIm9wdHMiLCJ4ZG9tYWluIiwieHNjaGVtZSIsImVuYWJsZXNYRFIiLCJYTUxIdHRwUmVxdWVzdCIsIlhEb21haW5SZXF1ZXN0IiwicGFyc2VyIiwiVHJhbnNwb3J0IiwicGF0aCIsImhvc3RuYW1lIiwicG9ydCIsInNlY3VyZSIsInF1ZXJ5IiwidGltZXN0YW1wUGFyYW0iLCJ0aW1lc3RhbXBSZXF1ZXN0cyIsInJlYWR5U3RhdGUiLCJhZ2VudCIsInNvY2tldCIsInBmeCIsInBhc3NwaHJhc2UiLCJjZXJ0IiwiY2EiLCJjaXBoZXJzIiwicmVqZWN0VW5hdXRob3JpemVkIiwiZm9yY2VOb2RlIiwiZXh0cmFIZWFkZXJzIiwibG9jYWxBZGRyZXNzIiwib25FcnJvciIsImRlc2MiLCJkZXNjcmlwdGlvbiIsImRvT3BlbiIsImRvQ2xvc2UiLCJvbkNsb3NlIiwic2VuZCIsIndyaXRlIiwib25PcGVuIiwid3JpdGFibGUiLCJvbkRhdGEiLCJvblBhY2tldCIsImdldE93blByb3BlcnR5U3ltYm9scyIsInByb3BJc0VudW1lcmFibGUiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsImFzc2lnbiIsInRlc3QxIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsInRlc3QyIiwidGVzdDMiLCJsZXR0ZXIiLCJzaG91bGRVc2VOYXRpdmUiLCJ0YXJnZXQiLCJzb3VyY2UiLCJmcm9tIiwic3ltYm9scyIsInRvIiwiVHlwZUVycm9yIiwidG9PYmplY3QiLCJ2YWxpZGF0ZUZvcm1hdCIsImZvcm1hdCIsImNvbmRpdGlvbiIsImYiLCJhcmdJbmRleCIsImZyYW1lc1RvUG9wIiwibWFrZUVtcHR5RnVuY3Rpb24iLCJhcmciLCJlbXB0eUZ1bmN0aW9uIiwidGhhdFJldHVybnMiLCJ0aGF0UmV0dXJuc0ZhbHNlIiwidGhhdFJldHVybnNUcnVlIiwidGhhdFJldHVybnNOdWxsIiwidGhhdFJldHVybnNUaGlzIiwidGhhdFJldHVybnNBcmd1bWVudCIsInJlIiwicGFydHMiLCJzcmMiLCJpbmRleE9mIiwidXJpIiwiaG9zdCIsImF1dGhvcml0eSIsImlwdjZ1cmkiLCJhcnIiLCJ3aXRoTmF0aXZlQnVmZmVyIiwiQnVmZmVyIiwiaXNCdWZmZXIiLCJ3aXRoTmF0aXZlQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJlaW8iLCJTb2NrZXQiLCJCYWNrb2ZmIiwiaGFzIiwiTWFuYWdlciIsIm5zcHMiLCJzdWJzIiwicmVjb25uZWN0aW9uIiwicmVjb25uZWN0aW9uQXR0ZW1wdHMiLCJJbmZpbml0eSIsInJlY29ubmVjdGlvbkRlbGF5IiwicmVjb25uZWN0aW9uRGVsYXlNYXgiLCJyYW5kb21pemF0aW9uRmFjdG9yIiwiYmFja29mZiIsIm1pbiIsIm1heCIsImppdHRlciIsImNvbm5lY3RpbmciLCJsYXN0UGluZyIsImVuY29kaW5nIiwicGFja2V0QnVmZmVyIiwiX3BhcnNlciIsImVuY29kZXIiLCJkZWNvZGVyIiwiYXV0b0Nvbm5lY3QiLCJlbWl0QWxsIiwidXBkYXRlU29ja2V0SWRzIiwiZ2VuZXJhdGVJZCIsImVuZ2luZSIsIl9yZWNvbm5lY3Rpb24iLCJfcmVjb25uZWN0aW9uQXR0ZW1wdHMiLCJfcmVjb25uZWN0aW9uRGVsYXkiLCJzZXRNaW4iLCJfcmFuZG9taXphdGlvbkZhY3RvciIsInNldEppdHRlciIsIl9yZWNvbm5lY3Rpb25EZWxheU1heCIsInNldE1heCIsIl90aW1lb3V0IiwibWF5YmVSZWNvbm5lY3RPbk9wZW4iLCJyZWNvbm5lY3RpbmciLCJhdHRlbXB0cyIsInJlY29ubmVjdCIsImNvbm5lY3QiLCJzZWxmIiwic2tpcFJlY29ubmVjdCIsIm9wZW5TdWIiLCJvbm9wZW4iLCJlcnJvclN1YiIsImNsZWFudXAiLCJ0aW1lciIsIm9ucGluZyIsIkRhdGUiLCJvbnBvbmciLCJvbmRhdGEiLCJvbmRlY29kZWQiLCJvbmVycm9yIiwib25Db25uZWN0aW5nIiwicHJvY2Vzc1BhY2tldFF1ZXVlIiwic2hpZnQiLCJzdWJzTGVuZ3RoIiwiZGlzY29ubmVjdCIsInJlc2V0Iiwib25jbG9zZSIsInJlYXNvbiIsImRlbGF5IiwiZHVyYXRpb24iLCJvbnJlY29ubmVjdCIsImF0dGVtcHQiLCJYSFIiLCJKU09OUCIsIndlYnNvY2tldCIsInBvbGxpbmciLCJ4ZCIsInhzIiwianNvbnAiLCJsb2NhdGlvbiIsImlzU1NMIiwiZm9yY2VKU09OUCIsInBhcnNlcXMiLCJpbmhlcml0IiwieWVhc3QiLCJQb2xsaW5nIiwiaGFzWEhSMiIsInJlc3BvbnNlVHlwZSIsImZvcmNlQmFzZTY0IiwicG9sbCIsInBhdXNlIiwib25QYXVzZSIsImRvUG9sbCIsImNhbGxiYWNrZm4iLCJkb1dyaXRlIiwic2NoZW1hIiwic2lkIiwid2l0aE5hdGl2ZUJsb2IiLCJ3aXRoTmF0aXZlRmlsZSIsIkZpbGUiLCJ0b0pTT04iLCJfX3dlYnBhY2tfYW1kX29wdGlvbnNfXyIsInByZXYiLCJhbHBoYWJldCIsInNlZWQiLCJudW0iLCJub3ciLCJkZWNvZGVkIiwidG9BcnJheSIsImhhc0JpbiIsImV2ZW50cyIsImNvbm5lY3RfZXJyb3IiLCJjb25uZWN0X3RpbWVvdXQiLCJyZWNvbm5lY3RfYXR0ZW1wdCIsInJlY29ubmVjdF9mYWlsZWQiLCJyZWNvbm5lY3RfZXJyb3IiLCJpbyIsImpzb24iLCJpZHMiLCJhY2tzIiwicmVjZWl2ZUJ1ZmZlciIsInNlbmRCdWZmZXIiLCJjb25uZWN0ZWQiLCJkaXNjb25uZWN0ZWQiLCJmbGFncyIsInN1YkV2ZW50cyIsImV2IiwiY29tcHJlc3MiLCJwb3AiLCJvbnBhY2tldCIsInNhbWVOYW1lc3BhY2UiLCJyb290TmFtZXNwYWNlRXJyb3IiLCJvbmNvbm5lY3QiLCJvbmV2ZW50Iiwib25hY2siLCJvbmRpc2Nvbm5lY3QiLCJhY2siLCJzZW50IiwiZW1pdEJ1ZmZlcmVkIiwic29ja2V0aW8iLCJDaGF0Rm9ybSIsInByb3BzIiwiX2NsYXNzQ2FsbENoZWNrIiwiX3RoaXMiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIl9fcHJvdG9fXyIsImdldFByb3RvdHlwZU9mIiwic3RhdGUiLCJtZXNzc2FnZSIsIlJlYWN0IiwiQ29tcG9uZW50Iiwic2V0U3RhdGUiLCJfdGhpczIiLCJfcmVhY3QyIiwiZGVmYXVsdCIsImNyZWF0ZUVsZW1lbnQiLCJvbkNoYW5nZSIsIm5hbWVDaGFuZ2VkIiwibWVzc2FnZUNoYW5nZWQiLCJvbkNsaWNrIiwiQ2hhdEFwcCIsIl90aGlzMyIsImxvZ3MiLCJfdGhpczQiLCJsb2dzMiIsIm1lc3NhZ2VzIiwiY2xlYXIiLCJSZWFjdERPTSIsInJlbmRlciIsImdldEVsZW1lbnRCeUlkIiwiayIsInEiLCJmb3IiLCJ1IiwidyIsIngiLCJ6IiwiQSIsIkIiLCJDIiwiaXRlcmF0b3IiLCJEIiwiRSIsImlzTW91bnRlZCIsImVucXVldWVGb3JjZVVwZGF0ZSIsImVucXVldWVSZXBsYWNlU3RhdGUiLCJlbnF1ZXVlU2V0U3RhdGUiLCJGIiwiY29udGV4dCIsInJlZnMiLCJ1cGRhdGVyIiwiRyIsIkgiLCJpc1JlYWN0Q29tcG9uZW50IiwiZm9yY2VVcGRhdGUiLCJJIiwiaXNQdXJlUmVhY3RDb21wb25lbnQiLCJKIiwiY3VycmVudCIsIksiLCJMIiwicmVmIiwiX19zZWxmIiwiX19zb3VyY2UiLCJNIiwiY2hpbGRyZW4iLCJkZWZhdWx0UHJvcHMiLCIkJHR5cGVvZiIsIl9vd25lciIsIk4iLCJPIiwiUCIsIlEiLCJrZXlQcmVmaXgiLCJmdW5jIiwiY291bnQiLCJSIiwiUyIsIlQiLCI9IiwiOiIsImVzY2FwZSIsIlUiLCJWIiwiVyIsIlgiLCJDaGlsZHJlbiIsIm9ubHkiLCJjcmVhdGVSZWYiLCJQdXJlQ29tcG9uZW50IiwiY3JlYXRlQ29udGV4dCIsIl9jYWxjdWxhdGVDaGFuZ2VkQml0cyIsIl9kZWZhdWx0VmFsdWUiLCJfY3VycmVudFZhbHVlIiwiX2N1cnJlbnRWYWx1ZTIiLCJfY2hhbmdlZEJpdHMiLCJfY2hhbmdlZEJpdHMyIiwiUHJvdmlkZXIiLCJDb25zdW1lciIsIl9jb250ZXh0IiwiZm9yd2FyZFJlZiIsIkZyYWdtZW50IiwiU3RyaWN0TW9kZSIsInVuc3RhYmxlX0FzeW5jTW9kZSIsInVuc3RhYmxlX1Byb2ZpbGVyIiwiY2xvbmVFbGVtZW50IiwiY3JlYXRlRmFjdG9yeSIsImlzVmFsaWRFbGVtZW50IiwiX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQiLCJSZWFjdEN1cnJlbnRPd25lciIsIlkiLCJaIiwiY2hlY2tEQ0UiLCJfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJhYSIsImJhIiwiZGEiLCJlYSIsImZhIiwiaGEiLCJfY2F1Z2h0RXJyb3IiLCJfaGFzQ2F1Z2h0RXJyb3IiLCJfcmV0aHJvd0Vycm9yIiwiX2hhc1JldGhyb3dFcnJvciIsImludm9rZUd1YXJkZWRDYWxsYmFjayIsImludm9rZUd1YXJkZWRDYWxsYmFja0FuZENhdGNoRmlyc3RFcnJvciIsImhhc0NhdWdodEVycm9yIiwiY2xlYXJDYXVnaHRFcnJvciIsInJldGhyb3dDYXVnaHRFcnJvciIsImxhIiwibWEiLCJuYSIsIm9hIiwiZXh0cmFjdEV2ZW50cyIsImV2ZW50VHlwZXMiLCJwYSIsInBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzIiwicWEiLCJyZWdpc3RyYXRpb25OYW1lIiwicmEiLCJzYSIsImRlcGVuZGVuY2llcyIsInRhIiwidWEiLCJ2YSIsInBsdWdpbnMiLCJldmVudE5hbWVEaXNwYXRjaENvbmZpZ3MiLCJyZWdpc3RyYXRpb25OYW1lTW9kdWxlcyIsInJlZ2lzdHJhdGlvbk5hbWVEZXBlbmRlbmNpZXMiLCJwb3NzaWJsZVJlZ2lzdHJhdGlvbk5hbWVzIiwiaW5qZWN0RXZlbnRQbHVnaW5PcmRlciIsImluamVjdEV2ZW50UGx1Z2luc0J5TmFtZSIsIndhIiwieGEiLCJ5YSIsInphIiwiY3VycmVudFRhcmdldCIsIkFhIiwiQmEiLCJDYSIsIkRhIiwiX2Rpc3BhdGNoTGlzdGVuZXJzIiwiX2Rpc3BhdGNoSW5zdGFuY2VzIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJpc1BlcnNpc3RlbnQiLCJyZWxlYXNlIiwiRWEiLCJGYSIsIkdhIiwiSGEiLCJzdGF0ZU5vZGUiLCJkaXNhYmxlZCIsIklhIiwiSmEiLCJLYSIsImluamVjdGlvbiIsImdldExpc3RlbmVyIiwicnVuRXZlbnRzSW5CYXRjaCIsInJ1bkV4dHJhY3RlZEV2ZW50c0luQmF0Y2giLCJMYSIsInJhbmRvbSIsIk1hIiwiTmEiLCJwYXJlbnROb2RlIiwidGFnIiwiT2EiLCJQYSIsIlFhIiwicHJlY2FjaGVGaWJlck5vZGUiLCJnZXRDbG9zZXN0SW5zdGFuY2VGcm9tTm9kZSIsImdldEluc3RhbmNlRnJvbU5vZGUiLCJnZXROb2RlRnJvbUluc3RhbmNlIiwiZ2V0RmliZXJDdXJyZW50UHJvcHNGcm9tTm9kZSIsInVwZGF0ZUZpYmVyUHJvcHMiLCJyZXR1cm4iLCJSYSIsIlNhIiwiZGlzcGF0Y2hDb25maWciLCJUYSIsIl90YXJnZXRJbnN0IiwiVWEiLCJWYSIsIlhhIiwiWWEiLCJaYSIsImFsdGVybmF0ZSIsIiRhIiwiYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlcyIsImFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXNTa2lwVGFyZ2V0IiwiYWNjdW11bGF0ZUVudGVyTGVhdmVEaXNwYXRjaGVzIiwiYWNjdW11bGF0ZURpcmVjdERpc3BhdGNoZXMiLCJiYiIsImFuaW1hdGlvbmVuZCIsImFuaW1hdGlvbml0ZXJhdGlvbiIsImFuaW1hdGlvbnN0YXJ0IiwidHJhbnNpdGlvbmVuZCIsImRiIiwiZWIiLCJjYW5Vc2VET00iLCJhbmltYXRpb24iLCJ0cmFuc2l0aW9uIiwiZmIiLCJnYiIsImhiIiwiaWIiLCJqYiIsImtiIiwibGIiLCJfcm9vdCIsIl9zdGFydFRleHQiLCJfZmFsbGJhY2tUZXh0IiwibWIiLCJuYiIsIm9iIiwicGIiLCJldmVudFBoYXNlIiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJ0aW1lU3RhbXAiLCJkZWZhdWx0UHJldmVudGVkIiwiaXNUcnVzdGVkIiwibmF0aXZlRXZlbnQiLCJJbnRlcmZhY2UiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJyZXR1cm5WYWx1ZSIsInJiIiwiZXZlbnRQb29sIiwic2IiLCJkZXN0cnVjdG9yIiwicWIiLCJnZXRQb29sZWQiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsImNhbmNlbEJ1YmJsZSIsInBlcnNpc3QiLCJleHRlbmQiLCJ0YiIsInViIiwidmIiLCJ3YiIsInhiIiwiZG9jdW1lbnRNb2RlIiwieWIiLCJ6YiIsIkFiIiwiQmIiLCJiZWZvcmVJbnB1dCIsImJ1YmJsZWQiLCJjYXB0dXJlZCIsImNvbXBvc2l0aW9uRW5kIiwiY29tcG9zaXRpb25TdGFydCIsImNvbXBvc2l0aW9uVXBkYXRlIiwiQ2IiLCJEYiIsImtleUNvZGUiLCJFYiIsImRldGFpbCIsIkZiIiwiSWIiLCJ3aGljaCIsIkdiIiwiY3RybEtleSIsImFsdEtleSIsIm1ldGFLZXkiLCJjaGFyIiwiSGIiLCJKYiIsIktiIiwiaW5qZWN0RmliZXJDb250cm9sbGVkSG9zdENvbXBvbmVudCIsIkxiIiwiTWIiLCJOYiIsInJlc3RvcmVDb250cm9sbGVkU3RhdGUiLCJPYiIsIlBiIiwiUWIiLCJSYiIsImVucXVldWVTdGF0ZVJlc3RvcmUiLCJuZWVkc1N0YXRlUmVzdG9yZSIsInJlc3RvcmVTdGF0ZUlmTmVlZGVkIiwiU2IiLCJUYiIsIlViIiwiVmIiLCJXYiIsIlhiIiwiZGF0ZSIsImRhdGV0aW1lIiwiZGF0ZXRpbWUtbG9jYWwiLCJlbWFpbCIsIm1vbnRoIiwibnVtYmVyIiwicGFzc3dvcmQiLCJyYW5nZSIsInNlYXJjaCIsInRlbCIsInRleHQiLCJ0aW1lIiwidXJsIiwid2VlayIsIlliIiwibm9kZU5hbWUiLCJaYiIsInNyY0VsZW1lbnQiLCJjb3JyZXNwb25kaW5nVXNlRWxlbWVudCIsIm5vZGVUeXBlIiwiJGIiLCJzZXRBdHRyaWJ1dGUiLCJhYyIsImNjIiwiX3ZhbHVlVHJhY2tlciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInNldCIsImNvbmZpZ3VyYWJsZSIsImdldFZhbHVlIiwic2V0VmFsdWUiLCJzdG9wVHJhY2tpbmciLCJiYyIsImRjIiwiY2hlY2tlZCIsImVjIiwiZmMiLCJnYyIsImhjIiwiaWMiLCJqYyIsImtjIiwibGMiLCJtYyIsInBjIiwicWMiLCJyYyIsInNjIiwidGMiLCJ1YyIsImRpc3BsYXlOYW1lIiwicGVuZGluZ1Byb3BzIiwidmMiLCJfZGVidWdPd25lciIsIl9kZWJ1Z1NvdXJjZSIsImZpbGVOYW1lIiwibGluZU51bWJlciIsIndjIiwieGMiLCJ6YyIsIkFjIiwiRGMiLCJhY2NlcHRzQm9vbGVhbnMiLCJDYyIsImF0dHJpYnV0ZU5hbWUiLCJhdHRyaWJ1dGVOYW1lc3BhY2UiLCJtdXN0VXNlUHJvcGVydHkiLCJwcm9wZXJ0eU5hbWUiLCJFYyIsIkZjIiwidG9VcHBlckNhc2UiLCJHYyIsIkJjIiwicmVtb3ZlQXR0cmlidXRlIiwic2V0QXR0cmlidXRlTlMiLCJIYyIsImRlZmF1bHRDaGVja2VkIiwiZGVmYXVsdFZhbHVlIiwiX3dyYXBwZXJTdGF0ZSIsImluaXRpYWxDaGVja2VkIiwiSWMiLCJKYyIsImluaXRpYWxWYWx1ZSIsImNvbnRyb2xsZWQiLCJLYyIsIkxjIiwiTWMiLCJOYyIsIm93bmVyRG9jdW1lbnQiLCJhY3RpdmVFbGVtZW50IiwidGFiSW5kZXgiLCJPYyIsImNoYW5nZSIsIlBjIiwiUWMiLCJSYyIsIlNjIiwiVGMiLCJVYyIsIlZjIiwiV2MiLCJkZXRhY2hFdmVudCIsIlhjIiwiWWMiLCJhdHRhY2hFdmVudCIsIlpjIiwiJGMiLCJhZCIsImJkIiwiX2lzSW5wdXRFdmVudFN1cHBvcnRlZCIsImNkIiwiZGQiLCJBbHQiLCJDb250cm9sIiwiTWV0YSIsIlNoaWZ0IiwiZWQiLCJnZXRNb2RpZmllclN0YXRlIiwiZmQiLCJnZCIsInNjcmVlblgiLCJzY3JlZW5ZIiwiY2xpZW50WCIsImNsaWVudFkiLCJwYWdlWCIsInBhZ2VZIiwic2hpZnRLZXkiLCJidXR0b24iLCJidXR0b25zIiwicmVsYXRlZFRhcmdldCIsImZyb21FbGVtZW50IiwidG9FbGVtZW50IiwiaGQiLCJwb2ludGVySWQiLCJ3aWR0aCIsImhlaWdodCIsInByZXNzdXJlIiwidGlsdFgiLCJ0aWx0WSIsInBvaW50ZXJUeXBlIiwiaXNQcmltYXJ5IiwibW91c2VFbnRlciIsIm1vdXNlTGVhdmUiLCJwb2ludGVyRW50ZXIiLCJwb2ludGVyTGVhdmUiLCJqZCIsImRlZmF1bHRWaWV3IiwicGFyZW50V2luZG93Iiwia2QiLCJlZmZlY3RUYWciLCJsZCIsIm1kIiwiY2hpbGQiLCJzaWJsaW5nIiwibmQiLCJwZCIsImFuaW1hdGlvbk5hbWUiLCJlbGFwc2VkVGltZSIsInBzZXVkb0VsZW1lbnQiLCJxZCIsImNsaXBib2FyZERhdGEiLCJyZCIsInNkIiwiY2hhckNvZGUiLCJ0ZCIsIkVzYyIsIlNwYWNlYmFyIiwiTGVmdCIsIlVwIiwiUmlnaHQiLCJEb3duIiwiRGVsIiwiV2luIiwiTWVudSIsIkFwcHMiLCJTY3JvbGwiLCJNb3pQcmludGFibGVLZXkiLCJ1ZCIsIjgiLCI5IiwiMTIiLCIxMyIsIjE2IiwiMTciLCIxOCIsIjE5IiwiMjAiLCIyNyIsIjMyIiwiMzMiLCIzNCIsIjM1IiwiMzYiLCIzNyIsIjM4IiwiMzkiLCI0MCIsIjQ1IiwiNDYiLCIxMTIiLCIxMTMiLCIxMTQiLCIxMTUiLCIxMTYiLCIxMTciLCIxMTgiLCIxMTkiLCIxMjAiLCIxMjEiLCIxMjIiLCIxMjMiLCIxNDQiLCIxNDUiLCIyMjQiLCJ2ZCIsInJlcGVhdCIsImxvY2FsZSIsIndkIiwiZGF0YVRyYW5zZmVyIiwidG91Y2hlcyIsInRhcmdldFRvdWNoZXMiLCJjaGFuZ2VkVG91Y2hlcyIsInlkIiwiemQiLCJkZWx0YVgiLCJ3aGVlbERlbHRhWCIsImRlbHRhWSIsIndoZWVsRGVsdGFZIiwid2hlZWxEZWx0YSIsImRlbHRhWiIsImRlbHRhTW9kZSIsIkFkIiwiQmQiLCJDZCIsIkRkIiwiaXNJbnRlcmFjdGl2ZSIsIkVkIiwiaXNJbnRlcmFjdGl2ZVRvcExldmVsRXZlbnRUeXBlIiwiRmQiLCJHZCIsIkhkIiwidGFyZ2V0SW5zdCIsImFuY2VzdG9ycyIsImNvbnRhaW5lckluZm8iLCJ0b3BMZXZlbFR5cGUiLCJJZCIsIktkIiwiTGQiLCJNZCIsIk5kIiwiT2QiLCJfZW5hYmxlZCIsInNldEVuYWJsZWQiLCJpc0VuYWJsZWQiLCJ0cmFwQnViYmxlZEV2ZW50IiwidHJhcENhcHR1cmVkRXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwiUGQiLCJRZCIsIlJkIiwiU2QiLCJUZCIsImZpcnN0Q2hpbGQiLCJVZCIsInRleHRDb250ZW50Iiwibm9kZSIsIm9mZnNldCIsIm5leHRTaWJsaW5nIiwiVmQiLCJjb250ZW50RWRpdGFibGUiLCJXZCIsIlhkIiwic2VsZWN0IiwiWWQiLCJaZCIsIiRkIiwiYWUiLCJiZSIsInN0YXJ0Iiwic2VsZWN0aW9uU3RhcnQiLCJlbmQiLCJzZWxlY3Rpb25FbmQiLCJnZXRTZWxlY3Rpb24iLCJhbmNob3JOb2RlIiwiYW5jaG9yT2Zmc2V0IiwiZm9jdXNOb2RlIiwiZm9jdXNPZmZzZXQiLCJjZSIsIm9uU2VsZWN0IiwiU2ltcGxlRXZlbnRQbHVnaW4iLCJFbnRlckxlYXZlRXZlbnRQbHVnaW4iLCJDaGFuZ2VFdmVudFBsdWdpbiIsIlNlbGVjdEV2ZW50UGx1Z2luIiwiQmVmb3JlSW5wdXRFdmVudFBsdWdpbiIsImRlIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiZWUiLCJmZSIsImdlIiwiaGUiLCJwZXJmb3JtYW5jZSIsImllIiwiamUiLCJrZSIsImxlIiwibWUiLCJuZSIsIm9lIiwicGUiLCJxZSIsInNlIiwidGUiLCJkaWRUaW1lb3V0IiwidGltZVJlbWFpbmluZyIsInZlIiwic2NoZWR1bGVkQ2FsbGJhY2siLCJwb3N0TWVzc2FnZSIsInVlIiwidGltZW91dFRpbWUiLCJ3ZSIsInhlIiwiTWFwIiwiZGVsZXRlIiwiemUiLCJ5ZSIsIkFlIiwic2VsZWN0ZWQiLCJkZWZhdWx0U2VsZWN0ZWQiLCJCZSIsIndhc011bHRpcGxlIiwibXVsdGlwbGUiLCJDZSIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiRGUiLCJFZSIsIkZlIiwiR2UiLCJodG1sIiwibWF0aG1sIiwic3ZnIiwiSGUiLCJJZSIsIkplIiwiS2UiLCJNU0FwcCIsImV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uIiwibmFtZXNwYWNlVVJJIiwiaW5uZXJIVE1MIiwicmVtb3ZlQ2hpbGQiLCJhcHBlbmRDaGlsZCIsIkxlIiwibGFzdENoaWxkIiwibm9kZVZhbHVlIiwiTWUiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImJvcmRlckltYWdlT3V0c2V0IiwiYm9yZGVySW1hZ2VTbGljZSIsImJvcmRlckltYWdlV2lkdGgiLCJib3hGbGV4IiwiYm94RmxleEdyb3VwIiwiYm94T3JkaW5hbEdyb3VwIiwiY29sdW1uQ291bnQiLCJjb2x1bW5zIiwiZmxleCIsImZsZXhHcm93IiwiZmxleFBvc2l0aXZlIiwiZmxleFNocmluayIsImZsZXhOZWdhdGl2ZSIsImZsZXhPcmRlciIsImdyaWRSb3ciLCJncmlkUm93RW5kIiwiZ3JpZFJvd1NwYW4iLCJncmlkUm93U3RhcnQiLCJncmlkQ29sdW1uIiwiZ3JpZENvbHVtbkVuZCIsImdyaWRDb2x1bW5TcGFuIiwiZ3JpZENvbHVtblN0YXJ0IiwiZm9udFdlaWdodCIsImxpbmVDbGFtcCIsImxpbmVIZWlnaHQiLCJvcGFjaXR5Iiwib3JkZXIiLCJvcnBoYW5zIiwidGFiU2l6ZSIsIndpZG93cyIsInpJbmRleCIsInpvb20iLCJmaWxsT3BhY2l0eSIsImZsb29kT3BhY2l0eSIsInN0b3BPcGFjaXR5Iiwic3Ryb2tlRGFzaGFycmF5Iiwic3Ryb2tlRGFzaG9mZnNldCIsInN0cm9rZU1pdGVybGltaXQiLCJzdHJva2VPcGFjaXR5Iiwic3Ryb2tlV2lkdGgiLCJOZSIsIk9lIiwidHJpbSIsInNldFByb3BlcnR5IiwiUGUiLCJtZW51aXRlbSIsImFyZWEiLCJiYXNlIiwiYnIiLCJjb2wiLCJlbWJlZCIsImhyIiwiaW1nIiwiaW5wdXQiLCJrZXlnZW4iLCJsaW5rIiwibWV0YSIsInBhcmFtIiwidHJhY2siLCJ3YnIiLCJRZSIsIlJlIiwiaXMiLCJTZSIsIlRlIiwiYmx1ciIsImZvY3VzIiwiVWUiLCJjcmVhdGVFbGVtZW50TlMiLCJWZSIsImNyZWF0ZVRleHROb2RlIiwiV2UiLCJfX2h0bWwiLCJvbmNsaWNrIiwiWGUiLCJZZSIsIlplIiwiJGUiLCJhZiIsInNldEluaXRpYWxQcm9wZXJ0aWVzIiwiZGlmZlByb3BlcnRpZXMiLCJ1cGRhdGVQcm9wZXJ0aWVzIiwiZGlmZkh5ZHJhdGVkUHJvcGVydGllcyIsImRpZmZIeWRyYXRlZFRleHQiLCJ3YXJuRm9yVW5tYXRjaGVkVGV4dCIsIndhcm5Gb3JEZWxldGVkSHlkcmF0YWJsZUVsZW1lbnQiLCJ3YXJuRm9yRGVsZXRlZEh5ZHJhdGFibGVUZXh0Iiwid2FybkZvckluc2VydGVkSHlkcmF0ZWRFbGVtZW50Iiwid2FybkZvckluc2VydGVkSHlkcmF0ZWRUZXh0IiwicXVlcnlTZWxlY3RvckFsbCIsImZvcm0iLCJiZiIsImNmIiwiZGYiLCJhdXRvRm9jdXMiLCJlZiIsImZmIiwiZ2YiLCJoZiIsImpmIiwia2YiLCJTZXQiLCJsZiIsIm1mIiwibmYiLCJvZiIsInBmIiwicWYiLCJyZiIsInNmIiwiY29udGV4dFR5cGVzIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dCIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0IiwiY2hpbGRDb250ZXh0VHlwZXMiLCJ0ZiIsInVmIiwidmYiLCJ3ZiIsImdldENoaWxkQ29udGV4dCIsInhmIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQiLCJ5ZiIsInpmIiwibWVtb2l6ZWRTdGF0ZSIsInVwZGF0ZVF1ZXVlIiwibWVtb2l6ZWRQcm9wcyIsImxhc3RFZmZlY3QiLCJmaXJzdEVmZmVjdCIsIm5leHRFZmZlY3QiLCJleHBpcmF0aW9uVGltZSIsIkFmIiwiQmYiLCJDZiIsIkRmIiwiRWYiLCJwZW5kaW5nQ2hpbGRyZW4iLCJpbXBsZW1lbnRhdGlvbiIsIkZmIiwiZWFybGllc3RQZW5kaW5nVGltZSIsImxhdGVzdFBlbmRpbmdUaW1lIiwiZWFybGllc3RTdXNwZW5kZWRUaW1lIiwibGF0ZXN0U3VzcGVuZGVkVGltZSIsImxhdGVzdFBpbmdlZFRpbWUiLCJwZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWUiLCJmaW5pc2hlZFdvcmsiLCJwZW5kaW5nQ29udGV4dCIsImh5ZHJhdGUiLCJyZW1haW5pbmdFeHBpcmF0aW9uVGltZSIsImZpcnN0QmF0Y2giLCJuZXh0U2NoZWR1bGVkUm9vdCIsIkdmIiwiSGYiLCJJZiIsIktmIiwiTGYiLCJNZiIsIk5mIiwiYmFzZVN0YXRlIiwiZmlyc3RVcGRhdGUiLCJsYXN0VXBkYXRlIiwiZmlyc3RDYXB0dXJlZFVwZGF0ZSIsImxhc3RDYXB0dXJlZFVwZGF0ZSIsImZpcnN0Q2FwdHVyZWRFZmZlY3QiLCJsYXN0Q2FwdHVyZWRFZmZlY3QiLCJPZiIsIlBmIiwiUWYiLCJSZiIsIlNmIiwiVGYiLCJVZiIsIlZmIiwiV2YiLCJYZiIsIllmIiwic3RhY2siLCJaZiIsIiRmIiwiYWciLCJiZyIsImNnIiwiZGciLCJlZyIsImZnIiwiZ2ciLCJoZyIsImpnIiwidGFnTmFtZSIsImtnIiwibGciLCJtZyIsInFnIiwiX3JlYWN0SW50ZXJuYWxGaWJlciIsIm5nIiwib2ciLCJwZyIsInJnIiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwic2ciLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJ0ZyIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsImdldFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCIsImNvbXBvbmVudFdpbGxNb3VudCIsImNvbXBvbmVudERpZE1vdW50IiwidWciLCJ2ZyIsIl9zdHJpbmdSZWYiLCJ3ZyIsInhnIiwibmMiLCJKZCIsInlnIiwiemciLCJBZyIsIkJnIiwiQ2ciLCJEZyIsIkVnIiwiRmciLCJHZyIsIkhnIiwiSWciLCJKZyIsIktnIiwiTGciLCJNZyIsIk5nIiwiU2ciLCJVTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnREaWRVcGRhdGUiLCJlbGVtZW50IiwiaGlkZGVuIiwiUmciLCJ1bnN0YWJsZV9vYnNlcnZlZEJpdHMiLCJUZyIsIlVnIiwiVmciLCJXZyIsIlhnIiwiWWciLCJzdXBwcmVzc1JlYWN0RXJyb3JMb2dnaW5nIiwiWmciLCIkZyIsImFoIiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJiaCIsImNoIiwiZGgiLCJpbnNlcnRCZWZvcmUiLCJlaCIsImZoIiwiZ2giLCJoaCIsImNvbXBvbmVudERpZENhdGNoIiwiaWgiLCJjb21wb25lbnRTdGFjayIsImpoIiwia2giLCJsaCIsIm1oIiwibmgiLCJvaCIsInBoIiwicWgiLCJyaCIsInNoIiwidGgiLCJ1aCIsInZoIiwid2giLCJ4aCIsInloIiwiemgiLCJBaCIsIkJoIiwiQ2giLCJnZXREZXJpdmVkU3RhdGVGcm9tQ2F0Y2giLCJEaCIsIkVoIiwiRmgiLCJHaCIsIkhoIiwiSWgiLCJKaCIsIktoIiwiTGgiLCJNaCIsIk5oIiwiT2giLCJQaCIsIlFoIiwiUmgiLCJTaCIsIlRoIiwiVWgiLCJWaCIsIldoIiwiWGgiLCJZaCIsIlpoIiwiJGgiLCJhaSIsIl9vbkNvbXBsZXRlIiwiYmkiLCJfZXhwaXJhdGlvblRpbWUiLCJfZGVmZXIiLCJyYW5nZUNvdW50IiwiV2EiLCJmb2N1c2VkRWxlbSIsInNlbGVjdGlvblJhbmdlIiwiamEiLCJuaSIsIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwic2V0RW5kIiwibGVmdCIsInNjcm9sbExlZnQiLCJ0b3AiLCJzY3JvbGxUb3AiLCJpZyIsIm9jIiwieGkiLCJ5aSIsIk9nIiwiUGciLCJ6aSIsInljIiwiUWciLCJBaSIsImNpIiwiZGkiLCJlaSIsImZpIiwiZ2kiLCJoaSIsImlpIiwiamkiLCJraSIsImxpIiwiZmluZEZpYmVyQnlIb3N0SW5zdGFuY2UiLCJpc0Rpc2FibGVkIiwic3VwcG9ydHNGaWJlciIsImluamVjdCIsIm9uQ29tbWl0RmliZXJSb290Iiwib25Db21taXRGaWJlclVubW91bnQiLCJKZiIsImZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyIiwibWkiLCJwaSIsIl9uZXh0IiwiX2hhc0NoaWxkcmVuIiwiX2RpZENvbXBsZXRlIiwiX2NoaWxkcmVuIiwicWkiLCJfZGlkQ29tbWl0IiwiX29uQ29tbWl0IiwicmkiLCJfaW50ZXJuYWxSb290Iiwic2kiLCJ1aSIsIl9yZWFjdFJvb3RDb250YWluZXIiLCJsZWdhY3lfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJoYXNBdHRyaWJ1dGUiLCJ0aSIsInZpIiwib2kiLCJ0aGVuIiwiY29tbWl0IiwidW5tb3VudCIsImNyZWF0ZUJhdGNoIiwid2kiLCJjcmVhdGVQb3J0YWwiLCJmaW5kRE9NTm9kZSIsInVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwidW5tb3VudENvbXBvbmVudEF0Tm9kZSIsInVuc3RhYmxlX2NyZWF0ZVBvcnRhbCIsInVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIiwidW5zdGFibGVfZGVmZXJyZWRVcGRhdGVzIiwidW5zdGFibGVfaW50ZXJhY3RpdmVVcGRhdGVzIiwiZmx1c2hTeW5jIiwidW5zdGFibGVfZmx1c2hDb250cm9sbGVkIiwiRXZlbnRQbHVnaW5IdWIiLCJFdmVudFBsdWdpblJlZ2lzdHJ5IiwiRXZlbnRQcm9wYWdhdG9ycyIsIlJlYWN0Q29udHJvbGxlZENvbXBvbmVudCIsIlJlYWN0RE9NQ29tcG9uZW50VHJlZSIsIlJlYWN0RE9NRXZlbnRMaXN0ZW5lciIsInVuc3RhYmxlX2NyZWF0ZVJvb3QiLCJidW5kbGVUeXBlIiwicmVuZGVyZXJQYWNrYWdlTmFtZSIsIkJpIiwiQ2kiLCJFeGVjdXRpb25FbnZpcm9ubWVudCIsImNhblVzZVdvcmtlcnMiLCJXb3JrZXIiLCJjYW5Vc2VFdmVudExpc3RlbmVycyIsImNhblVzZVZpZXdwb3J0Iiwic2NyZWVuIiwiaXNJbldvcmtlciIsImRvYyIsImJvZHkiLCJvYmpBIiwib2JqQiIsImtleXNBIiwia2V5c0IiLCJpc1RleHROb2RlIiwiY29udGFpbnNOb2RlIiwib3V0ZXJOb2RlIiwiaW5uZXJOb2RlIiwiY29udGFpbnMiLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsImlzTm9kZSIsIk5vZGUiLCJzdHlsZXMiLCJoMSIsImJhY2tncm91bmRDb2xvciIsInBhZGRpbmciLCJib3JkZXIiLCJsb29rdXAiLCJjYWNoZSIsIm1hbmFnZXJzIiwicGFyc2VkIiwiZm9yY2VOZXciLCJtdWx0aXBsZXgiLCJwYXJzZXVyaSIsImxvYyIsImhyZWYiLCJjcmVhdGVEZWJ1ZyIsInByZXZUaW1lIiwiZW5hYmxlZCIsImN1cnIiLCJjb2VyY2UiLCJmb3JtYXR0ZXIiLCJoYXNoIiwiYWJzIiwic2VsZWN0Q29sb3IiLCJpbml0IiwiaW5zdGFuY2VzIiwiZGlzYWJsZSIsIm5hbWVzIiwic2tpcHMiLCJpbnN0YW5jZSIsInBhY2tldERhdGEiLCJfZGVjb25zdHJ1Y3RQYWNrZXQiLCJwbGFjZWhvbGRlciIsIl9wbGFjZWhvbGRlciIsIm5ld0RhdGEiLCJfcmVjb25zdHJ1Y3RQYWNrZXQiLCJwZW5kaW5nQmxvYnMiLCJfcmVtb3ZlQmxvYnMiLCJjdXJLZXkiLCJjb250YWluaW5nT2JqZWN0IiwiZmlsZVJlYWRlciIsInRyYW5zcG9ydHMiLCJ0cmFuc3BvcnRPcHRpb25zIiwid3JpdGVCdWZmZXIiLCJwcmV2QnVmZmVyTGVuIiwicG9saWN5UG9ydCIsInJlbWVtYmVyVXBncmFkZSIsIm9ubHlCaW5hcnlVcGdyYWRlcyIsInBlck1lc3NhZ2VEZWZsYXRlIiwidGhyZXNob2xkIiwiZnJlZUdsb2JhbCIsInVwZ3JhZGVzIiwicGluZ0ludGVydmFsIiwicGluZ1RpbWVvdXQiLCJwaW5nSW50ZXJ2YWxUaW1lciIsInBpbmdUaW1lb3V0VGltZXIiLCJwcmlvcldlYnNvY2tldFN1Y2Nlc3MiLCJjcmVhdGVUcmFuc3BvcnQiLCJjbG9uZSIsIkVJTyIsInRyYW5zcG9ydCIsInJlcXVlc3RUaW1lb3V0IiwicHJvdG9jb2xzIiwic2V0VHJhbnNwb3J0Iiwib25EcmFpbiIsInByb2JlIiwiZmFpbGVkIiwib25UcmFuc3BvcnRPcGVuIiwidXBncmFkZUxvc2VzQmluYXJ5IiwidXBncmFkaW5nIiwiZmx1c2giLCJmcmVlemVUcmFuc3BvcnQiLCJvblRyYW5zcG9ydENsb3NlIiwib251cGdyYWRlIiwib25IYW5kc2hha2UiLCJzZXRQaW5nIiwiY29kZSIsImZpbHRlclVwZ3JhZGVzIiwib25IZWFydGJlYXQiLCJzZW5kUGFja2V0Iiwid2FpdEZvclVwZ3JhZGUiLCJjbGVhbnVwQW5kQ2xvc2UiLCJmaWx0ZXJlZFVwZ3JhZGVzIiwiZW1wdHkiLCJSZXF1ZXN0IiwibWV0aG9kIiwiYXN5bmMiLCJ1bmxvYWRIYW5kbGVyIiwicmVxdWVzdHMiLCJhYm9ydCIsInJlcXVlc3QiLCJyZXEiLCJzZW5kWGhyIiwicG9sbFhociIsInhociIsInNldERpc2FibGVIZWFkZXJDaGVjayIsInNldFJlcXVlc3RIZWFkZXIiLCJ3aXRoQ3JlZGVudGlhbHMiLCJoYXNYRFIiLCJvbkxvYWQiLCJyZXNwb25zZVRleHQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJjb250ZW50VHlwZSIsImdldFJlc3BvbnNlSGVhZGVyIiwic3RhdHVzIiwicmVxdWVzdHNDb3VudCIsIm9uU3VjY2VzcyIsImZyb21FcnJvciIsInJlc3BvbnNlIiwiaWVlZTc1NCIsImtNYXhMZW5ndGgiLCJUWVBFRF9BUlJBWV9TVVBQT1JUIiwiY3JlYXRlQnVmZmVyIiwidGhhdCIsIlJhbmdlRXJyb3IiLCJlbmNvZGluZ09yT2Zmc2V0IiwiYWxsb2NVbnNhZmUiLCJieXRlT2Zmc2V0IiwiZnJvbUFycmF5TGlrZSIsImZyb21BcnJheUJ1ZmZlciIsInN0cmluZyIsImlzRW5jb2RpbmciLCJhY3R1YWwiLCJmcm9tU3RyaW5nIiwiY29weSIsImlzbmFuIiwiZnJvbU9iamVjdCIsImFzc2VydFNpemUiLCJsb3dlcmVkQ2FzZSIsInV0ZjhUb0J5dGVzIiwiYmFzZTY0VG9CeXRlcyIsInN3YXAiLCJiaWRpcmVjdGlvbmFsSW5kZXhPZiIsImFycmF5SW5kZXhPZiIsImxhc3RJbmRleE9mIiwiaW5kZXhTaXplIiwiYXJyTGVuZ3RoIiwidmFsTGVuZ3RoIiwicmVhZCIsInJlYWRVSW50MTZCRSIsImZvdW5kSW5kZXgiLCJmb3VuZCIsImhleFdyaXRlIiwicmVtYWluaW5nIiwic3RyTGVuIiwidXRmOFdyaXRlIiwiYmxpdEJ1ZmZlciIsImFzY2lpV3JpdGUiLCJieXRlQXJyYXkiLCJhc2NpaVRvQnl0ZXMiLCJsYXRpbjFXcml0ZSIsImJhc2U2NFdyaXRlIiwidWNzMldyaXRlIiwidW5pdHMiLCJsbyIsInV0ZjE2bGVUb0J5dGVzIiwiYmFzZTY0U2xpY2UiLCJmcm9tQnl0ZUFycmF5IiwidXRmOFNsaWNlIiwicmVzIiwic2Vjb25kQnl0ZSIsInRoaXJkQnl0ZSIsImZvdXJ0aEJ5dGUiLCJ0ZW1wQ29kZVBvaW50IiwiZmlyc3RCeXRlIiwiY29kZVBvaW50IiwiYnl0ZXNQZXJTZXF1ZW5jZSIsImNvZGVQb2ludHMiLCJNQVhfQVJHVU1FTlRTX0xFTkdUSCIsImRlY29kZUNvZGVQb2ludHNBcnJheSIsIlNsb3dCdWZmZXIiLCJhbGxvYyIsIklOU1BFQ1RfTUFYX0JZVEVTIiwiZm9vIiwic3ViYXJyYXkiLCJ0eXBlZEFycmF5U3VwcG9ydCIsInBvb2xTaXplIiwiX2F1Z21lbnQiLCJzcGVjaWVzIiwiZmlsbCIsImFsbG9jVW5zYWZlU2xvdyIsIl9pc0J1ZmZlciIsImNvbXBhcmUiLCJsaXN0IiwicG9zIiwic3dhcDE2Iiwic3dhcDMyIiwic3dhcDY0IiwiaGV4U2xpY2UiLCJhc2NpaVNsaWNlIiwibGF0aW4xU2xpY2UiLCJ1dGYxNmxlU2xpY2UiLCJlcXVhbHMiLCJpbnNwZWN0IiwidGhpc1N0YXJ0IiwidGhpc0VuZCIsInRoaXNDb3B5IiwidGFyZ2V0Q29weSIsImluY2x1ZGVzIiwiaXNGaW5pdGUiLCJfYXJyIiwicmV0Iiwib3V0IiwidG9IZXgiLCJieXRlcyIsImNoZWNrT2Zmc2V0IiwiZXh0IiwiY2hlY2tJbnQiLCJvYmplY3RXcml0ZVVJbnQxNiIsImxpdHRsZUVuZGlhbiIsIm9iamVjdFdyaXRlVUludDMyIiwiY2hlY2tJRUVFNzU0Iiwid3JpdGVGbG9hdCIsIm5vQXNzZXJ0Iiwid3JpdGVEb3VibGUiLCJuZXdCdWYiLCJzbGljZUxlbiIsInJlYWRVSW50TEUiLCJtdWwiLCJyZWFkVUludEJFIiwicmVhZFVJbnQ4IiwicmVhZFVJbnQxNkxFIiwicmVhZFVJbnQzMkxFIiwicmVhZFVJbnQzMkJFIiwicmVhZEludExFIiwicG93IiwicmVhZEludEJFIiwicmVhZEludDgiLCJyZWFkSW50MTZMRSIsInJlYWRJbnQxNkJFIiwicmVhZEludDMyTEUiLCJyZWFkSW50MzJCRSIsInJlYWRGbG9hdExFIiwicmVhZEZsb2F0QkUiLCJyZWFkRG91YmxlTEUiLCJyZWFkRG91YmxlQkUiLCJ3cml0ZVVJbnRMRSIsIndyaXRlVUludEJFIiwid3JpdGVVSW50OCIsIndyaXRlVUludDE2TEUiLCJ3cml0ZVVJbnQxNkJFIiwid3JpdGVVSW50MzJMRSIsIndyaXRlVUludDMyQkUiLCJ3cml0ZUludExFIiwibGltaXQiLCJzdWIiLCJ3cml0ZUludEJFIiwid3JpdGVJbnQ4Iiwid3JpdGVJbnQxNkxFIiwid3JpdGVJbnQxNkJFIiwid3JpdGVJbnQzMkxFIiwid3JpdGVJbnQzMkJFIiwid3JpdGVGbG9hdExFIiwid3JpdGVGbG9hdEJFIiwid3JpdGVEb3VibGVMRSIsIndyaXRlRG91YmxlQkUiLCJ0YXJnZXRTdGFydCIsIklOVkFMSURfQkFTRTY0X1JFIiwibGVhZFN1cnJvZ2F0ZSIsInRvQnl0ZUFycmF5Iiwic3RyaW5ndHJpbSIsImJhc2U2NGNsZWFuIiwiZHN0IiwibGVucyIsImdldExlbnMiLCJ2YWxpZExlbiIsInBsYWNlSG9sZGVyc0xlbiIsInRtcCIsIkFyciIsIl9ieXRlTGVuZ3RoIiwiY3VyQnl0ZSIsInJldkxvb2t1cCIsInVpbnQ4IiwiZXh0cmFCeXRlcyIsImxlbjIiLCJlbmNvZGVDaHVuayIsInRyaXBsZXRUb0Jhc2U2NCIsIm91dHB1dCIsImlzTEUiLCJtTGVuIiwibkJ5dGVzIiwiZUxlbiIsImVNYXgiLCJlQmlhcyIsIm5CaXRzIiwiTmFOIiwicnQiLCJMTjIiLCJhcnJheWJ1ZmZlciIsImFidiIsImVycl9jYiIsImJhaWwiLCJwcm94eSIsInJvb3QiLCJmcmVlRXhwb3J0cyIsImZyZWVNb2R1bGUiLCJieXRlQ291bnQiLCJieXRlSW5kZXgiLCJzdHJpbmdGcm9tQ2hhckNvZGUiLCJ1Y3MyZGVjb2RlIiwiZXh0cmEiLCJjb3VudGVyIiwiY2hlY2tTY2FsYXJWYWx1ZSIsImNyZWF0ZUJ5dGUiLCJlbmNvZGVDb2RlUG9pbnQiLCJzeW1ib2wiLCJyZWFkQ29udGludWF0aW9uQnl0ZSIsImNvbnRpbnVhdGlvbkJ5dGUiLCJkZWNvZGVTeW1ib2wiLCJieXRlMSIsImJ5dGVTdHJpbmciLCJ1Y3MyZW5jb2RlIiwiX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18iLCJ3ZWJwYWNrUG9seWZpbGwiLCJkZXByZWNhdGUiLCJwYXRocyIsImNoYXJzIiwiZW5jb2RlZDEiLCJlbmNvZGVkMiIsImVuY29kZWQzIiwiZW5jb2RlZDQiLCJidWZmZXJMZW5ndGgiLCJCbG9iQnVpbGRlciIsIldlYktpdEJsb2JCdWlsZGVyIiwiTVNCbG9iQnVpbGRlciIsIk1vekJsb2JCdWlsZGVyIiwiYmxvYlN1cHBvcnRlZCIsImJsb2JTdXBwb3J0c0FycmF5QnVmZmVyVmlldyIsImJsb2JCdWlsZGVyU3VwcG9ydGVkIiwiYXBwZW5kIiwiZ2V0QmxvYiIsIm1hcEFycmF5QnVmZmVyVmlld3MiLCJjaHVuayIsIkJsb2JCdWlsZGVyQ29uc3RydWN0b3IiLCJCbG9iQ29uc3RydWN0b3IiLCJKU09OUFBvbGxpbmciLCJyTmV3bGluZSIsInJFc2NhcGVkTmV3bGluZSIsIl9fX2VpbyIsInNjcmlwdCIsImlmcmFtZSIsImluc2VydEF0IiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJoZWFkIiwiaWZyYW1lSWQiLCJjbGFzc05hbWUiLCJwb3NpdGlvbiIsImNvbXBsZXRlIiwiaW5pdElmcmFtZSIsImFjdGlvbiIsInN1Ym1pdCIsIk5vZGVXZWJTb2NrZXQiLCJCcm93c2VyV2ViU29ja2V0IiwiV2ViU29ja2V0IiwiTW96V2ViU29ja2V0IiwiV1MiLCJ1c2luZ0Jyb3dzZXJXZWJTb2NrZXQiLCJjaGVjayIsImhlYWRlcnMiLCJ3cyIsInN1cHBvcnRzIiwiYWRkRXZlbnRMaXN0ZW5lcnMiLCJvbm1lc3NhZ2UiLCJmYWN0b3IiLCJyYW5kIiwiZGV2aWF0aW9uIl0sIm1hcHBpbmdzIjoiYUFDQSxJQUFBQSxLQUdBLFNBQUFDLEVBQUFDLEdBR0EsR0FBQUYsRUFBQUUsR0FDQSxPQUFBRixFQUFBRSxHQUFBQyxRQUdBLElBQUFDLEVBQUFKLEVBQUFFLElBQ0FHLEVBQUFILEVBQ0FJLEdBQUEsRUFDQUgsWUFVQSxPQU5BSSxFQUFBTCxHQUFBTSxLQUFBSixFQUFBRCxRQUFBQyxJQUFBRCxRQUFBRixHQUdBRyxFQUFBRSxHQUFBLEVBR0FGLEVBQUFELFFBS0FGLEVBQUFRLEVBQUFGLEVBR0FOLEVBQUFTLEVBQUFWLEVBR0FDLEVBQUFVLEVBQUEsU0FBQVIsRUFBQVMsRUFBQUMsR0FDQVosRUFBQWEsRUFBQVgsRUFBQVMsSUFDQUcsT0FBQUMsZUFBQWIsRUFBQVMsR0FBMENLLFlBQUEsRUFBQUMsSUFBQUwsS0FLMUNaLEVBQUFrQixFQUFBLFNBQUFoQixHQUNBLG9CQUFBaUIsZUFBQUMsYUFDQU4sT0FB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T0FBUyxTQUFTbEIsR0FDbEMxWSxLQUFLZ1AsR0FBSzBKLEdBU1paLEVBQVFuWSxVQUFVcWEsT0FBUyxTQUFTckIsR0FDbEMzWSxLQUFLMlksSUFBTUEsR0FTYmIsRUFBUW5ZLFVBQVVtYSxVQUFZLFNBQVNsQixHQUNyQzVZLEtBQUs0WSxPQUFTQSIsImZpbGUiOiJidW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMzApO1xuIiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCkgfHwgKDEsIGV2YWwpKFwidGhpc1wiKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiIsIlxyXG4vKipcclxuICogRXhwb3NlIGBFbWl0dGVyYC5cclxuICovXHJcblxyXG5pZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICBtb2R1bGUuZXhwb3J0cyA9IEVtaXR0ZXI7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBJbml0aWFsaXplIGEgbmV3IGBFbWl0dGVyYC5cclxuICpcclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5mdW5jdGlvbiBFbWl0dGVyKG9iaikge1xyXG4gIGlmIChvYmopIHJldHVybiBtaXhpbihvYmopO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIE1peGluIHRoZSBlbWl0dGVyIHByb3BlcnRpZXMuXHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcclxuICogQHJldHVybiB7T2JqZWN0fVxyXG4gKiBAYXBpIHByaXZhdGVcclxuICovXHJcblxyXG5mdW5jdGlvbiBtaXhpbihvYmopIHtcclxuICBmb3IgKHZhciBrZXkgaW4gRW1pdHRlci5wcm90b3R5cGUpIHtcclxuICAgIG9ialtrZXldID0gRW1pdHRlci5wcm90b3R5cGVba2V5XTtcclxuICB9XHJcbiAgcmV0dXJuIG9iajtcclxufVxyXG5cclxuLyoqXHJcbiAqIExpc3RlbiBvbiB0aGUgZ2l2ZW4gYGV2ZW50YCB3aXRoIGBmbmAuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxyXG4gKiBAcmV0dXJuIHtFbWl0dGVyfVxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuXHJcbkVtaXR0ZXIucHJvdG90eXBlLm9uID1cclxuRW1pdHRlci5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uKGV2ZW50LCBmbil7XHJcbiAgdGhpcy5fY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzIHx8IHt9O1xyXG4gICh0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdID0gdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XSB8fCBbXSlcclxuICAgIC5wdXNoKGZuKTtcclxuICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBBZGRzIGFuIGBldmVudGAgbGlzdGVuZXIgdGhhdCB3aWxsIGJlIGludm9rZWQgYSBzaW5nbGVcclxuICogdGltZSB0aGVuIGF1dG9tYXRpY2FsbHkgcmVtb3ZlZC5cclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXHJcbiAqIEByZXR1cm4ge0VtaXR0ZXJ9XHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuRW1pdHRlci5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uKGV2ZW50LCBmbil7XHJcbiAgZnVuY3Rpb24gb24oKSB7XHJcbiAgICB0aGlzLm9mZihldmVudCwgb24pO1xyXG4gICAgZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuICB9XHJcblxyXG4gIG9uLmZuID0gZm47XHJcbiAgdGhpcy5vbihldmVudCwgb24pO1xyXG4gIHJldHVybiB0aGlzO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFJlbW92ZSB0aGUgZ2l2ZW4gY2FsbGJhY2sgZm9yIGBldmVudGAgb3IgYWxsXHJcbiAqIHJlZ2lzdGVyZWQgY2FsbGJhY2tzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cclxuICogQHJldHVybiB7RW1pdHRlcn1cclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5FbWl0dGVyLnByb3RvdHlwZS5vZmYgPVxyXG5FbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9XHJcbkVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycyA9XHJcbkVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbihldmVudCwgZm4pe1xyXG4gIHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCB7fTtcclxuXHJcbiAgLy8gYWxsXHJcbiAgaWYgKDAgPT0gYXJndW1lbnRzLmxlbmd0aCkge1xyXG4gICAgdGhpcy5fY2FsbGJhY2tzID0ge307XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIC8vIHNwZWNpZmljIGV2ZW50XHJcbiAgdmFyIGNhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF07XHJcbiAgaWYgKCFjYWxsYmFja3MpIHJldHVybiB0aGlzO1xyXG5cclxuICAvLyByZW1vdmUgYWxsIGhhbmRsZXJzXHJcbiAgaWYgKDEgPT0gYXJndW1lbnRzLmxlbmd0aCkge1xyXG4gICAgZGVsZXRlIHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF07XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIC8vIHJlbW92ZSBzcGVjaWZpYyBoYW5kbGVyXHJcbiAgdmFyIGNiO1xyXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY2FsbGJhY2tzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICBjYiA9IGNhbGxiYWNrc1tpXTtcclxuICAgIGlmIChjYiA9PT0gZm4gfHwgY2IuZm4gPT09IGZuKSB7XHJcbiAgICAgIGNhbGxiYWNrcy5zcGxpY2UoaSwgMSk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBFbWl0IGBldmVudGAgd2l0aCB0aGUgZ2l2ZW4gYXJncy5cclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XHJcbiAqIEBwYXJhbSB7TWl4ZWR9IC4uLlxyXG4gKiBAcmV0dXJuIHtFbWl0dGVyfVxyXG4gKi9cclxuXHJcbkVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbihldmVudCl7XHJcbiAgdGhpcy5fY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzIHx8IHt9O1xyXG4gIHZhciBhcmdzID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpXHJcbiAgICAsIGNhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF07XHJcblxyXG4gIGlmIChjYWxsYmFja3MpIHtcclxuICAgIGNhbGxiYWNrcyA9IGNhbGxiYWNrcy5zbGljZSgwKTtcclxuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBjYWxsYmFja3MubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcclxuICAgICAgY2FsbGJhY2tzW2ldLmFwcGx5KHRoaXMsIGFyZ3MpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG4vKipcclxuICogUmV0dXJuIGFycmF5IG9mIGNhbGxiYWNrcyBmb3IgYGV2ZW50YC5cclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XHJcbiAqIEByZXR1cm4ge0FycmF5fVxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuXHJcbkVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVycyA9IGZ1bmN0aW9uKGV2ZW50KXtcclxuICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307XHJcbiAgcmV0dXJuIHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF0gfHwgW107XHJcbn07XHJcblxyXG4vKipcclxuICogQ2hlY2sgaWYgdGhpcyBlbWl0dGVyIGhhcyBgZXZlbnRgIGhhbmRsZXJzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcclxuICogQHJldHVybiB7Qm9vbGVhbn1cclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5FbWl0dGVyLnByb3RvdHlwZS5oYXNMaXN0ZW5lcnMgPSBmdW5jdGlvbihldmVudCl7XHJcbiAgcmV0dXJuICEhIHRoaXMubGlzdGVuZXJzKGV2ZW50KS5sZW5ndGg7XHJcbn07XHJcbiIsIi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIga2V5cyA9IHJlcXVpcmUoJy4va2V5cycpO1xudmFyIGhhc0JpbmFyeSA9IHJlcXVpcmUoJ2hhcy1iaW5hcnkyJyk7XG52YXIgc2xpY2VCdWZmZXIgPSByZXF1aXJlKCdhcnJheWJ1ZmZlci5zbGljZScpO1xudmFyIGFmdGVyID0gcmVxdWlyZSgnYWZ0ZXInKTtcbnZhciB1dGY4ID0gcmVxdWlyZSgnLi91dGY4Jyk7XG5cbnZhciBiYXNlNjRlbmNvZGVyO1xuaWYgKGdsb2JhbCAmJiBnbG9iYWwuQXJyYXlCdWZmZXIpIHtcbiAgYmFzZTY0ZW5jb2RlciA9IHJlcXVpcmUoJ2Jhc2U2NC1hcnJheWJ1ZmZlcicpO1xufVxuXG4vKipcbiAqIENoZWNrIGlmIHdlIGFyZSBydW5uaW5nIGFuIGFuZHJvaWQgYnJvd3Nlci4gVGhhdCByZXF1aXJlcyB1cyB0byB1c2VcbiAqIEFycmF5QnVmZmVyIHdpdGggcG9sbGluZyB0cmFuc3BvcnRzLi4uXG4gKlxuICogaHR0cDovL2doaW5kYS5uZXQvanBlZy1ibG9iLWFqYXgtYW5kcm9pZC9cbiAqL1xuXG52YXIgaXNBbmRyb2lkID0gdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgL0FuZHJvaWQvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuXG4vKipcbiAqIENoZWNrIGlmIHdlIGFyZSBydW5uaW5nIGluIFBoYW50b21KUy5cbiAqIFVwbG9hZGluZyBhIEJsb2Igd2l0aCBQaGFudG9tSlMgZG9lcyBub3Qgd29yayBjb3JyZWN0bHksIGFzIHJlcG9ydGVkIGhlcmU6XG4gKiBodHRwczovL2dpdGh1Yi5jb20vYXJpeWEvcGhhbnRvbWpzL2lzc3Vlcy8xMTM5NVxuICogQHR5cGUgYm9vbGVhblxuICovXG52YXIgaXNQaGFudG9tSlMgPSB0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiAvUGhhbnRvbUpTL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcblxuLyoqXG4gKiBXaGVuIHRydWUsIGF2b2lkcyB1c2luZyBCbG9icyB0byBlbmNvZGUgcGF5bG9hZHMuXG4gKiBAdHlwZSBib29sZWFuXG4gKi9cbnZhciBkb250U2VuZEJsb2JzID0gaXNBbmRyb2lkIHx8IGlzUGhhbnRvbUpTO1xuXG4vKipcbiAqIEN1cnJlbnQgcHJvdG9jb2wgdmVyc2lvbi5cbiAqL1xuXG5leHBvcnRzLnByb3RvY29sID0gMztcblxuLyoqXG4gKiBQYWNrZXQgdHlwZXMuXG4gKi9cblxudmFyIHBhY2tldHMgPSBleHBvcnRzLnBhY2tldHMgPSB7XG4gICAgb3BlbjogICAgIDAgICAgLy8gbm9uLXdzXG4gICwgY2xvc2U6ICAgIDEgICAgLy8gbm9uLXdzXG4gICwgcGluZzogICAgIDJcbiAgLCBwb25nOiAgICAgM1xuICAsIG1lc3NhZ2U6ICA0XG4gICwgdXBncmFkZTogIDVcbiAgLCBub29wOiAgICAgNlxufTtcblxudmFyIHBhY2tldHNsaXN0ID0ga2V5cyhwYWNrZXRzKTtcblxuLyoqXG4gKiBQcmVtYWRlIGVycm9yIHBhY2tldC5cbiAqL1xuXG52YXIgZXJyID0geyB0eXBlOiAnZXJyb3InLCBkYXRhOiAncGFyc2VyIGVycm9yJyB9O1xuXG4vKipcbiAqIENyZWF0ZSBhIGJsb2IgYXBpIGV2ZW4gZm9yIGJsb2IgYnVpbGRlciB3aGVuIHZlbmRvciBwcmVmaXhlcyBleGlzdFxuICovXG5cbnZhciBCbG9iID0gcmVxdWlyZSgnYmxvYicpO1xuXG4vKipcbiAqIEVuY29kZXMgYSBwYWNrZXQuXG4gKlxuICogICAgIDxwYWNrZXQgdHlwZSBpZD4gWyA8ZGF0YT4gXVxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogICAgIDVoZWxsbyB3b3JsZFxuICogICAgIDNcbiAqICAgICA0XG4gKlxuICogQmluYXJ5IGlzIGVuY29kZWQgaW4gYW4gaWRlbnRpY2FsIHByaW5jaXBsZVxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmV4cG9ydHMuZW5jb2RlUGFja2V0ID0gZnVuY3Rpb24gKHBhY2tldCwgc3VwcG9ydHNCaW5hcnksIHV0ZjhlbmNvZGUsIGNhbGxiYWNrKSB7XG4gIGlmICh0eXBlb2Ygc3VwcG9ydHNCaW5hcnkgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYWxsYmFjayA9IHN1cHBvcnRzQmluYXJ5O1xuICAgIHN1cHBvcnRzQmluYXJ5ID0gZmFsc2U7XG4gIH1cblxuICBpZiAodHlwZW9mIHV0ZjhlbmNvZGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYWxsYmFjayA9IHV0ZjhlbmNvZGU7XG4gICAgdXRmOGVuY29kZSA9IG51bGw7XG4gIH1cblxuICB2YXIgZGF0YSA9IChwYWNrZXQuZGF0YSA9PT0gdW5kZWZpbmVkKVxuICAgID8gdW5kZWZpbmVkXG4gICAgOiBwYWNrZXQuZGF0YS5idWZmZXIgfHwgcGFja2V0LmRhdGE7XG5cbiAgaWYgKGdsb2JhbC5BcnJheUJ1ZmZlciAmJiBkYXRhIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICByZXR1cm4gZW5jb2RlQXJyYXlCdWZmZXIocGFja2V0LCBzdXBwb3J0c0JpbmFyeSwgY2FsbGJhY2spO1xuICB9IGVsc2UgaWYgKEJsb2IgJiYgZGF0YSBpbnN0YW5jZW9mIGdsb2JhbC5CbG9iKSB7XG4gICAgcmV0dXJuIGVuY29kZUJsb2IocGFja2V0LCBzdXBwb3J0c0JpbmFyeSwgY2FsbGJhY2spO1xuICB9XG5cbiAgLy8gbWlnaHQgYmUgYW4gb2JqZWN0IHdpdGggeyBiYXNlNjQ6IHRydWUsIGRhdGE6IGRhdGFBc0Jhc2U2NFN0cmluZyB9XG4gIGlmIChkYXRhICYmIGRhdGEuYmFzZTY0KSB7XG4gICAgcmV0dXJuIGVuY29kZUJhc2U2NE9iamVjdChwYWNrZXQsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIC8vIFNlbmRpbmcgZGF0YSBhcyBhIHV0Zi04IHN0cmluZ1xuICB2YXIgZW5jb2RlZCA9IHBhY2tldHNbcGFja2V0LnR5cGVdO1xuXG4gIC8vIGRhdGEgZnJhZ21lbnQgaXMgb3B0aW9uYWxcbiAgaWYgKHVuZGVmaW5lZCAhPT0gcGFja2V0LmRhdGEpIHtcbiAgICBlbmNvZGVkICs9IHV0ZjhlbmNvZGUgPyB1dGY4LmVuY29kZShTdHJpbmcocGFja2V0LmRhdGEpLCB7IHN0cmljdDogZmFsc2UgfSkgOiBTdHJpbmcocGFja2V0LmRhdGEpO1xuICB9XG5cbiAgcmV0dXJuIGNhbGxiYWNrKCcnICsgZW5jb2RlZCk7XG5cbn07XG5cbmZ1bmN0aW9uIGVuY29kZUJhc2U2NE9iamVjdChwYWNrZXQsIGNhbGxiYWNrKSB7XG4gIC8vIHBhY2tldCBkYXRhIGlzIGFuIG9iamVjdCB7IGJhc2U2NDogdHJ1ZSwgZGF0YTogZGF0YUFzQmFzZTY0U3RyaW5nIH1cbiAgdmFyIG1lc3NhZ2UgPSAnYicgKyBleHBvcnRzLnBhY2tldHNbcGFja2V0LnR5cGVdICsgcGFja2V0LmRhdGEuZGF0YTtcbiAgcmV0dXJuIGNhbGxiYWNrKG1lc3NhZ2UpO1xufVxuXG4vKipcbiAqIEVuY29kZSBwYWNrZXQgaGVscGVycyBmb3IgYmluYXJ5IHR5cGVzXG4gKi9cblxuZnVuY3Rpb24gZW5jb2RlQXJyYXlCdWZmZXIocGFja2V0LCBzdXBwb3J0c0JpbmFyeSwgY2FsbGJhY2spIHtcbiAgaWYgKCFzdXBwb3J0c0JpbmFyeSkge1xuICAgIHJldHVybiBleHBvcnRzLmVuY29kZUJhc2U2NFBhY2tldChwYWNrZXQsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIHZhciBkYXRhID0gcGFja2V0LmRhdGE7XG4gIHZhciBjb250ZW50QXJyYXkgPSBuZXcgVWludDhBcnJheShkYXRhKTtcbiAgdmFyIHJlc3VsdEJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KDEgKyBkYXRhLmJ5dGVMZW5ndGgpO1xuXG4gIHJlc3VsdEJ1ZmZlclswXSA9IHBhY2tldHNbcGFja2V0LnR5cGVdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbnRlbnRBcnJheS5sZW5ndGg7IGkrKykge1xuICAgIHJlc3VsdEJ1ZmZlcltpKzFdID0gY29udGVudEFycmF5W2ldO1xuICB9XG5cbiAgcmV0dXJuIGNhbGxiYWNrKHJlc3VsdEJ1ZmZlci5idWZmZXIpO1xufVxuXG5mdW5jdGlvbiBlbmNvZGVCbG9iQXNBcnJheUJ1ZmZlcihwYWNrZXQsIHN1cHBvcnRzQmluYXJ5LCBjYWxsYmFjaykge1xuICBpZiAoIXN1cHBvcnRzQmluYXJ5KSB7XG4gICAgcmV0dXJuIGV4cG9ydHMuZW5jb2RlQmFzZTY0UGFja2V0KHBhY2tldCwgY2FsbGJhY2spO1xuICB9XG5cbiAgdmFyIGZyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgZnIub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgcGFja2V0LmRhdGEgPSBmci5yZXN1bHQ7XG4gICAgZXhwb3J0cy5lbmNvZGVQYWNrZXQocGFja2V0LCBzdXBwb3J0c0JpbmFyeSwgdHJ1ZSwgY2FsbGJhY2spO1xuICB9O1xuICByZXR1cm4gZnIucmVhZEFzQXJyYXlCdWZmZXIocGFja2V0LmRhdGEpO1xufVxuXG5mdW5jdGlvbiBlbmNvZGVCbG9iKHBhY2tldCwgc3VwcG9ydHNCaW5hcnksIGNhbGxiYWNrKSB7XG4gIGlmICghc3VwcG9ydHNCaW5hcnkpIHtcbiAgICByZXR1cm4gZXhwb3J0cy5lbmNvZGVCYXNlNjRQYWNrZXQocGFja2V0LCBjYWxsYmFjayk7XG4gIH1cblxuICBpZiAoZG9udFNlbmRCbG9icykge1xuICAgIHJldHVybiBlbmNvZGVCbG9iQXNBcnJheUJ1ZmZlcihwYWNrZXQsIHN1cHBvcnRzQmluYXJ5LCBjYWxsYmFjayk7XG4gIH1cblxuICB2YXIgbGVuZ3RoID0gbmV3IFVpbnQ4QXJyYXkoMSk7XG4gIGxlbmd0aFswXSA9IHBhY2tldHNbcGFja2V0LnR5cGVdO1xuICB2YXIgYmxvYiA9IG5ldyBCbG9iKFtsZW5ndGguYnVmZmVyLCBwYWNrZXQuZGF0YV0pO1xuXG4gIHJldHVybiBjYWxsYmFjayhibG9iKTtcbn1cblxuLyoqXG4gKiBFbmNvZGVzIGEgcGFja2V0IHdpdGggYmluYXJ5IGRhdGEgaW4gYSBiYXNlNjQgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldCwgaGFzIGB0eXBlYCBhbmQgYGRhdGFgXG4gKiBAcmV0dXJuIHtTdHJpbmd9IGJhc2U2NCBlbmNvZGVkIG1lc3NhZ2VcbiAqL1xuXG5leHBvcnRzLmVuY29kZUJhc2U2NFBhY2tldCA9IGZ1bmN0aW9uKHBhY2tldCwgY2FsbGJhY2spIHtcbiAgdmFyIG1lc3NhZ2UgPSAnYicgKyBleHBvcnRzLnBhY2tldHNbcGFja2V0LnR5cGVdO1xuICBpZiAoQmxvYiAmJiBwYWNrZXQuZGF0YSBpbnN0YW5jZW9mIGdsb2JhbC5CbG9iKSB7XG4gICAgdmFyIGZyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICBmci5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBiNjQgPSBmci5yZXN1bHQuc3BsaXQoJywnKVsxXTtcbiAgICAgIGNhbGxiYWNrKG1lc3NhZ2UgKyBiNjQpO1xuICAgIH07XG4gICAgcmV0dXJuIGZyLnJlYWRBc0RhdGFVUkwocGFja2V0LmRhdGEpO1xuICB9XG5cbiAgdmFyIGI2NGRhdGE7XG4gIHRyeSB7XG4gICAgYjY0ZGF0YSA9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgbmV3IFVpbnQ4QXJyYXkocGFja2V0LmRhdGEpKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIGlQaG9uZSBTYWZhcmkgZG9lc24ndCBsZXQgeW91IGFwcGx5IHdpdGggdHlwZWQgYXJyYXlzXG4gICAgdmFyIHR5cGVkID0gbmV3IFVpbnQ4QXJyYXkocGFja2V0LmRhdGEpO1xuICAgIHZhciBiYXNpYyA9IG5ldyBBcnJheSh0eXBlZC5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHlwZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgIGJhc2ljW2ldID0gdHlwZWRbaV07XG4gICAgfVxuICAgIGI2NGRhdGEgPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGJhc2ljKTtcbiAgfVxuICBtZXNzYWdlICs9IGdsb2JhbC5idG9hKGI2NGRhdGEpO1xuICByZXR1cm4gY2FsbGJhY2sobWVzc2FnZSk7XG59O1xuXG4vKipcbiAqIERlY29kZXMgYSBwYWNrZXQuIENoYW5nZXMgZm9ybWF0IHRvIEJsb2IgaWYgcmVxdWVzdGVkLlxuICpcbiAqIEByZXR1cm4ge09iamVjdH0gd2l0aCBgdHlwZWAgYW5kIGBkYXRhYCAoaWYgYW55KVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZXhwb3J0cy5kZWNvZGVQYWNrZXQgPSBmdW5jdGlvbiAoZGF0YSwgYmluYXJ5VHlwZSwgdXRmOGRlY29kZSkge1xuICBpZiAoZGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGVycjtcbiAgfVxuICAvLyBTdHJpbmcgZGF0YVxuICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKGRhdGEuY2hhckF0KDApID09PSAnYicpIHtcbiAgICAgIHJldHVybiBleHBvcnRzLmRlY29kZUJhc2U2NFBhY2tldChkYXRhLnN1YnN0cigxKSwgYmluYXJ5VHlwZSk7XG4gICAgfVxuXG4gICAgaWYgKHV0ZjhkZWNvZGUpIHtcbiAgICAgIGRhdGEgPSB0cnlEZWNvZGUoZGF0YSk7XG4gICAgICBpZiAoZGF0YSA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIGVycjtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIHR5cGUgPSBkYXRhLmNoYXJBdCgwKTtcblxuICAgIGlmIChOdW1iZXIodHlwZSkgIT0gdHlwZSB8fCAhcGFja2V0c2xpc3RbdHlwZV0pIHtcbiAgICAgIHJldHVybiBlcnI7XG4gICAgfVxuXG4gICAgaWYgKGRhdGEubGVuZ3RoID4gMSkge1xuICAgICAgcmV0dXJuIHsgdHlwZTogcGFja2V0c2xpc3RbdHlwZV0sIGRhdGE6IGRhdGEuc3Vic3RyaW5nKDEpIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IHBhY2tldHNsaXN0W3R5cGVdIH07XG4gICAgfVxuICB9XG5cbiAgdmFyIGFzQXJyYXkgPSBuZXcgVWludDhBcnJheShkYXRhKTtcbiAgdmFyIHR5cGUgPSBhc0FycmF5WzBdO1xuICB2YXIgcmVzdCA9IHNsaWNlQnVmZmVyKGRhdGEsIDEpO1xuICBpZiAoQmxvYiAmJiBiaW5hcnlUeXBlID09PSAnYmxvYicpIHtcbiAgICByZXN0ID0gbmV3IEJsb2IoW3Jlc3RdKTtcbiAgfVxuICByZXR1cm4geyB0eXBlOiBwYWNrZXRzbGlzdFt0eXBlXSwgZGF0YTogcmVzdCB9O1xufTtcblxuZnVuY3Rpb24gdHJ5RGVjb2RlKGRhdGEpIHtcbiAgdHJ5IHtcbiAgICBkYXRhID0gdXRmOC5kZWNvZGUoZGF0YSwgeyBzdHJpY3Q6IGZhbHNlIH0pO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIERlY29kZXMgYSBwYWNrZXQgZW5jb2RlZCBpbiBhIGJhc2U2NCBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gYmFzZTY0IGVuY29kZWQgbWVzc2FnZVxuICogQHJldHVybiB7T2JqZWN0fSB3aXRoIGB0eXBlYCBhbmQgYGRhdGFgIChpZiBhbnkpXG4gKi9cblxuZXhwb3J0cy5kZWNvZGVCYXNlNjRQYWNrZXQgPSBmdW5jdGlvbihtc2csIGJpbmFyeVR5cGUpIHtcbiAgdmFyIHR5cGUgPSBwYWNrZXRzbGlzdFttc2cuY2hhckF0KDApXTtcbiAgaWYgKCFiYXNlNjRlbmNvZGVyKSB7XG4gICAgcmV0dXJuIHsgdHlwZTogdHlwZSwgZGF0YTogeyBiYXNlNjQ6IHRydWUsIGRhdGE6IG1zZy5zdWJzdHIoMSkgfSB9O1xuICB9XG5cbiAgdmFyIGRhdGEgPSBiYXNlNjRlbmNvZGVyLmRlY29kZShtc2cuc3Vic3RyKDEpKTtcblxuICBpZiAoYmluYXJ5VHlwZSA9PT0gJ2Jsb2InICYmIEJsb2IpIHtcbiAgICBkYXRhID0gbmV3IEJsb2IoW2RhdGFdKTtcbiAgfVxuXG4gIHJldHVybiB7IHR5cGU6IHR5cGUsIGRhdGE6IGRhdGEgfTtcbn07XG5cbi8qKlxuICogRW5jb2RlcyBtdWx0aXBsZSBtZXNzYWdlcyAocGF5bG9hZCkuXG4gKlxuICogICAgIDxsZW5ndGg+OmRhdGFcbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqICAgICAxMTpoZWxsbyB3b3JsZDI6aGlcbiAqXG4gKiBJZiBhbnkgY29udGVudHMgYXJlIGJpbmFyeSwgdGhleSB3aWxsIGJlIGVuY29kZWQgYXMgYmFzZTY0IHN0cmluZ3MuIEJhc2U2NFxuICogZW5jb2RlZCBzdHJpbmdzIGFyZSBtYXJrZWQgd2l0aCBhIGIgYmVmb3JlIHRoZSBsZW5ndGggc3BlY2lmaWVyXG4gKlxuICogQHBhcmFtIHtBcnJheX0gcGFja2V0c1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZXhwb3J0cy5lbmNvZGVQYXlsb2FkID0gZnVuY3Rpb24gKHBhY2tldHMsIHN1cHBvcnRzQmluYXJ5LCBjYWxsYmFjaykge1xuICBpZiAodHlwZW9mIHN1cHBvcnRzQmluYXJ5ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2FsbGJhY2sgPSBzdXBwb3J0c0JpbmFyeTtcbiAgICBzdXBwb3J0c0JpbmFyeSA9IG51bGw7XG4gIH1cblxuICB2YXIgaXNCaW5hcnkgPSBoYXNCaW5hcnkocGFja2V0cyk7XG5cbiAgaWYgKHN1cHBvcnRzQmluYXJ5ICYmIGlzQmluYXJ5KSB7XG4gICAgaWYgKEJsb2IgJiYgIWRvbnRTZW5kQmxvYnMpIHtcbiAgICAgIHJldHVybiBleHBvcnRzLmVuY29kZVBheWxvYWRBc0Jsb2IocGFja2V0cywgY2FsbGJhY2spO1xuICAgIH1cblxuICAgIHJldHVybiBleHBvcnRzLmVuY29kZVBheWxvYWRBc0FycmF5QnVmZmVyKHBhY2tldHMsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIGlmICghcGFja2V0cy5sZW5ndGgpIHtcbiAgICByZXR1cm4gY2FsbGJhY2soJzA6Jyk7XG4gIH1cblxuICBmdW5jdGlvbiBzZXRMZW5ndGhIZWFkZXIobWVzc2FnZSkge1xuICAgIHJldHVybiBtZXNzYWdlLmxlbmd0aCArICc6JyArIG1lc3NhZ2U7XG4gIH1cblxuICBmdW5jdGlvbiBlbmNvZGVPbmUocGFja2V0LCBkb25lQ2FsbGJhY2spIHtcbiAgICBleHBvcnRzLmVuY29kZVBhY2tldChwYWNrZXQsICFpc0JpbmFyeSA/IGZhbHNlIDogc3VwcG9ydHNCaW5hcnksIGZhbHNlLCBmdW5jdGlvbihtZXNzYWdlKSB7XG4gICAgICBkb25lQ2FsbGJhY2sobnVsbCwgc2V0TGVuZ3RoSGVhZGVyKG1lc3NhZ2UpKTtcbiAgICB9KTtcbiAgfVxuXG4gIG1hcChwYWNrZXRzLCBlbmNvZGVPbmUsIGZ1bmN0aW9uKGVyciwgcmVzdWx0cykge1xuICAgIHJldHVybiBjYWxsYmFjayhyZXN1bHRzLmpvaW4oJycpKTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIEFzeW5jIGFycmF5IG1hcCB1c2luZyBhZnRlclxuICovXG5cbmZ1bmN0aW9uIG1hcChhcnksIGVhY2gsIGRvbmUpIHtcbiAgdmFyIHJlc3VsdCA9IG5ldyBBcnJheShhcnkubGVuZ3RoKTtcbiAgdmFyIG5leHQgPSBhZnRlcihhcnkubGVuZ3RoLCBkb25lKTtcblxuICB2YXIgZWFjaFdpdGhJbmRleCA9IGZ1bmN0aW9uKGksIGVsLCBjYikge1xuICAgIGVhY2goZWwsIGZ1bmN0aW9uKGVycm9yLCBtc2cpIHtcbiAgICAgIHJlc3VsdFtpXSA9IG1zZztcbiAgICAgIGNiKGVycm9yLCByZXN1bHQpO1xuICAgIH0pO1xuICB9O1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJ5Lmxlbmd0aDsgaSsrKSB7XG4gICAgZWFjaFdpdGhJbmRleChpLCBhcnlbaV0sIG5leHQpO1xuICB9XG59XG5cbi8qXG4gKiBEZWNvZGVzIGRhdGEgd2hlbiBhIHBheWxvYWQgaXMgbWF5YmUgZXhwZWN0ZWQuIFBvc3NpYmxlIGJpbmFyeSBjb250ZW50cyBhcmVcbiAqIGRlY29kZWQgZnJvbSB0aGVpciBiYXNlNjQgcmVwcmVzZW50YXRpb25cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZGF0YSwgY2FsbGJhY2sgbWV0aG9kXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuZGVjb2RlUGF5bG9hZCA9IGZ1bmN0aW9uIChkYXRhLCBiaW5hcnlUeXBlLCBjYWxsYmFjaykge1xuICBpZiAodHlwZW9mIGRhdGEgIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGV4cG9ydHMuZGVjb2RlUGF5bG9hZEFzQmluYXJ5KGRhdGEsIGJpbmFyeVR5cGUsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYmluYXJ5VHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhbGxiYWNrID0gYmluYXJ5VHlwZTtcbiAgICBiaW5hcnlUeXBlID0gbnVsbDtcbiAgfVxuXG4gIHZhciBwYWNrZXQ7XG4gIGlmIChkYXRhID09PSAnJykge1xuICAgIC8vIHBhcnNlciBlcnJvciAtIGlnbm9yaW5nIHBheWxvYWRcbiAgICByZXR1cm4gY2FsbGJhY2soZXJyLCAwLCAxKTtcbiAgfVxuXG4gIHZhciBsZW5ndGggPSAnJywgbiwgbXNnO1xuXG4gIGZvciAodmFyIGkgPSAwLCBsID0gZGF0YS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICB2YXIgY2hyID0gZGF0YS5jaGFyQXQoaSk7XG5cbiAgICBpZiAoY2hyICE9PSAnOicpIHtcbiAgICAgIGxlbmd0aCArPSBjaHI7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAobGVuZ3RoID09PSAnJyB8fCAobGVuZ3RoICE9IChuID0gTnVtYmVyKGxlbmd0aCkpKSkge1xuICAgICAgLy8gcGFyc2VyIGVycm9yIC0gaWdub3JpbmcgcGF5bG9hZFxuICAgICAgcmV0dXJuIGNhbGxiYWNrKGVyciwgMCwgMSk7XG4gICAgfVxuXG4gICAgbXNnID0gZGF0YS5zdWJzdHIoaSArIDEsIG4pO1xuXG4gICAgaWYgKGxlbmd0aCAhPSBtc2cubGVuZ3RoKSB7XG4gICAgICAvLyBwYXJzZXIgZXJyb3IgLSBpZ25vcmluZyBwYXlsb2FkXG4gICAgICByZXR1cm4gY2FsbGJhY2soZXJyLCAwLCAxKTtcbiAgICB9XG5cbiAgICBpZiAobXNnLmxlbmd0aCkge1xuICAgICAgcGFja2V0ID0gZXhwb3J0cy5kZWNvZGVQYWNrZXQobXNnLCBiaW5hcnlUeXBlLCBmYWxzZSk7XG5cbiAgICAgIGlmIChlcnIudHlwZSA9PT0gcGFja2V0LnR5cGUgJiYgZXJyLmRhdGEgPT09IHBhY2tldC5kYXRhKSB7XG4gICAgICAgIC8vIHBhcnNlciBlcnJvciBpbiBpbmRpdmlkdWFsIHBhY2tldCAtIGlnbm9yaW5nIHBheWxvYWRcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVyciwgMCwgMSk7XG4gICAgICB9XG5cbiAgICAgIHZhciByZXQgPSBjYWxsYmFjayhwYWNrZXQsIGkgKyBuLCBsKTtcbiAgICAgIGlmIChmYWxzZSA9PT0gcmV0KSByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gYWR2YW5jZSBjdXJzb3JcbiAgICBpICs9IG47XG4gICAgbGVuZ3RoID0gJyc7XG4gIH1cblxuICBpZiAobGVuZ3RoICE9PSAnJykge1xuICAgIC8vIHBhcnNlciBlcnJvciAtIGlnbm9yaW5nIHBheWxvYWRcbiAgICByZXR1cm4gY2FsbGJhY2soZXJyLCAwLCAxKTtcbiAgfVxuXG59O1xuXG4vKipcbiAqIEVuY29kZXMgbXVsdGlwbGUgbWVzc2FnZXMgKHBheWxvYWQpIGFzIGJpbmFyeS5cbiAqXG4gKiA8MSA9IGJpbmFyeSwgMCA9IHN0cmluZz48bnVtYmVyIGZyb20gMC05PjxudW1iZXIgZnJvbSAwLTk+Wy4uLl08bnVtYmVyXG4gKiAyNTU+PGRhdGE+XG4gKlxuICogRXhhbXBsZTpcbiAqIDEgMyAyNTUgMSAyIDMsIGlmIHRoZSBiaW5hcnkgY29udGVudHMgYXJlIGludGVycHJldGVkIGFzIDggYml0IGludGVnZXJzXG4gKlxuICogQHBhcmFtIHtBcnJheX0gcGFja2V0c1xuICogQHJldHVybiB7QXJyYXlCdWZmZXJ9IGVuY29kZWQgcGF5bG9hZFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZXhwb3J0cy5lbmNvZGVQYXlsb2FkQXNBcnJheUJ1ZmZlciA9IGZ1bmN0aW9uKHBhY2tldHMsIGNhbGxiYWNrKSB7XG4gIGlmICghcGFja2V0cy5sZW5ndGgpIHtcbiAgICByZXR1cm4gY2FsbGJhY2sobmV3IEFycmF5QnVmZmVyKDApKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGVuY29kZU9uZShwYWNrZXQsIGRvbmVDYWxsYmFjaykge1xuICAgIGV4cG9ydHMuZW5jb2RlUGFja2V0KHBhY2tldCwgdHJ1ZSwgdHJ1ZSwgZnVuY3Rpb24oZGF0YSkge1xuICAgICAgcmV0dXJuIGRvbmVDYWxsYmFjayhudWxsLCBkYXRhKTtcbiAgICB9KTtcbiAgfVxuXG4gIG1hcChwYWNrZXRzLCBlbmNvZGVPbmUsIGZ1bmN0aW9uKGVyciwgZW5jb2RlZFBhY2tldHMpIHtcbiAgICB2YXIgdG90YWxMZW5ndGggPSBlbmNvZGVkUGFja2V0cy5yZWR1Y2UoZnVuY3Rpb24oYWNjLCBwKSB7XG4gICAgICB2YXIgbGVuO1xuICAgICAgaWYgKHR5cGVvZiBwID09PSAnc3RyaW5nJyl7XG4gICAgICAgIGxlbiA9IHAubGVuZ3RoO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGVuID0gcC5ieXRlTGVuZ3RoO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFjYyArIGxlbi50b1N0cmluZygpLmxlbmd0aCArIGxlbiArIDI7IC8vIHN0cmluZy9iaW5hcnkgaWRlbnRpZmllciArIHNlcGFyYXRvciA9IDJcbiAgICB9LCAwKTtcblxuICAgIHZhciByZXN1bHRBcnJheSA9IG5ldyBVaW50OEFycmF5KHRvdGFsTGVuZ3RoKTtcblxuICAgIHZhciBidWZmZXJJbmRleCA9IDA7XG4gICAgZW5jb2RlZFBhY2tldHMuZm9yRWFjaChmdW5jdGlvbihwKSB7XG4gICAgICB2YXIgaXNTdHJpbmcgPSB0eXBlb2YgcCA9PT0gJ3N0cmluZyc7XG4gICAgICB2YXIgYWIgPSBwO1xuICAgICAgaWYgKGlzU3RyaW5nKSB7XG4gICAgICAgIHZhciB2aWV3ID0gbmV3IFVpbnQ4QXJyYXkocC5sZW5ndGgpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB2aWV3W2ldID0gcC5jaGFyQ29kZUF0KGkpO1xuICAgICAgICB9XG4gICAgICAgIGFiID0gdmlldy5idWZmZXI7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc1N0cmluZykgeyAvLyBub3QgdHJ1ZSBiaW5hcnlcbiAgICAgICAgcmVzdWx0QXJyYXlbYnVmZmVySW5kZXgrK10gPSAwO1xuICAgICAgfSBlbHNlIHsgLy8gdHJ1ZSBiaW5hcnlcbiAgICAgICAgcmVzdWx0QXJyYXlbYnVmZmVySW5kZXgrK10gPSAxO1xuICAgICAgfVxuXG4gICAgICB2YXIgbGVuU3RyID0gYWIuYnl0ZUxlbmd0aC50b1N0cmluZygpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5TdHIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzdWx0QXJyYXlbYnVmZmVySW5kZXgrK10gPSBwYXJzZUludChsZW5TdHJbaV0pO1xuICAgICAgfVxuICAgICAgcmVzdWx0QXJyYXlbYnVmZmVySW5kZXgrK10gPSAyNTU7XG5cbiAgICAgIHZhciB2aWV3ID0gbmV3IFVpbnQ4QXJyYXkoYWIpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2aWV3Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJlc3VsdEFycmF5W2J1ZmZlckluZGV4KytdID0gdmlld1tpXTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBjYWxsYmFjayhyZXN1bHRBcnJheS5idWZmZXIpO1xuICB9KTtcbn07XG5cbi8qKlxuICogRW5jb2RlIGFzIEJsb2JcbiAqL1xuXG5leHBvcnRzLmVuY29kZVBheWxvYWRBc0Jsb2IgPSBmdW5jdGlvbihwYWNrZXRzLCBjYWxsYmFjaykge1xuICBmdW5jdGlvbiBlbmNvZGVPbmUocGFja2V0LCBkb25lQ2FsbGJhY2spIHtcbiAgICBleHBvcnRzLmVuY29kZVBhY2tldChwYWNrZXQsIHRydWUsIHRydWUsIGZ1bmN0aW9uKGVuY29kZWQpIHtcbiAgICAgIHZhciBiaW5hcnlJZGVudGlmaWVyID0gbmV3IFVpbnQ4QXJyYXkoMSk7XG4gICAgICBiaW5hcnlJZGVudGlmaWVyWzBdID0gMTtcbiAgICAgIGlmICh0eXBlb2YgZW5jb2RlZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShlbmNvZGVkLmxlbmd0aCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZW5jb2RlZC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHZpZXdbaV0gPSBlbmNvZGVkLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIH1cbiAgICAgICAgZW5jb2RlZCA9IHZpZXcuYnVmZmVyO1xuICAgICAgICBiaW5hcnlJZGVudGlmaWVyWzBdID0gMDtcbiAgICAgIH1cblxuICAgICAgdmFyIGxlbiA9IChlbmNvZGVkIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpXG4gICAgICAgID8gZW5jb2RlZC5ieXRlTGVuZ3RoXG4gICAgICAgIDogZW5jb2RlZC5zaXplO1xuXG4gICAgICB2YXIgbGVuU3RyID0gbGVuLnRvU3RyaW5nKCk7XG4gICAgICB2YXIgbGVuZ3RoQXJ5ID0gbmV3IFVpbnQ4QXJyYXkobGVuU3RyLmxlbmd0aCArIDEpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5TdHIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGVuZ3RoQXJ5W2ldID0gcGFyc2VJbnQobGVuU3RyW2ldKTtcbiAgICAgIH1cbiAgICAgIGxlbmd0aEFyeVtsZW5TdHIubGVuZ3RoXSA9IDI1NTtcblxuICAgICAgaWYgKEJsb2IpIHtcbiAgICAgICAgdmFyIGJsb2IgPSBuZXcgQmxvYihbYmluYXJ5SWRlbnRpZmllci5idWZmZXIsIGxlbmd0aEFyeS5idWZmZXIsIGVuY29kZWRdKTtcbiAgICAgICAgZG9uZUNhbGxiYWNrKG51bGwsIGJsb2IpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgbWFwKHBhY2tldHMsIGVuY29kZU9uZSwgZnVuY3Rpb24oZXJyLCByZXN1bHRzKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrKG5ldyBCbG9iKHJlc3VsdHMpKTtcbiAgfSk7XG59O1xuXG4vKlxuICogRGVjb2RlcyBkYXRhIHdoZW4gYSBwYXlsb2FkIGlzIG1heWJlIGV4cGVjdGVkLiBTdHJpbmdzIGFyZSBkZWNvZGVkIGJ5XG4gKiBpbnRlcnByZXRpbmcgZWFjaCBieXRlIGFzIGEga2V5IGNvZGUgZm9yIGVudHJpZXMgbWFya2VkIHRvIHN0YXJ0IHdpdGggMC4gU2VlXG4gKiBkZXNjcmlwdGlvbiBvZiBlbmNvZGVQYXlsb2FkQXNCaW5hcnlcbiAqXG4gKiBAcGFyYW0ge0FycmF5QnVmZmVyfSBkYXRhLCBjYWxsYmFjayBtZXRob2RcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5kZWNvZGVQYXlsb2FkQXNCaW5hcnkgPSBmdW5jdGlvbiAoZGF0YSwgYmluYXJ5VHlwZSwgY2FsbGJhY2spIHtcbiAgaWYgKHR5cGVvZiBiaW5hcnlUeXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2FsbGJhY2sgPSBiaW5hcnlUeXBlO1xuICAgIGJpbmFyeVR5cGUgPSBudWxsO1xuICB9XG5cbiAgdmFyIGJ1ZmZlclRhaWwgPSBkYXRhO1xuICB2YXIgYnVmZmVycyA9IFtdO1xuXG4gIHdoaWxlIChidWZmZXJUYWlsLmJ5dGVMZW5ndGggPiAwKSB7XG4gICAgdmFyIHRhaWxBcnJheSA9IG5ldyBVaW50OEFycmF5KGJ1ZmZlclRhaWwpO1xuICAgIHZhciBpc1N0cmluZyA9IHRhaWxBcnJheVswXSA9PT0gMDtcbiAgICB2YXIgbXNnTGVuZ3RoID0gJyc7XG5cbiAgICBmb3IgKHZhciBpID0gMTsgOyBpKyspIHtcbiAgICAgIGlmICh0YWlsQXJyYXlbaV0gPT09IDI1NSkgYnJlYWs7XG5cbiAgICAgIC8vIDMxMCA9IGNoYXIgbGVuZ3RoIG9mIE51bWJlci5NQVhfVkFMVUVcbiAgICAgIGlmIChtc2dMZW5ndGgubGVuZ3RoID4gMzEwKSB7XG4gICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIsIDAsIDEpO1xuICAgICAgfVxuXG4gICAgICBtc2dMZW5ndGggKz0gdGFpbEFycmF5W2ldO1xuICAgIH1cblxuICAgIGJ1ZmZlclRhaWwgPSBzbGljZUJ1ZmZlcihidWZmZXJUYWlsLCAyICsgbXNnTGVuZ3RoLmxlbmd0aCk7XG4gICAgbXNnTGVuZ3RoID0gcGFyc2VJbnQobXNnTGVuZ3RoKTtcblxuICAgIHZhciBtc2cgPSBzbGljZUJ1ZmZlcihidWZmZXJUYWlsLCAwLCBtc2dMZW5ndGgpO1xuICAgIGlmIChpc1N0cmluZykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgbXNnID0gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBuZXcgVWludDhBcnJheShtc2cpKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaVBob25lIFNhZmFyaSBkb2Vzbid0IGxldCB5b3UgYXBwbHkgdG8gdHlwZWQgYXJyYXlzXG4gICAgICAgIHZhciB0eXBlZCA9IG5ldyBVaW50OEFycmF5KG1zZyk7XG4gICAgICAgIG1zZyA9ICcnO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHR5cGVkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgbXNnICs9IFN0cmluZy5mcm9tQ2hhckNvZGUodHlwZWRbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgYnVmZmVycy5wdXNoKG1zZyk7XG4gICAgYnVmZmVyVGFpbCA9IHNsaWNlQnVmZmVyKGJ1ZmZlclRhaWwsIG1zZ0xlbmd0aCk7XG4gIH1cblxuICB2YXIgdG90YWwgPSBidWZmZXJzLmxlbmd0aDtcbiAgYnVmZmVycy5mb3JFYWNoKGZ1bmN0aW9uKGJ1ZmZlciwgaSkge1xuICAgIGNhbGxiYWNrKGV4cG9ydHMuZGVjb2RlUGFja2V0KGJ1ZmZlciwgYmluYXJ5VHlwZSwgdHJ1ZSksIGksIHRvdGFsKTtcbiAgfSk7XG59O1xuIiwiLyoqXG4gKiBUaGlzIGlzIHRoZSB3ZWIgYnJvd3NlciBpbXBsZW1lbnRhdGlvbiBvZiBgZGVidWcoKWAuXG4gKlxuICogRXhwb3NlIGBkZWJ1ZygpYCBhcyB0aGUgbW9kdWxlLlxuICovXG5cbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZGVidWcnKTtcbmV4cG9ydHMubG9nID0gbG9nO1xuZXhwb3J0cy5mb3JtYXRBcmdzID0gZm9ybWF0QXJncztcbmV4cG9ydHMuc2F2ZSA9IHNhdmU7XG5leHBvcnRzLmxvYWQgPSBsb2FkO1xuZXhwb3J0cy51c2VDb2xvcnMgPSB1c2VDb2xvcnM7XG5leHBvcnRzLnN0b3JhZ2UgPSAndW5kZWZpbmVkJyAhPSB0eXBlb2YgY2hyb21lXG4gICAgICAgICAgICAgICAmJiAndW5kZWZpbmVkJyAhPSB0eXBlb2YgY2hyb21lLnN0b3JhZ2VcbiAgICAgICAgICAgICAgICAgID8gY2hyb21lLnN0b3JhZ2UubG9jYWxcbiAgICAgICAgICAgICAgICAgIDogbG9jYWxzdG9yYWdlKCk7XG5cbi8qKlxuICogQ29sb3JzLlxuICovXG5cbmV4cG9ydHMuY29sb3JzID0gW1xuICAnIzAwMDBDQycsICcjMDAwMEZGJywgJyMwMDMzQ0MnLCAnIzAwMzNGRicsICcjMDA2NkNDJywgJyMwMDY2RkYnLCAnIzAwOTlDQycsXG4gICcjMDA5OUZGJywgJyMwMENDMDAnLCAnIzAwQ0MzMycsICcjMDBDQzY2JywgJyMwMENDOTknLCAnIzAwQ0NDQycsICcjMDBDQ0ZGJyxcbiAgJyMzMzAwQ0MnLCAnIzMzMDBGRicsICcjMzMzM0NDJywgJyMzMzMzRkYnLCAnIzMzNjZDQycsICcjMzM2NkZGJywgJyMzMzk5Q0MnLFxuICAnIzMzOTlGRicsICcjMzNDQzAwJywgJyMzM0NDMzMnLCAnIzMzQ0M2NicsICcjMzNDQzk5JywgJyMzM0NDQ0MnLCAnIzMzQ0NGRicsXG4gICcjNjYwMENDJywgJyM2NjAwRkYnLCAnIzY2MzNDQycsICcjNjYzM0ZGJywgJyM2NkNDMDAnLCAnIzY2Q0MzMycsICcjOTkwMENDJyxcbiAgJyM5OTAwRkYnLCAnIzk5MzNDQycsICcjOTkzM0ZGJywgJyM5OUNDMDAnLCAnIzk5Q0MzMycsICcjQ0MwMDAwJywgJyNDQzAwMzMnLFxuICAnI0NDMDA2NicsICcjQ0MwMDk5JywgJyNDQzAwQ0MnLCAnI0NDMDBGRicsICcjQ0MzMzAwJywgJyNDQzMzMzMnLCAnI0NDMzM2NicsXG4gICcjQ0MzMzk5JywgJyNDQzMzQ0MnLCAnI0NDMzNGRicsICcjQ0M2NjAwJywgJyNDQzY2MzMnLCAnI0NDOTkwMCcsICcjQ0M5OTMzJyxcbiAgJyNDQ0NDMDAnLCAnI0NDQ0MzMycsICcjRkYwMDAwJywgJyNGRjAwMzMnLCAnI0ZGMDA2NicsICcjRkYwMDk5JywgJyNGRjAwQ0MnLFxuICAnI0ZGMDBGRicsICcjRkYzMzAwJywgJyNGRjMzMzMnLCAnI0ZGMzM2NicsICcjRkYzMzk5JywgJyNGRjMzQ0MnLCAnI0ZGMzNGRicsXG4gICcjRkY2NjAwJywgJyNGRjY2MzMnLCAnI0ZGOTkwMCcsICcjRkY5OTMzJywgJyNGRkNDMDAnLCAnI0ZGQ0MzMydcbl07XG5cbi8qKlxuICogQ3VycmVudGx5IG9ubHkgV2ViS2l0LWJhc2VkIFdlYiBJbnNwZWN0b3JzLCBGaXJlZm94ID49IHYzMSxcbiAqIGFuZCB0aGUgRmlyZWJ1ZyBleHRlbnNpb24gKGFueSBGaXJlZm94IHZlcnNpb24pIGFyZSBrbm93blxuICogdG8gc3VwcG9ydCBcIiVjXCIgQ1NTIGN1c3RvbWl6YXRpb25zLlxuICpcbiAqIFRPRE86IGFkZCBhIGBsb2NhbFN0b3JhZ2VgIHZhcmlhYmxlIHRvIGV4cGxpY2l0bHkgZW5hYmxlL2Rpc2FibGUgY29sb3JzXG4gKi9cblxuZnVuY3Rpb24gdXNlQ29sb3JzKCkge1xuICAvLyBOQjogSW4gYW4gRWxlY3Ryb24gcHJlbG9hZCBzY3JpcHQsIGRvY3VtZW50IHdpbGwgYmUgZGVmaW5lZCBidXQgbm90IGZ1bGx5XG4gIC8vIGluaXRpYWxpemVkLiBTaW5jZSB3ZSBrbm93IHdlJ3JlIGluIENocm9tZSwgd2UnbGwganVzdCBkZXRlY3QgdGhpcyBjYXNlXG4gIC8vIGV4cGxpY2l0bHlcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5wcm9jZXNzICYmIHdpbmRvdy5wcm9jZXNzLnR5cGUgPT09ICdyZW5kZXJlcicpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8vIEludGVybmV0IEV4cGxvcmVyIGFuZCBFZGdlIGRvIG5vdCBzdXBwb3J0IGNvbG9ycy5cbiAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC8oZWRnZXx0cmlkZW50KVxcLyhcXGQrKS8pKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gaXMgd2Via2l0PyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xNjQ1OTYwNi8zNzY3NzNcbiAgLy8gZG9jdW1lbnQgaXMgdW5kZWZpbmVkIGluIHJlYWN0LW5hdGl2ZTogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0LW5hdGl2ZS9wdWxsLzE2MzJcbiAgcmV0dXJuICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLldlYmtpdEFwcGVhcmFuY2UpIHx8XG4gICAgLy8gaXMgZmlyZWJ1Zz8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMzk4MTIwLzM3Njc3M1xuICAgICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuY29uc29sZSAmJiAod2luZG93LmNvbnNvbGUuZmlyZWJ1ZyB8fCAod2luZG93LmNvbnNvbGUuZXhjZXB0aW9uICYmIHdpbmRvdy5jb25zb2xlLnRhYmxlKSkpIHx8XG4gICAgLy8gaXMgZmlyZWZveCA+PSB2MzE/XG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9Ub29scy9XZWJfQ29uc29sZSNTdHlsaW5nX21lc3NhZ2VzXG4gICAgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC9maXJlZm94XFwvKFxcZCspLykgJiYgcGFyc2VJbnQoUmVnRXhwLiQxLCAxMCkgPj0gMzEpIHx8XG4gICAgLy8gZG91YmxlIGNoZWNrIHdlYmtpdCBpbiB1c2VyQWdlbnQganVzdCBpbiBjYXNlIHdlIGFyZSBpbiBhIHdvcmtlclxuICAgICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvYXBwbGV3ZWJraXRcXC8oXFxkKykvKSk7XG59XG5cbi8qKlxuICogTWFwICVqIHRvIGBKU09OLnN0cmluZ2lmeSgpYCwgc2luY2Ugbm8gV2ViIEluc3BlY3RvcnMgZG8gdGhhdCBieSBkZWZhdWx0LlxuICovXG5cbmV4cG9ydHMuZm9ybWF0dGVycy5qID0gZnVuY3Rpb24odikge1xuICB0cnkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh2KTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmV0dXJuICdbVW5leHBlY3RlZEpTT05QYXJzZUVycm9yXTogJyArIGVyci5tZXNzYWdlO1xuICB9XG59O1xuXG5cbi8qKlxuICogQ29sb3JpemUgbG9nIGFyZ3VtZW50cyBpZiBlbmFibGVkLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZm9ybWF0QXJncyhhcmdzKSB7XG4gIHZhciB1c2VDb2xvcnMgPSB0aGlzLnVzZUNvbG9ycztcblxuICBhcmdzWzBdID0gKHVzZUNvbG9ycyA/ICclYycgOiAnJylcbiAgICArIHRoaXMubmFtZXNwYWNlXG4gICAgKyAodXNlQ29sb3JzID8gJyAlYycgOiAnICcpXG4gICAgKyBhcmdzWzBdXG4gICAgKyAodXNlQ29sb3JzID8gJyVjICcgOiAnICcpXG4gICAgKyAnKycgKyBleHBvcnRzLmh1bWFuaXplKHRoaXMuZGlmZik7XG5cbiAgaWYgKCF1c2VDb2xvcnMpIHJldHVybjtcblxuICB2YXIgYyA9ICdjb2xvcjogJyArIHRoaXMuY29sb3I7XG4gIGFyZ3Muc3BsaWNlKDEsIDAsIGMsICdjb2xvcjogaW5oZXJpdCcpXG5cbiAgLy8gdGhlIGZpbmFsIFwiJWNcIiBpcyBzb21ld2hhdCB0cmlja3ksIGJlY2F1c2UgdGhlcmUgY291bGQgYmUgb3RoZXJcbiAgLy8gYXJndW1lbnRzIHBhc3NlZCBlaXRoZXIgYmVmb3JlIG9yIGFmdGVyIHRoZSAlYywgc28gd2UgbmVlZCB0b1xuICAvLyBmaWd1cmUgb3V0IHRoZSBjb3JyZWN0IGluZGV4IHRvIGluc2VydCB0aGUgQ1NTIGludG9cbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxhc3RDID0gMDtcbiAgYXJnc1swXS5yZXBsYWNlKC8lW2EtekEtWiVdL2csIGZ1bmN0aW9uKG1hdGNoKSB7XG4gICAgaWYgKCclJScgPT09IG1hdGNoKSByZXR1cm47XG4gICAgaW5kZXgrKztcbiAgICBpZiAoJyVjJyA9PT0gbWF0Y2gpIHtcbiAgICAgIC8vIHdlIG9ubHkgYXJlIGludGVyZXN0ZWQgaW4gdGhlICpsYXN0KiAlY1xuICAgICAgLy8gKHRoZSB1c2VyIG1heSBoYXZlIHByb3ZpZGVkIHRoZWlyIG93bilcbiAgICAgIGxhc3RDID0gaW5kZXg7XG4gICAgfVxuICB9KTtcblxuICBhcmdzLnNwbGljZShsYXN0QywgMCwgYyk7XG59XG5cbi8qKlxuICogSW52b2tlcyBgY29uc29sZS5sb2coKWAgd2hlbiBhdmFpbGFibGUuXG4gKiBOby1vcCB3aGVuIGBjb25zb2xlLmxvZ2AgaXMgbm90IGEgXCJmdW5jdGlvblwiLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gbG9nKCkge1xuICAvLyB0aGlzIGhhY2tlcnkgaXMgcmVxdWlyZWQgZm9yIElFOC85LCB3aGVyZVxuICAvLyB0aGUgYGNvbnNvbGUubG9nYCBmdW5jdGlvbiBkb2Vzbid0IGhhdmUgJ2FwcGx5J1xuICByZXR1cm4gJ29iamVjdCcgPT09IHR5cGVvZiBjb25zb2xlXG4gICAgJiYgY29uc29sZS5sb2dcbiAgICAmJiBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuY2FsbChjb25zb2xlLmxvZywgY29uc29sZSwgYXJndW1lbnRzKTtcbn1cblxuLyoqXG4gKiBTYXZlIGBuYW1lc3BhY2VzYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gc2F2ZShuYW1lc3BhY2VzKSB7XG4gIHRyeSB7XG4gICAgaWYgKG51bGwgPT0gbmFtZXNwYWNlcykge1xuICAgICAgZXhwb3J0cy5zdG9yYWdlLnJlbW92ZUl0ZW0oJ2RlYnVnJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4cG9ydHMuc3RvcmFnZS5kZWJ1ZyA9IG5hbWVzcGFjZXM7XG4gICAgfVxuICB9IGNhdGNoKGUpIHt9XG59XG5cbi8qKlxuICogTG9hZCBgbmFtZXNwYWNlc2AuXG4gKlxuICogQHJldHVybiB7U3RyaW5nfSByZXR1cm5zIHRoZSBwcmV2aW91c2x5IHBlcnNpc3RlZCBkZWJ1ZyBtb2Rlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gbG9hZCgpIHtcbiAgdmFyIHI7XG4gIHRyeSB7XG4gICAgciA9IGV4cG9ydHMuc3RvcmFnZS5kZWJ1ZztcbiAgfSBjYXRjaChlKSB7fVxuXG4gIC8vIElmIGRlYnVnIGlzbid0IHNldCBpbiBMUywgYW5kIHdlJ3JlIGluIEVsZWN0cm9uLCB0cnkgdG8gbG9hZCAkREVCVUdcbiAgaWYgKCFyICYmIHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiAnZW52JyBpbiBwcm9jZXNzKSB7XG4gICAgciA9IHByb2Nlc3MuZW52LkRFQlVHO1xuICB9XG5cbiAgcmV0dXJuIHI7XG59XG5cbi8qKlxuICogRW5hYmxlIG5hbWVzcGFjZXMgbGlzdGVkIGluIGBsb2NhbFN0b3JhZ2UuZGVidWdgIGluaXRpYWxseS5cbiAqL1xuXG5leHBvcnRzLmVuYWJsZShsb2FkKCkpO1xuXG4vKipcbiAqIExvY2Fsc3RvcmFnZSBhdHRlbXB0cyB0byByZXR1cm4gdGhlIGxvY2Fsc3RvcmFnZS5cbiAqXG4gKiBUaGlzIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIHNhZmFyaSB0aHJvd3NcbiAqIHdoZW4gYSB1c2VyIGRpc2FibGVzIGNvb2tpZXMvbG9jYWxzdG9yYWdlXG4gKiBhbmQgeW91IGF0dGVtcHQgdG8gYWNjZXNzIGl0LlxuICpcbiAqIEByZXR1cm4ge0xvY2FsU3RvcmFnZX1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGxvY2Fsc3RvcmFnZSgpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gd2luZG93LmxvY2FsU3RvcmFnZTtcbiAgfSBjYXRjaCAoZSkge31cbn1cbiIsIi8qKlxyXG4gKiBDb21waWxlcyBhIHF1ZXJ5c3RyaW5nXHJcbiAqIFJldHVybnMgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBvYmplY3RcclxuICpcclxuICogQHBhcmFtIHtPYmplY3R9XHJcbiAqIEBhcGkgcHJpdmF0ZVxyXG4gKi9cclxuXHJcbmV4cG9ydHMuZW5jb2RlID0gZnVuY3Rpb24gKG9iaikge1xyXG4gIHZhciBzdHIgPSAnJztcclxuXHJcbiAgZm9yICh2YXIgaSBpbiBvYmopIHtcclxuICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoaSkpIHtcclxuICAgICAgaWYgKHN0ci5sZW5ndGgpIHN0ciArPSAnJic7XHJcbiAgICAgIHN0ciArPSBlbmNvZGVVUklDb21wb25lbnQoaSkgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQob2JqW2ldKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiBzdHI7XHJcbn07XHJcblxyXG4vKipcclxuICogUGFyc2VzIGEgc2ltcGxlIHF1ZXJ5c3RyaW5nIGludG8gYW4gb2JqZWN0XHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBxc1xyXG4gKiBAYXBpIHByaXZhdGVcclxuICovXHJcblxyXG5leHBvcnRzLmRlY29kZSA9IGZ1bmN0aW9uKHFzKXtcclxuICB2YXIgcXJ5ID0ge307XHJcbiAgdmFyIHBhaXJzID0gcXMuc3BsaXQoJyYnKTtcclxuICBmb3IgKHZhciBpID0gMCwgbCA9IHBhaXJzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG4gICAgdmFyIHBhaXIgPSBwYWlyc1tpXS5zcGxpdCgnPScpO1xyXG4gICAgcXJ5W2RlY29kZVVSSUNvbXBvbmVudChwYWlyWzBdKV0gPSBkZWNvZGVVUklDb21wb25lbnQocGFpclsxXSk7XHJcbiAgfVxyXG4gIHJldHVybiBxcnk7XHJcbn07XHJcbiIsIlxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihhLCBiKXtcbiAgdmFyIGZuID0gZnVuY3Rpb24oKXt9O1xuICBmbi5wcm90b3R5cGUgPSBiLnByb3RvdHlwZTtcbiAgYS5wcm90b3R5cGUgPSBuZXcgZm47XG4gIGEucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gYTtcbn07IiwiLyoqXG4gKiBUaGlzIGlzIHRoZSB3ZWIgYnJvd3NlciBpbXBsZW1lbnRhdGlvbiBvZiBgZGVidWcoKWAuXG4gKlxuICogRXhwb3NlIGBkZWJ1ZygpYCBhcyB0aGUgbW9kdWxlLlxuICovXG5cbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZGVidWcnKTtcbmV4cG9ydHMubG9nID0gbG9nO1xuZXhwb3J0cy5mb3JtYXRBcmdzID0gZm9ybWF0QXJncztcbmV4cG9ydHMuc2F2ZSA9IHNhdmU7XG5leHBvcnRzLmxvYWQgPSBsb2FkO1xuZXhwb3J0cy51c2VDb2xvcnMgPSB1c2VDb2xvcnM7XG5leHBvcnRzLnN0b3JhZ2UgPSAndW5kZWZpbmVkJyAhPSB0eXBlb2YgY2hyb21lXG4gICAgICAgICAgICAgICAmJiAndW5kZWZpbmVkJyAhPSB0eXBlb2YgY2hyb21lLnN0b3JhZ2VcbiAgICAgICAgICAgICAgICAgID8gY2hyb21lLnN0b3JhZ2UubG9jYWxcbiAgICAgICAgICAgICAgICAgIDogbG9jYWxzdG9yYWdlKCk7XG5cbi8qKlxuICogQ29sb3JzLlxuICovXG5cbmV4cG9ydHMuY29sb3JzID0gW1xuICAnIzAwMDBDQycsICcjMDAwMEZGJywgJyMwMDMzQ0MnLCAnIzAwMzNGRicsICcjMDA2NkNDJywgJyMwMDY2RkYnLCAnIzAwOTlDQycsXG4gICcjMDA5OUZGJywgJyMwMENDMDAnLCAnIzAwQ0MzMycsICcjMDBDQzY2JywgJyMwMENDOTknLCAnIzAwQ0NDQycsICcjMDBDQ0ZGJyxcbiAgJyMzMzAwQ0MnLCAnIzMzMDBGRicsICcjMzMzM0NDJywgJyMzMzMzRkYnLCAnIzMzNjZDQycsICcjMzM2NkZGJywgJyMzMzk5Q0MnLFxuICAnIzMzOTlGRicsICcjMzNDQzAwJywgJyMzM0NDMzMnLCAnIzMzQ0M2NicsICcjMzNDQzk5JywgJyMzM0NDQ0MnLCAnIzMzQ0NGRicsXG4gICcjNjYwMENDJywgJyM2NjAwRkYnLCAnIzY2MzNDQycsICcjNjYzM0ZGJywgJyM2NkNDMDAnLCAnIzY2Q0MzMycsICcjOTkwMENDJyxcbiAgJyM5OTAwRkYnLCAnIzk5MzNDQycsICcjOTkzM0ZGJywgJyM5OUNDMDAnLCAnIzk5Q0MzMycsICcjQ0MwMDAwJywgJyNDQzAwMzMnLFxuICAnI0NDMDA2NicsICcjQ0MwMDk5JywgJyNDQzAwQ0MnLCAnI0NDMDBGRicsICcjQ0MzMzAwJywgJyNDQzMzMzMnLCAnI0NDMzM2NicsXG4gICcjQ0MzMzk5JywgJyNDQzMzQ0MnLCAnI0NDMzNGRicsICcjQ0M2NjAwJywgJyNDQzY2MzMnLCAnI0NDOTkwMCcsICcjQ0M5OTMzJyxcbiAgJyNDQ0NDMDAnLCAnI0NDQ0MzMycsICcjRkYwMDAwJywgJyNGRjAwMzMnLCAnI0ZGMDA2NicsICcjRkYwMDk5JywgJyNGRjAwQ0MnLFxuICAnI0ZGMDBGRicsICcjRkYzMzAwJywgJyNGRjMzMzMnLCAnI0ZGMzM2NicsICcjRkYzMzk5JywgJyNGRjMzQ0MnLCAnI0ZGMzNGRicsXG4gICcjRkY2NjAwJywgJyNGRjY2MzMnLCAnI0ZGOTkwMCcsICcjRkY5OTMzJywgJyNGRkNDMDAnLCAnI0ZGQ0MzMydcbl07XG5cbi8qKlxuICogQ3VycmVudGx5IG9ubHkgV2ViS2l0LWJhc2VkIFdlYiBJbnNwZWN0b3JzLCBGaXJlZm94ID49IHYzMSxcbiAqIGFuZCB0aGUgRmlyZWJ1ZyBleHRlbnNpb24gKGFueSBGaXJlZm94IHZlcnNpb24pIGFyZSBrbm93blxuICogdG8gc3VwcG9ydCBcIiVjXCIgQ1NTIGN1c3RvbWl6YXRpb25zLlxuICpcbiAqIFRPRE86IGFkZCBhIGBsb2NhbFN0b3JhZ2VgIHZhcmlhYmxlIHRvIGV4cGxpY2l0bHkgZW5hYmxlL2Rpc2FibGUgY29sb3JzXG4gKi9cblxuZnVuY3Rpb24gdXNlQ29sb3JzKCkge1xuICAvLyBOQjogSW4gYW4gRWxlY3Ryb24gcHJlbG9hZCBzY3JpcHQsIGRvY3VtZW50IHdpbGwgYmUgZGVmaW5lZCBidXQgbm90IGZ1bGx5XG4gIC8vIGluaXRpYWxpemVkLiBTaW5jZSB3ZSBrbm93IHdlJ3JlIGluIENocm9tZSwgd2UnbGwganVzdCBkZXRlY3QgdGhpcyBjYXNlXG4gIC8vIGV4cGxpY2l0bHlcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5wcm9jZXNzICYmIHdpbmRvdy5wcm9jZXNzLnR5cGUgPT09ICdyZW5kZXJlcicpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8vIEludGVybmV0IEV4cGxvcmVyIGFuZCBFZGdlIGRvIG5vdCBzdXBwb3J0IGNvbG9ycy5cbiAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC8oZWRnZXx0cmlkZW50KVxcLyhcXGQrKS8pKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gaXMgd2Via2l0PyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xNjQ1OTYwNi8zNzY3NzNcbiAgLy8gZG9jdW1lbnQgaXMgdW5kZWZpbmVkIGluIHJlYWN0LW5hdGl2ZTogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0LW5hdGl2ZS9wdWxsLzE2MzJcbiAgcmV0dXJuICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLldlYmtpdEFwcGVhcmFuY2UpIHx8XG4gICAgLy8gaXMgZmlyZWJ1Zz8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMzk4MTIwLzM3Njc3M1xuICAgICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuY29uc29sZSAmJiAod2luZG93LmNvbnNvbGUuZmlyZWJ1ZyB8fCAod2luZG93LmNvbnNvbGUuZXhjZXB0aW9uICYmIHdpbmRvdy5jb25zb2xlLnRhYmxlKSkpIHx8XG4gICAgLy8gaXMgZmlyZWZveCA+PSB2MzE/XG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9Ub29scy9XZWJfQ29uc29sZSNTdHlsaW5nX21lc3NhZ2VzXG4gICAgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC9maXJlZm94XFwvKFxcZCspLykgJiYgcGFyc2VJbnQoUmVnRXhwLiQxLCAxMCkgPj0gMzEpIHx8XG4gICAgLy8gZG91YmxlIGNoZWNrIHdlYmtpdCBpbiB1c2VyQWdlbnQganVzdCBpbiBjYXNlIHdlIGFyZSBpbiBhIHdvcmtlclxuICAgICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvYXBwbGV3ZWJraXRcXC8oXFxkKykvKSk7XG59XG5cbi8qKlxuICogTWFwICVqIHRvIGBKU09OLnN0cmluZ2lmeSgpYCwgc2luY2Ugbm8gV2ViIEluc3BlY3RvcnMgZG8gdGhhdCBieSBkZWZhdWx0LlxuICovXG5cbmV4cG9ydHMuZm9ybWF0dGVycy5qID0gZnVuY3Rpb24odikge1xuICB0cnkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh2KTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmV0dXJuICdbVW5leHBlY3RlZEpTT05QYXJzZUVycm9yXTogJyArIGVyci5tZXNzYWdlO1xuICB9XG59O1xuXG5cbi8qKlxuICogQ29sb3JpemUgbG9nIGFyZ3VtZW50cyBpZiBlbmFibGVkLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZm9ybWF0QXJncyhhcmdzKSB7XG4gIHZhciB1c2VDb2xvcnMgPSB0aGlzLnVzZUNvbG9ycztcblxuICBhcmdzWzBdID0gKHVzZUNvbG9ycyA/ICclYycgOiAnJylcbiAgICArIHRoaXMubmFtZXNwYWNlXG4gICAgKyAodXNlQ29sb3JzID8gJyAlYycgOiAnICcpXG4gICAgKyBhcmdzWzBdXG4gICAgKyAodXNlQ29sb3JzID8gJyVjICcgOiAnICcpXG4gICAgKyAnKycgKyBleHBvcnRzLmh1bWFuaXplKHRoaXMuZGlmZik7XG5cbiAgaWYgKCF1c2VDb2xvcnMpIHJldHVybjtcblxuICB2YXIgYyA9ICdjb2xvcjogJyArIHRoaXMuY29sb3I7XG4gIGFyZ3Muc3BsaWNlKDEsIDAsIGMsICdjb2xvcjogaW5oZXJpdCcpXG5cbiAgLy8gdGhlIGZpbmFsIFwiJWNcIiBpcyBzb21ld2hhdCB0cmlja3ksIGJlY2F1c2UgdGhlcmUgY291bGQgYmUgb3RoZXJcbiAgLy8gYXJndW1lbnRzIHBhc3NlZCBlaXRoZXIgYmVmb3JlIG9yIGFmdGVyIHRoZSAlYywgc28gd2UgbmVlZCB0b1xuICAvLyBmaWd1cmUgb3V0IHRoZSBjb3JyZWN0IGluZGV4IHRvIGluc2VydCB0aGUgQ1NTIGludG9cbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxhc3RDID0gMDtcbiAgYXJnc1swXS5yZXBsYWNlKC8lW2EtekEtWiVdL2csIGZ1bmN0aW9uKG1hdGNoKSB7XG4gICAgaWYgKCclJScgPT09IG1hdGNoKSByZXR1cm47XG4gICAgaW5kZXgrKztcbiAgICBpZiAoJyVjJyA9PT0gbWF0Y2gpIHtcbiAgICAgIC8vIHdlIG9ubHkgYXJlIGludGVyZXN0ZWQgaW4gdGhlICpsYXN0KiAlY1xuICAgICAgLy8gKHRoZSB1c2VyIG1heSBoYXZlIHByb3ZpZGVkIHRoZWlyIG93bilcbiAgICAgIGxhc3RDID0gaW5kZXg7XG4gICAgfVxuICB9KTtcblxuICBhcmdzLnNwbGljZShsYXN0QywgMCwgYyk7XG59XG5cbi8qKlxuICogSW52b2tlcyBgY29uc29sZS5sb2coKWAgd2hlbiBhdmFpbGFibGUuXG4gKiBOby1vcCB3aGVuIGBjb25zb2xlLmxvZ2AgaXMgbm90IGEgXCJmdW5jdGlvblwiLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gbG9nKCkge1xuICAvLyB0aGlzIGhhY2tlcnkgaXMgcmVxdWlyZWQgZm9yIElFOC85LCB3aGVyZVxuICAvLyB0aGUgYGNvbnNvbGUubG9nYCBmdW5jdGlvbiBkb2Vzbid0IGhhdmUgJ2FwcGx5J1xuICByZXR1cm4gJ29iamVjdCcgPT09IHR5cGVvZiBjb25zb2xlXG4gICAgJiYgY29uc29sZS5sb2dcbiAgICAmJiBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuY2FsbChjb25zb2xlLmxvZywgY29uc29sZSwgYXJndW1lbnRzKTtcbn1cblxuLyoqXG4gKiBTYXZlIGBuYW1lc3BhY2VzYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gc2F2ZShuYW1lc3BhY2VzKSB7XG4gIHRyeSB7XG4gICAgaWYgKG51bGwgPT0gbmFtZXNwYWNlcykge1xuICAgICAgZXhwb3J0cy5zdG9yYWdlLnJlbW92ZUl0ZW0oJ2RlYnVnJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4cG9ydHMuc3RvcmFnZS5kZWJ1ZyA9IG5hbWVzcGFjZXM7XG4gICAgfVxuICB9IGNhdGNoKGUpIHt9XG59XG5cbi8qKlxuICogTG9hZCBgbmFtZXNwYWNlc2AuXG4gKlxuICogQHJldHVybiB7U3RyaW5nfSByZXR1cm5zIHRoZSBwcmV2aW91c2x5IHBlcnNpc3RlZCBkZWJ1ZyBtb2Rlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gbG9hZCgpIHtcbiAgdmFyIHI7XG4gIHRyeSB7XG4gICAgciA9IGV4cG9ydHMuc3RvcmFnZS5kZWJ1ZztcbiAgfSBjYXRjaChlKSB7fVxuXG4gIC8vIElmIGRlYnVnIGlzbid0IHNldCBpbiBMUywgYW5kIHdlJ3JlIGluIEVsZWN0cm9uLCB0cnkgdG8gbG9hZCAkREVCVUdcbiAgaWYgKCFyICYmIHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiAnZW52JyBpbiBwcm9jZXNzKSB7XG4gICAgciA9IHByb2Nlc3MuZW52LkRFQlVHO1xuICB9XG5cbiAgcmV0dXJuIHI7XG59XG5cbi8qKlxuICogRW5hYmxlIG5hbWVzcGFjZXMgbGlzdGVkIGluIGBsb2NhbFN0b3JhZ2UuZGVidWdgIGluaXRpYWxseS5cbiAqL1xuXG5leHBvcnRzLmVuYWJsZShsb2FkKCkpO1xuXG4vKipcbiAqIExvY2Fsc3RvcmFnZSBhdHRlbXB0cyB0byByZXR1cm4gdGhlIGxvY2Fsc3RvcmFnZS5cbiAqXG4gKiBUaGlzIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIHNhZmFyaSB0aHJvd3NcbiAqIHdoZW4gYSB1c2VyIGRpc2FibGVzIGNvb2tpZXMvbG9jYWxzdG9yYWdlXG4gKiBhbmQgeW91IGF0dGVtcHQgdG8gYWNjZXNzIGl0LlxuICpcbiAqIEByZXR1cm4ge0xvY2FsU3RvcmFnZX1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGxvY2Fsc3RvcmFnZSgpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gd2luZG93LmxvY2FsU3RvcmFnZTtcbiAgfSBjYXRjaCAoZSkge31cbn1cbiIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCIvKipcbiAqIEhlbHBlcnMuXG4gKi9cblxudmFyIHMgPSAxMDAwO1xudmFyIG0gPSBzICogNjA7XG52YXIgaCA9IG0gKiA2MDtcbnZhciBkID0gaCAqIDI0O1xudmFyIHkgPSBkICogMzY1LjI1O1xuXG4vKipcbiAqIFBhcnNlIG9yIGZvcm1hdCB0aGUgZ2l2ZW4gYHZhbGAuXG4gKlxuICogT3B0aW9uczpcbiAqXG4gKiAgLSBgbG9uZ2AgdmVyYm9zZSBmb3JtYXR0aW5nIFtmYWxzZV1cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ9IHZhbFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICogQHRocm93cyB7RXJyb3J9IHRocm93IGFuIGVycm9yIGlmIHZhbCBpcyBub3QgYSBub24tZW1wdHkgc3RyaW5nIG9yIGEgbnVtYmVyXG4gKiBAcmV0dXJuIHtTdHJpbmd8TnVtYmVyfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHZhbCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsO1xuICBpZiAodHlwZSA9PT0gJ3N0cmluZycgJiYgdmFsLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gcGFyc2UodmFsKTtcbiAgfSBlbHNlIGlmICh0eXBlID09PSAnbnVtYmVyJyAmJiBpc05hTih2YWwpID09PSBmYWxzZSkge1xuICAgIHJldHVybiBvcHRpb25zLmxvbmcgPyBmbXRMb25nKHZhbCkgOiBmbXRTaG9ydCh2YWwpO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcihcbiAgICAndmFsIGlzIG5vdCBhIG5vbi1lbXB0eSBzdHJpbmcgb3IgYSB2YWxpZCBudW1iZXIuIHZhbD0nICtcbiAgICAgIEpTT04uc3RyaW5naWZ5KHZhbClcbiAgKTtcbn07XG5cbi8qKlxuICogUGFyc2UgdGhlIGdpdmVuIGBzdHJgIGFuZCByZXR1cm4gbWlsbGlzZWNvbmRzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHBhcnNlKHN0cikge1xuICBzdHIgPSBTdHJpbmcoc3RyKTtcbiAgaWYgKHN0ci5sZW5ndGggPiAxMDApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG1hdGNoID0gL14oKD86XFxkKyk/XFwuP1xcZCspICoobWlsbGlzZWNvbmRzP3xtc2Vjcz98bXN8c2Vjb25kcz98c2Vjcz98c3xtaW51dGVzP3xtaW5zP3xtfGhvdXJzP3xocnM/fGh8ZGF5cz98ZHx5ZWFycz98eXJzP3x5KT8kL2kuZXhlYyhcbiAgICBzdHJcbiAgKTtcbiAgaWYgKCFtYXRjaCkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbiA9IHBhcnNlRmxvYXQobWF0Y2hbMV0pO1xuICB2YXIgdHlwZSA9IChtYXRjaFsyXSB8fCAnbXMnKS50b0xvd2VyQ2FzZSgpO1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICd5ZWFycyc6XG4gICAgY2FzZSAneWVhcic6XG4gICAgY2FzZSAneXJzJzpcbiAgICBjYXNlICd5cic6XG4gICAgY2FzZSAneSc6XG4gICAgICByZXR1cm4gbiAqIHk7XG4gICAgY2FzZSAnZGF5cyc6XG4gICAgY2FzZSAnZGF5JzpcbiAgICBjYXNlICdkJzpcbiAgICAgIHJldHVybiBuICogZDtcbiAgICBjYXNlICdob3Vycyc6XG4gICAgY2FzZSAnaG91cic6XG4gICAgY2FzZSAnaHJzJzpcbiAgICBjYXNlICdocic6XG4gICAgY2FzZSAnaCc6XG4gICAgICByZXR1cm4gbiAqIGg7XG4gICAgY2FzZSAnbWludXRlcyc6XG4gICAgY2FzZSAnbWludXRlJzpcbiAgICBjYXNlICdtaW5zJzpcbiAgICBjYXNlICdtaW4nOlxuICAgIGNhc2UgJ20nOlxuICAgICAgcmV0dXJuIG4gKiBtO1xuICAgIGNhc2UgJ3NlY29uZHMnOlxuICAgIGNhc2UgJ3NlY29uZCc6XG4gICAgY2FzZSAnc2Vjcyc6XG4gICAgY2FzZSAnc2VjJzpcbiAgICBjYXNlICdzJzpcbiAgICAgIHJldHVybiBuICogcztcbiAgICBjYXNlICdtaWxsaXNlY29uZHMnOlxuICAgIGNhc2UgJ21pbGxpc2Vjb25kJzpcbiAgICBjYXNlICdtc2Vjcyc6XG4gICAgY2FzZSAnbXNlYyc6XG4gICAgY2FzZSAnbXMnOlxuICAgICAgcmV0dXJuIG47XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuLyoqXG4gKiBTaG9ydCBmb3JtYXQgZm9yIGBtc2AuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1zXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBmbXRTaG9ydChtcykge1xuICBpZiAobXMgPj0gZCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gZCkgKyAnZCc7XG4gIH1cbiAgaWYgKG1zID49IGgpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIGgpICsgJ2gnO1xuICB9XG4gIGlmIChtcyA+PSBtKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBtKSArICdtJztcbiAgfVxuICBpZiAobXMgPj0gcykge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gcykgKyAncyc7XG4gIH1cbiAgcmV0dXJuIG1zICsgJ21zJztcbn1cblxuLyoqXG4gKiBMb25nIGZvcm1hdCBmb3IgYG1zYC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbXNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGZtdExvbmcobXMpIHtcbiAgcmV0dXJuIHBsdXJhbChtcywgZCwgJ2RheScpIHx8XG4gICAgcGx1cmFsKG1zLCBoLCAnaG91cicpIHx8XG4gICAgcGx1cmFsKG1zLCBtLCAnbWludXRlJykgfHxcbiAgICBwbHVyYWwobXMsIHMsICdzZWNvbmQnKSB8fFxuICAgIG1zICsgJyBtcyc7XG59XG5cbi8qKlxuICogUGx1cmFsaXphdGlvbiBoZWxwZXIuXG4gKi9cblxuZnVuY3Rpb24gcGx1cmFsKG1zLCBuLCBuYW1lKSB7XG4gIGlmIChtcyA8IG4pIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKG1zIDwgbiAqIDEuNSkge1xuICAgIHJldHVybiBNYXRoLmZsb29yKG1zIC8gbikgKyAnICcgKyBuYW1lO1xuICB9XG4gIHJldHVybiBNYXRoLmNlaWwobXMgLyBuKSArICcgJyArIG5hbWUgKyAncyc7XG59XG4iLCJcbi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdzb2NrZXQuaW8tcGFyc2VyJyk7XG52YXIgRW1pdHRlciA9IHJlcXVpcmUoJ2NvbXBvbmVudC1lbWl0dGVyJyk7XG52YXIgYmluYXJ5ID0gcmVxdWlyZSgnLi9iaW5hcnknKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpO1xudmFyIGlzQnVmID0gcmVxdWlyZSgnLi9pcy1idWZmZXInKTtcblxuLyoqXG4gKiBQcm90b2NvbCB2ZXJzaW9uLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5wcm90b2NvbCA9IDQ7XG5cbi8qKlxuICogUGFja2V0IHR5cGVzLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy50eXBlcyA9IFtcbiAgJ0NPTk5FQ1QnLFxuICAnRElTQ09OTkVDVCcsXG4gICdFVkVOVCcsXG4gICdBQ0snLFxuICAnRVJST1InLFxuICAnQklOQVJZX0VWRU5UJyxcbiAgJ0JJTkFSWV9BQ0snXG5dO1xuXG4vKipcbiAqIFBhY2tldCB0eXBlIGBjb25uZWN0YC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuQ09OTkVDVCA9IDA7XG5cbi8qKlxuICogUGFja2V0IHR5cGUgYGRpc2Nvbm5lY3RgLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5ESVNDT05ORUNUID0gMTtcblxuLyoqXG4gKiBQYWNrZXQgdHlwZSBgZXZlbnRgLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5FVkVOVCA9IDI7XG5cbi8qKlxuICogUGFja2V0IHR5cGUgYGFja2AuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLkFDSyA9IDM7XG5cbi8qKlxuICogUGFja2V0IHR5cGUgYGVycm9yYC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuRVJST1IgPSA0O1xuXG4vKipcbiAqIFBhY2tldCB0eXBlICdiaW5hcnkgZXZlbnQnXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLkJJTkFSWV9FVkVOVCA9IDU7XG5cbi8qKlxuICogUGFja2V0IHR5cGUgYGJpbmFyeSBhY2tgLiBGb3IgYWNrcyB3aXRoIGJpbmFyeSBhcmd1bWVudHMuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLkJJTkFSWV9BQ0sgPSA2O1xuXG4vKipcbiAqIEVuY29kZXIgY29uc3RydWN0b3IuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLkVuY29kZXIgPSBFbmNvZGVyO1xuXG4vKipcbiAqIERlY29kZXIgY29uc3RydWN0b3IuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLkRlY29kZXIgPSBEZWNvZGVyO1xuXG4vKipcbiAqIEEgc29ja2V0LmlvIEVuY29kZXIgaW5zdGFuY2VcbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIEVuY29kZXIoKSB7fVxuXG52YXIgRVJST1JfUEFDS0VUID0gZXhwb3J0cy5FUlJPUiArICdcImVuY29kZSBlcnJvclwiJztcblxuLyoqXG4gKiBFbmNvZGUgYSBwYWNrZXQgYXMgYSBzaW5nbGUgc3RyaW5nIGlmIG5vbi1iaW5hcnksIG9yIGFzIGFcbiAqIGJ1ZmZlciBzZXF1ZW5jZSwgZGVwZW5kaW5nIG9uIHBhY2tldCB0eXBlLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmogLSBwYWNrZXQgb2JqZWN0XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayAtIGZ1bmN0aW9uIHRvIGhhbmRsZSBlbmNvZGluZ3MgKGxpa2VseSBlbmdpbmUud3JpdGUpXG4gKiBAcmV0dXJuIENhbGxzIGNhbGxiYWNrIHdpdGggQXJyYXkgb2YgZW5jb2RpbmdzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkVuY29kZXIucHJvdG90eXBlLmVuY29kZSA9IGZ1bmN0aW9uKG9iaiwgY2FsbGJhY2spe1xuICBkZWJ1ZygnZW5jb2RpbmcgcGFja2V0ICVqJywgb2JqKTtcblxuICBpZiAoZXhwb3J0cy5CSU5BUllfRVZFTlQgPT09IG9iai50eXBlIHx8IGV4cG9ydHMuQklOQVJZX0FDSyA9PT0gb2JqLnR5cGUpIHtcbiAgICBlbmNvZGVBc0JpbmFyeShvYmosIGNhbGxiYWNrKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgZW5jb2RpbmcgPSBlbmNvZGVBc1N0cmluZyhvYmopO1xuICAgIGNhbGxiYWNrKFtlbmNvZGluZ10pO1xuICB9XG59O1xuXG4vKipcbiAqIEVuY29kZSBwYWNrZXQgYXMgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXRcbiAqIEByZXR1cm4ge1N0cmluZ30gZW5jb2RlZFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZW5jb2RlQXNTdHJpbmcob2JqKSB7XG5cbiAgLy8gZmlyc3QgaXMgdHlwZVxuICB2YXIgc3RyID0gJycgKyBvYmoudHlwZTtcblxuICAvLyBhdHRhY2htZW50cyBpZiB3ZSBoYXZlIHRoZW1cbiAgaWYgKGV4cG9ydHMuQklOQVJZX0VWRU5UID09PSBvYmoudHlwZSB8fCBleHBvcnRzLkJJTkFSWV9BQ0sgPT09IG9iai50eXBlKSB7XG4gICAgc3RyICs9IG9iai5hdHRhY2htZW50cyArICctJztcbiAgfVxuXG4gIC8vIGlmIHdlIGhhdmUgYSBuYW1lc3BhY2Ugb3RoZXIgdGhhbiBgL2BcbiAgLy8gd2UgYXBwZW5kIGl0IGZvbGxvd2VkIGJ5IGEgY29tbWEgYCxgXG4gIGlmIChvYmoubnNwICYmICcvJyAhPT0gb2JqLm5zcCkge1xuICAgIHN0ciArPSBvYmoubnNwICsgJywnO1xuICB9XG5cbiAgLy8gaW1tZWRpYXRlbHkgZm9sbG93ZWQgYnkgdGhlIGlkXG4gIGlmIChudWxsICE9IG9iai5pZCkge1xuICAgIHN0ciArPSBvYmouaWQ7XG4gIH1cblxuICAvLyBqc29uIGRhdGFcbiAgaWYgKG51bGwgIT0gb2JqLmRhdGEpIHtcbiAgICB2YXIgcGF5bG9hZCA9IHRyeVN0cmluZ2lmeShvYmouZGF0YSk7XG4gICAgaWYgKHBheWxvYWQgIT09IGZhbHNlKSB7XG4gICAgICBzdHIgKz0gcGF5bG9hZDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIEVSUk9SX1BBQ0tFVDtcbiAgICB9XG4gIH1cblxuICBkZWJ1ZygnZW5jb2RlZCAlaiBhcyAlcycsIG9iaiwgc3RyKTtcbiAgcmV0dXJuIHN0cjtcbn1cblxuZnVuY3Rpb24gdHJ5U3RyaW5naWZ5KHN0cikge1xuICB0cnkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShzdHIpO1xuICB9IGNhdGNoKGUpe1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG4vKipcbiAqIEVuY29kZSBwYWNrZXQgYXMgJ2J1ZmZlciBzZXF1ZW5jZScgYnkgcmVtb3ZpbmcgYmxvYnMsIGFuZFxuICogZGVjb25zdHJ1Y3RpbmcgcGFja2V0IGludG8gb2JqZWN0IHdpdGggcGxhY2Vob2xkZXJzIGFuZFxuICogYSBsaXN0IG9mIGJ1ZmZlcnMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldFxuICogQHJldHVybiB7QnVmZmVyfSBlbmNvZGVkXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBlbmNvZGVBc0JpbmFyeShvYmosIGNhbGxiYWNrKSB7XG5cbiAgZnVuY3Rpb24gd3JpdGVFbmNvZGluZyhibG9ibGVzc0RhdGEpIHtcbiAgICB2YXIgZGVjb25zdHJ1Y3Rpb24gPSBiaW5hcnkuZGVjb25zdHJ1Y3RQYWNrZXQoYmxvYmxlc3NEYXRhKTtcbiAgICB2YXIgcGFjayA9IGVuY29kZUFzU3RyaW5nKGRlY29uc3RydWN0aW9uLnBhY2tldCk7XG4gICAgdmFyIGJ1ZmZlcnMgPSBkZWNvbnN0cnVjdGlvbi5idWZmZXJzO1xuXG4gICAgYnVmZmVycy51bnNoaWZ0KHBhY2spOyAvLyBhZGQgcGFja2V0IGluZm8gdG8gYmVnaW5uaW5nIG9mIGRhdGEgbGlzdFxuICAgIGNhbGxiYWNrKGJ1ZmZlcnMpOyAvLyB3cml0ZSBhbGwgdGhlIGJ1ZmZlcnNcbiAgfVxuXG4gIGJpbmFyeS5yZW1vdmVCbG9icyhvYmosIHdyaXRlRW5jb2RpbmcpO1xufVxuXG4vKipcbiAqIEEgc29ja2V0LmlvIERlY29kZXIgaW5zdGFuY2VcbiAqXG4gKiBAcmV0dXJuIHtPYmplY3R9IGRlY29kZXJcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gRGVjb2RlcigpIHtcbiAgdGhpcy5yZWNvbnN0cnVjdG9yID0gbnVsbDtcbn1cblxuLyoqXG4gKiBNaXggaW4gYEVtaXR0ZXJgIHdpdGggRGVjb2Rlci5cbiAqL1xuXG5FbWl0dGVyKERlY29kZXIucHJvdG90eXBlKTtcblxuLyoqXG4gKiBEZWNvZGVzIGFuIGVjb2RlZCBwYWNrZXQgc3RyaW5nIGludG8gcGFja2V0IEpTT04uXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG9iaiAtIGVuY29kZWQgcGFja2V0XG4gKiBAcmV0dXJuIHtPYmplY3R9IHBhY2tldFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5EZWNvZGVyLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbihvYmopIHtcbiAgdmFyIHBhY2tldDtcbiAgaWYgKHR5cGVvZiBvYmogPT09ICdzdHJpbmcnKSB7XG4gICAgcGFja2V0ID0gZGVjb2RlU3RyaW5nKG9iaik7XG4gICAgaWYgKGV4cG9ydHMuQklOQVJZX0VWRU5UID09PSBwYWNrZXQudHlwZSB8fCBleHBvcnRzLkJJTkFSWV9BQ0sgPT09IHBhY2tldC50eXBlKSB7IC8vIGJpbmFyeSBwYWNrZXQncyBqc29uXG4gICAgICB0aGlzLnJlY29uc3RydWN0b3IgPSBuZXcgQmluYXJ5UmVjb25zdHJ1Y3RvcihwYWNrZXQpO1xuXG4gICAgICAvLyBubyBhdHRhY2htZW50cywgbGFiZWxlZCBiaW5hcnkgYnV0IG5vIGJpbmFyeSBkYXRhIHRvIGZvbGxvd1xuICAgICAgaWYgKHRoaXMucmVjb25zdHJ1Y3Rvci5yZWNvblBhY2suYXR0YWNobWVudHMgPT09IDApIHtcbiAgICAgICAgdGhpcy5lbWl0KCdkZWNvZGVkJywgcGFja2V0KTtcbiAgICAgIH1cbiAgICB9IGVsc2UgeyAvLyBub24tYmluYXJ5IGZ1bGwgcGFja2V0XG4gICAgICB0aGlzLmVtaXQoJ2RlY29kZWQnLCBwYWNrZXQpO1xuICAgIH1cbiAgfVxuICBlbHNlIGlmIChpc0J1ZihvYmopIHx8IG9iai5iYXNlNjQpIHsgLy8gcmF3IGJpbmFyeSBkYXRhXG4gICAgaWYgKCF0aGlzLnJlY29uc3RydWN0b3IpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignZ290IGJpbmFyeSBkYXRhIHdoZW4gbm90IHJlY29uc3RydWN0aW5nIGEgcGFja2V0Jyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhY2tldCA9IHRoaXMucmVjb25zdHJ1Y3Rvci50YWtlQmluYXJ5RGF0YShvYmopO1xuICAgICAgaWYgKHBhY2tldCkgeyAvLyByZWNlaXZlZCBmaW5hbCBidWZmZXJcbiAgICAgICAgdGhpcy5yZWNvbnN0cnVjdG9yID0gbnVsbDtcbiAgICAgICAgdGhpcy5lbWl0KCdkZWNvZGVkJywgcGFja2V0KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIHR5cGU6ICcgKyBvYmopO1xuICB9XG59O1xuXG4vKipcbiAqIERlY29kZSBhIHBhY2tldCBTdHJpbmcgKEpTT04gZGF0YSlcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtPYmplY3R9IHBhY2tldFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZGVjb2RlU3RyaW5nKHN0cikge1xuICB2YXIgaSA9IDA7XG4gIC8vIGxvb2sgdXAgdHlwZVxuICB2YXIgcCA9IHtcbiAgICB0eXBlOiBOdW1iZXIoc3RyLmNoYXJBdCgwKSlcbiAgfTtcblxuICBpZiAobnVsbCA9PSBleHBvcnRzLnR5cGVzW3AudHlwZV0pIHtcbiAgICByZXR1cm4gZXJyb3IoJ3Vua25vd24gcGFja2V0IHR5cGUgJyArIHAudHlwZSk7XG4gIH1cblxuICAvLyBsb29rIHVwIGF0dGFjaG1lbnRzIGlmIHR5cGUgYmluYXJ5XG4gIGlmIChleHBvcnRzLkJJTkFSWV9FVkVOVCA9PT0gcC50eXBlIHx8IGV4cG9ydHMuQklOQVJZX0FDSyA9PT0gcC50eXBlKSB7XG4gICAgdmFyIGJ1ZiA9ICcnO1xuICAgIHdoaWxlIChzdHIuY2hhckF0KCsraSkgIT09ICctJykge1xuICAgICAgYnVmICs9IHN0ci5jaGFyQXQoaSk7XG4gICAgICBpZiAoaSA9PSBzdHIubGVuZ3RoKSBicmVhaztcbiAgICB9XG4gICAgaWYgKGJ1ZiAhPSBOdW1iZXIoYnVmKSB8fCBzdHIuY2hhckF0KGkpICE9PSAnLScpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSWxsZWdhbCBhdHRhY2htZW50cycpO1xuICAgIH1cbiAgICBwLmF0dGFjaG1lbnRzID0gTnVtYmVyKGJ1Zik7XG4gIH1cblxuICAvLyBsb29rIHVwIG5hbWVzcGFjZSAoaWYgYW55KVxuICBpZiAoJy8nID09PSBzdHIuY2hhckF0KGkgKyAxKSkge1xuICAgIHAubnNwID0gJyc7XG4gICAgd2hpbGUgKCsraSkge1xuICAgICAgdmFyIGMgPSBzdHIuY2hhckF0KGkpO1xuICAgICAgaWYgKCcsJyA9PT0gYykgYnJlYWs7XG4gICAgICBwLm5zcCArPSBjO1xuICAgICAgaWYgKGkgPT09IHN0ci5sZW5ndGgpIGJyZWFrO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBwLm5zcCA9ICcvJztcbiAgfVxuXG4gIC8vIGxvb2sgdXAgaWRcbiAgdmFyIG5leHQgPSBzdHIuY2hhckF0KGkgKyAxKTtcbiAgaWYgKCcnICE9PSBuZXh0ICYmIE51bWJlcihuZXh0KSA9PSBuZXh0KSB7XG4gICAgcC5pZCA9ICcnO1xuICAgIHdoaWxlICgrK2kpIHtcbiAgICAgIHZhciBjID0gc3RyLmNoYXJBdChpKTtcbiAgICAgIGlmIChudWxsID09IGMgfHwgTnVtYmVyKGMpICE9IGMpIHtcbiAgICAgICAgLS1pO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHAuaWQgKz0gc3RyLmNoYXJBdChpKTtcbiAgICAgIGlmIChpID09PSBzdHIubGVuZ3RoKSBicmVhaztcbiAgICB9XG4gICAgcC5pZCA9IE51bWJlcihwLmlkKTtcbiAgfVxuXG4gIC8vIGxvb2sgdXAganNvbiBkYXRhXG4gIGlmIChzdHIuY2hhckF0KCsraSkpIHtcbiAgICB2YXIgcGF5bG9hZCA9IHRyeVBhcnNlKHN0ci5zdWJzdHIoaSkpO1xuICAgIHZhciBpc1BheWxvYWRWYWxpZCA9IHBheWxvYWQgIT09IGZhbHNlICYmIChwLnR5cGUgPT09IGV4cG9ydHMuRVJST1IgfHwgaXNBcnJheShwYXlsb2FkKSk7XG4gICAgaWYgKGlzUGF5bG9hZFZhbGlkKSB7XG4gICAgICBwLmRhdGEgPSBwYXlsb2FkO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZXJyb3IoJ2ludmFsaWQgcGF5bG9hZCcpO1xuICAgIH1cbiAgfVxuXG4gIGRlYnVnKCdkZWNvZGVkICVzIGFzICVqJywgc3RyLCBwKTtcbiAgcmV0dXJuIHA7XG59XG5cbmZ1bmN0aW9uIHRyeVBhcnNlKHN0cikge1xuICB0cnkge1xuICAgIHJldHVybiBKU09OLnBhcnNlKHN0cik7XG4gIH0gY2F0Y2goZSl7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbi8qKlxuICogRGVhbGxvY2F0ZXMgYSBwYXJzZXIncyByZXNvdXJjZXNcbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkRlY29kZXIucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcbiAgaWYgKHRoaXMucmVjb25zdHJ1Y3Rvcikge1xuICAgIHRoaXMucmVjb25zdHJ1Y3Rvci5maW5pc2hlZFJlY29uc3RydWN0aW9uKCk7XG4gIH1cbn07XG5cbi8qKlxuICogQSBtYW5hZ2VyIG9mIGEgYmluYXJ5IGV2ZW50J3MgJ2J1ZmZlciBzZXF1ZW5jZScuIFNob3VsZFxuICogYmUgY29uc3RydWN0ZWQgd2hlbmV2ZXIgYSBwYWNrZXQgb2YgdHlwZSBCSU5BUllfRVZFTlQgaXNcbiAqIGRlY29kZWQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldFxuICogQHJldHVybiB7QmluYXJ5UmVjb25zdHJ1Y3Rvcn0gaW5pdGlhbGl6ZWQgcmVjb25zdHJ1Y3RvclxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gQmluYXJ5UmVjb25zdHJ1Y3RvcihwYWNrZXQpIHtcbiAgdGhpcy5yZWNvblBhY2sgPSBwYWNrZXQ7XG4gIHRoaXMuYnVmZmVycyA9IFtdO1xufVxuXG4vKipcbiAqIE1ldGhvZCB0byBiZSBjYWxsZWQgd2hlbiBiaW5hcnkgZGF0YSByZWNlaXZlZCBmcm9tIGNvbm5lY3Rpb25cbiAqIGFmdGVyIGEgQklOQVJZX0VWRU5UIHBhY2tldC5cbiAqXG4gKiBAcGFyYW0ge0J1ZmZlciB8IEFycmF5QnVmZmVyfSBiaW5EYXRhIC0gdGhlIHJhdyBiaW5hcnkgZGF0YSByZWNlaXZlZFxuICogQHJldHVybiB7bnVsbCB8IE9iamVjdH0gcmV0dXJucyBudWxsIGlmIG1vcmUgYmluYXJ5IGRhdGEgaXMgZXhwZWN0ZWQgb3JcbiAqICAgYSByZWNvbnN0cnVjdGVkIHBhY2tldCBvYmplY3QgaWYgYWxsIGJ1ZmZlcnMgaGF2ZSBiZWVuIHJlY2VpdmVkLlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuQmluYXJ5UmVjb25zdHJ1Y3Rvci5wcm90b3R5cGUudGFrZUJpbmFyeURhdGEgPSBmdW5jdGlvbihiaW5EYXRhKSB7XG4gIHRoaXMuYnVmZmVycy5wdXNoKGJpbkRhdGEpO1xuICBpZiAodGhpcy5idWZmZXJzLmxlbmd0aCA9PT0gdGhpcy5yZWNvblBhY2suYXR0YWNobWVudHMpIHsgLy8gZG9uZSB3aXRoIGJ1ZmZlciBsaXN0XG4gICAgdmFyIHBhY2tldCA9IGJpbmFyeS5yZWNvbnN0cnVjdFBhY2tldCh0aGlzLnJlY29uUGFjaywgdGhpcy5idWZmZXJzKTtcbiAgICB0aGlzLmZpbmlzaGVkUmVjb25zdHJ1Y3Rpb24oKTtcbiAgICByZXR1cm4gcGFja2V0O1xuICB9XG4gIHJldHVybiBudWxsO1xufTtcblxuLyoqXG4gKiBDbGVhbnMgdXAgYmluYXJ5IHBhY2tldCByZWNvbnN0cnVjdGlvbiB2YXJpYWJsZXMuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuQmluYXJ5UmVjb25zdHJ1Y3Rvci5wcm90b3R5cGUuZmluaXNoZWRSZWNvbnN0cnVjdGlvbiA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnJlY29uUGFjayA9IG51bGw7XG4gIHRoaXMuYnVmZmVycyA9IFtdO1xufTtcblxuZnVuY3Rpb24gZXJyb3IobXNnKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogZXhwb3J0cy5FUlJPUixcbiAgICBkYXRhOiAncGFyc2VyIGVycm9yOiAnICsgbXNnXG4gIH07XG59XG4iLCIvLyBicm93c2VyIHNoaW0gZm9yIHhtbGh0dHByZXF1ZXN0IG1vZHVsZVxuXG52YXIgaGFzQ09SUyA9IHJlcXVpcmUoJ2hhcy1jb3JzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9wdHMpIHtcbiAgdmFyIHhkb21haW4gPSBvcHRzLnhkb21haW47XG5cbiAgLy8gc2NoZW1lIG11c3QgYmUgc2FtZSB3aGVuIHVzaWduIFhEb21haW5SZXF1ZXN0XG4gIC8vIGh0dHA6Ly9ibG9ncy5tc2RuLmNvbS9iL2llaW50ZXJuYWxzL2FyY2hpdmUvMjAxMC8wNS8xMy94ZG9tYWlucmVxdWVzdC1yZXN0cmljdGlvbnMtbGltaXRhdGlvbnMtYW5kLXdvcmthcm91bmRzLmFzcHhcbiAgdmFyIHhzY2hlbWUgPSBvcHRzLnhzY2hlbWU7XG5cbiAgLy8gWERvbWFpblJlcXVlc3QgaGFzIGEgZmxvdyBvZiBub3Qgc2VuZGluZyBjb29raWUsIHRoZXJlZm9yZSBpdCBzaG91bGQgYmUgZGlzYWJsZWQgYXMgYSBkZWZhdWx0LlxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vQXV0b21hdHRpYy9lbmdpbmUuaW8tY2xpZW50L3B1bGwvMjE3XG4gIHZhciBlbmFibGVzWERSID0gb3B0cy5lbmFibGVzWERSO1xuXG4gIC8vIFhNTEh0dHBSZXF1ZXN0IGNhbiBiZSBkaXNhYmxlZCBvbiBJRVxuICB0cnkge1xuICAgIGlmICgndW5kZWZpbmVkJyAhPT0gdHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICYmICgheGRvbWFpbiB8fCBoYXNDT1JTKSkge1xuICAgICAgcmV0dXJuIG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkgeyB9XG5cbiAgLy8gVXNlIFhEb21haW5SZXF1ZXN0IGZvciBJRTggaWYgZW5hYmxlc1hEUiBpcyB0cnVlXG4gIC8vIGJlY2F1c2UgbG9hZGluZyBiYXIga2VlcHMgZmxhc2hpbmcgd2hlbiB1c2luZyBqc29ucC1wb2xsaW5nXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS95dWppb3Nha2Evc29ja2UuaW8taWU4LWxvYWRpbmctZXhhbXBsZVxuICB0cnkge1xuICAgIGlmICgndW5kZWZpbmVkJyAhPT0gdHlwZW9mIFhEb21haW5SZXF1ZXN0ICYmICF4c2NoZW1lICYmIGVuYWJsZXNYRFIpIHtcbiAgICAgIHJldHVybiBuZXcgWERvbWFpblJlcXVlc3QoKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHsgfVxuXG4gIGlmICgheGRvbWFpbikge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gbmV3IGdsb2JhbFtbJ0FjdGl2ZSddLmNvbmNhdCgnT2JqZWN0Jykuam9pbignWCcpXSgnTWljcm9zb2Z0LlhNTEhUVFAnKTtcbiAgICB9IGNhdGNoIChlKSB7IH1cbiAgfVxufTtcbiIsIi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgcGFyc2VyID0gcmVxdWlyZSgnZW5naW5lLmlvLXBhcnNlcicpO1xudmFyIEVtaXR0ZXIgPSByZXF1aXJlKCdjb21wb25lbnQtZW1pdHRlcicpO1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gVHJhbnNwb3J0O1xuXG4vKipcbiAqIFRyYW5zcG9ydCBhYnN0cmFjdCBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucy5cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIFRyYW5zcG9ydCAob3B0cykge1xuICB0aGlzLnBhdGggPSBvcHRzLnBhdGg7XG4gIHRoaXMuaG9zdG5hbWUgPSBvcHRzLmhvc3RuYW1lO1xuICB0aGlzLnBvcnQgPSBvcHRzLnBvcnQ7XG4gIHRoaXMuc2VjdXJlID0gb3B0cy5zZWN1cmU7XG4gIHRoaXMucXVlcnkgPSBvcHRzLnF1ZXJ5O1xuICB0aGlzLnRpbWVzdGFtcFBhcmFtID0gb3B0cy50aW1lc3RhbXBQYXJhbTtcbiAgdGhpcy50aW1lc3RhbXBSZXF1ZXN0cyA9IG9wdHMudGltZXN0YW1wUmVxdWVzdHM7XG4gIHRoaXMucmVhZHlTdGF0ZSA9ICcnO1xuICB0aGlzLmFnZW50ID0gb3B0cy5hZ2VudCB8fCBmYWxzZTtcbiAgdGhpcy5zb2NrZXQgPSBvcHRzLnNvY2tldDtcbiAgdGhpcy5lbmFibGVzWERSID0gb3B0cy5lbmFibGVzWERSO1xuXG4gIC8vIFNTTCBvcHRpb25zIGZvciBOb2RlLmpzIGNsaWVudFxuICB0aGlzLnBmeCA9IG9wdHMucGZ4O1xuICB0aGlzLmtleSA9IG9wdHMua2V5O1xuICB0aGlzLnBhc3NwaHJhc2UgPSBvcHRzLnBhc3NwaHJhc2U7XG4gIHRoaXMuY2VydCA9IG9wdHMuY2VydDtcbiAgdGhpcy5jYSA9IG9wdHMuY2E7XG4gIHRoaXMuY2lwaGVycyA9IG9wdHMuY2lwaGVycztcbiAgdGhpcy5yZWplY3RVbmF1dGhvcml6ZWQgPSBvcHRzLnJlamVjdFVuYXV0aG9yaXplZDtcbiAgdGhpcy5mb3JjZU5vZGUgPSBvcHRzLmZvcmNlTm9kZTtcblxuICAvLyBvdGhlciBvcHRpb25zIGZvciBOb2RlLmpzIGNsaWVudFxuICB0aGlzLmV4dHJhSGVhZGVycyA9IG9wdHMuZXh0cmFIZWFkZXJzO1xuICB0aGlzLmxvY2FsQWRkcmVzcyA9IG9wdHMubG9jYWxBZGRyZXNzO1xufVxuXG4vKipcbiAqIE1peCBpbiBgRW1pdHRlcmAuXG4gKi9cblxuRW1pdHRlcihUcmFuc3BvcnQucHJvdG90eXBlKTtcblxuLyoqXG4gKiBFbWl0cyBhbiBlcnJvci5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtUcmFuc3BvcnR9IGZvciBjaGFpbmluZ1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5UcmFuc3BvcnQucHJvdG90eXBlLm9uRXJyb3IgPSBmdW5jdGlvbiAobXNnLCBkZXNjKSB7XG4gIHZhciBlcnIgPSBuZXcgRXJyb3IobXNnKTtcbiAgZXJyLnR5cGUgPSAnVHJhbnNwb3J0RXJyb3InO1xuICBlcnIuZGVzY3JpcHRpb24gPSBkZXNjO1xuICB0aGlzLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIE9wZW5zIHRoZSB0cmFuc3BvcnQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5UcmFuc3BvcnQucHJvdG90eXBlLm9wZW4gPSBmdW5jdGlvbiAoKSB7XG4gIGlmICgnY2xvc2VkJyA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8ICcnID09PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICB0aGlzLnJlYWR5U3RhdGUgPSAnb3BlbmluZyc7XG4gICAgdGhpcy5kb09wZW4oKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBDbG9zZXMgdGhlIHRyYW5zcG9ydC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5UcmFuc3BvcnQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gKCkge1xuICBpZiAoJ29wZW5pbmcnID09PSB0aGlzLnJlYWR5U3RhdGUgfHwgJ29wZW4nID09PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICB0aGlzLmRvQ2xvc2UoKTtcbiAgICB0aGlzLm9uQ2xvc2UoKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZW5kcyBtdWx0aXBsZSBwYWNrZXRzLlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IHBhY2tldHNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblRyYW5zcG9ydC5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uIChwYWNrZXRzKSB7XG4gIGlmICgnb3BlbicgPT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgIHRoaXMud3JpdGUocGFja2V0cyk7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdUcmFuc3BvcnQgbm90IG9wZW4nKTtcbiAgfVxufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBvcGVuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuVHJhbnNwb3J0LnByb3RvdHlwZS5vbk9wZW4gPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMucmVhZHlTdGF0ZSA9ICdvcGVuJztcbiAgdGhpcy53cml0YWJsZSA9IHRydWU7XG4gIHRoaXMuZW1pdCgnb3BlbicpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgd2l0aCBkYXRhLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5UcmFuc3BvcnQucHJvdG90eXBlLm9uRGF0YSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHZhciBwYWNrZXQgPSBwYXJzZXIuZGVjb2RlUGFja2V0KGRhdGEsIHRoaXMuc29ja2V0LmJpbmFyeVR5cGUpO1xuICB0aGlzLm9uUGFja2V0KHBhY2tldCk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB3aXRoIGEgZGVjb2RlZCBwYWNrZXQuXG4gKi9cblxuVHJhbnNwb3J0LnByb3RvdHlwZS5vblBhY2tldCA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgdGhpcy5lbWl0KCdwYWNrZXQnLCBwYWNrZXQpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBjbG9zZS5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5UcmFuc3BvcnQucHJvdG90eXBlLm9uQ2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMucmVhZHlTdGF0ZSA9ICdjbG9zZWQnO1xuICB0aGlzLmVtaXQoJ2Nsb3NlJyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKlxub2JqZWN0LWFzc2lnblxuKGMpIFNpbmRyZSBTb3JodXNcbkBsaWNlbnNlIE1JVFxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBwcm9wSXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuZnVuY3Rpb24gdG9PYmplY3QodmFsKSB7XG5cdGlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBudWxsIG9yIHVuZGVmaW5lZCcpO1xuXHR9XG5cblx0cmV0dXJuIE9iamVjdCh2YWwpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRVc2VOYXRpdmUoKSB7XG5cdHRyeSB7XG5cdFx0aWYgKCFPYmplY3QuYXNzaWduKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZWN0IGJ1Z2d5IHByb3BlcnR5IGVudW1lcmF0aW9uIG9yZGVyIGluIG9sZGVyIFY4IHZlcnNpb25zLlxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9NDExOFxuXHRcdHZhciB0ZXN0MSA9IG5ldyBTdHJpbmcoJ2FiYycpOyAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctd3JhcHBlcnNcblx0XHR0ZXN0MVs1XSA9ICdkZSc7XG5cdFx0aWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QxKVswXSA9PT0gJzUnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MiA9IHt9O1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgMTA7IGkrKykge1xuXHRcdFx0dGVzdDJbJ18nICsgU3RyaW5nLmZyb21DaGFyQ29kZShpKV0gPSBpO1xuXHRcdH1cblx0XHR2YXIgb3JkZXIyID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDIpLm1hcChmdW5jdGlvbiAobikge1xuXHRcdFx0cmV0dXJuIHRlc3QyW25dO1xuXHRcdH0pO1xuXHRcdGlmIChvcmRlcjIuam9pbignJykgIT09ICcwMTIzNDU2Nzg5Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDMgPSB7fTtcblx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChsZXR0ZXIpIHtcblx0XHRcdHRlc3QzW2xldHRlcl0gPSBsZXR0ZXI7XG5cdFx0fSk7XG5cdFx0aWYgKE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIHRlc3QzKSkuam9pbignJykgIT09XG5cdFx0XHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0Ly8gV2UgZG9uJ3QgZXhwZWN0IGFueSBvZiB0aGUgYWJvdmUgdG8gdGhyb3csIGJ1dCBiZXR0ZXIgdG8gYmUgc2FmZS5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaG91bGRVc2VOYXRpdmUoKSA/IE9iamVjdC5hc3NpZ24gOiBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcblx0dmFyIGZyb207XG5cdHZhciB0byA9IHRvT2JqZWN0KHRhcmdldCk7XG5cdHZhciBzeW1ib2xzO1xuXG5cdGZvciAodmFyIHMgPSAxOyBzIDwgYXJndW1lbnRzLmxlbmd0aDsgcysrKSB7XG5cdFx0ZnJvbSA9IE9iamVjdChhcmd1bWVudHNbc10pO1xuXG5cdFx0Zm9yICh2YXIga2V5IGluIGZyb20pIHtcblx0XHRcdGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGZyb20sIGtleSkpIHtcblx0XHRcdFx0dG9ba2V5XSA9IGZyb21ba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG5cdFx0XHRzeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGZyb20pO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzeW1ib2xzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmIChwcm9wSXNFbnVtZXJhYmxlLmNhbGwoZnJvbSwgc3ltYm9sc1tpXSkpIHtcblx0XHRcdFx0XHR0b1tzeW1ib2xzW2ldXSA9IGZyb21bc3ltYm9sc1tpXV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdG87XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVzZSBpbnZhcmlhbnQoKSB0byBhc3NlcnQgc3RhdGUgd2hpY2ggeW91ciBwcm9ncmFtIGFzc3VtZXMgdG8gYmUgdHJ1ZS5cbiAqXG4gKiBQcm92aWRlIHNwcmludGYtc3R5bGUgZm9ybWF0IChvbmx5ICVzIGlzIHN1cHBvcnRlZCkgYW5kIGFyZ3VtZW50c1xuICogdG8gcHJvdmlkZSBpbmZvcm1hdGlvbiBhYm91dCB3aGF0IGJyb2tlIGFuZCB3aGF0IHlvdSB3ZXJlXG4gKiBleHBlY3RpbmcuXG4gKlxuICogVGhlIGludmFyaWFudCBtZXNzYWdlIHdpbGwgYmUgc3RyaXBwZWQgaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBpbnZhcmlhbnRcbiAqIHdpbGwgcmVtYWluIHRvIGVuc3VyZSBsb2dpYyBkb2VzIG5vdCBkaWZmZXIgaW4gcHJvZHVjdGlvbi5cbiAqL1xuXG52YXIgdmFsaWRhdGVGb3JtYXQgPSBmdW5jdGlvbiB2YWxpZGF0ZUZvcm1hdChmb3JtYXQpIHt9O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YWxpZGF0ZUZvcm1hdCA9IGZ1bmN0aW9uIHZhbGlkYXRlRm9ybWF0KGZvcm1hdCkge1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhcmlhbnQgcmVxdWlyZXMgYW4gZXJyb3IgbWVzc2FnZSBhcmd1bWVudCcpO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gaW52YXJpYW50KGNvbmRpdGlvbiwgZm9ybWF0LCBhLCBiLCBjLCBkLCBlLCBmKSB7XG4gIHZhbGlkYXRlRm9ybWF0KGZvcm1hdCk7XG5cbiAgaWYgKCFjb25kaXRpb24pIHtcbiAgICB2YXIgZXJyb3I7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcignTWluaWZpZWQgZXhjZXB0aW9uIG9jY3VycmVkOyB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgJyArICdmb3IgdGhlIGZ1bGwgZXJyb3IgbWVzc2FnZSBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLicpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYXJncyA9IFthLCBiLCBjLCBkLCBlLCBmXTtcbiAgICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gYXJnc1thcmdJbmRleCsrXTtcbiAgICAgIH0pKTtcbiAgICAgIGVycm9yLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgfVxuXG4gICAgZXJyb3IuZnJhbWVzVG9Qb3AgPSAxOyAvLyB3ZSBkb24ndCBjYXJlIGFib3V0IGludmFyaWFudCdzIG93biBmcmFtZVxuICAgIHRocm93IGVycm9yO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW52YXJpYW50OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGVtcHR5T2JqZWN0ID0ge307XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIE9iamVjdC5mcmVlemUoZW1wdHlPYmplY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVtcHR5T2JqZWN0OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICovXG5cbmZ1bmN0aW9uIG1ha2VFbXB0eUZ1bmN0aW9uKGFyZykge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBhcmc7XG4gIH07XG59XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBhY2NlcHRzIGFuZCBkaXNjYXJkcyBpbnB1dHM7IGl0IGhhcyBubyBzaWRlIGVmZmVjdHMuIFRoaXMgaXNcbiAqIHByaW1hcmlseSB1c2VmdWwgaWRpb21hdGljYWxseSBmb3Igb3ZlcnJpZGFibGUgZnVuY3Rpb24gZW5kcG9pbnRzIHdoaWNoXG4gKiBhbHdheXMgbmVlZCB0byBiZSBjYWxsYWJsZSwgc2luY2UgSlMgbGFja3MgYSBudWxsLWNhbGwgaWRpb20gYWxhIENvY29hLlxuICovXG52YXIgZW1wdHlGdW5jdGlvbiA9IGZ1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKSB7fTtcblxuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJucyA9IG1ha2VFbXB0eUZ1bmN0aW9uO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0ZhbHNlID0gbWFrZUVtcHR5RnVuY3Rpb24oZmFsc2UpO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RydWUgPSBtYWtlRW1wdHlGdW5jdGlvbih0cnVlKTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNOdWxsID0gbWFrZUVtcHR5RnVuY3Rpb24obnVsbCk7XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVGhpcyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXM7XG59O1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0FyZ3VtZW50ID0gZnVuY3Rpb24gKGFyZykge1xuICByZXR1cm4gYXJnO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBlbXB0eUZ1bmN0aW9uOyIsIi8qKlxyXG4gKiBQYXJzZXMgYW4gVVJJXHJcbiAqXHJcbiAqIEBhdXRob3IgU3RldmVuIExldml0aGFuIDxzdGV2ZW5sZXZpdGhhbi5jb20+IChNSVQgbGljZW5zZSlcclxuICogQGFwaSBwcml2YXRlXHJcbiAqL1xyXG5cclxudmFyIHJlID0gL14oPzooPyFbXjpAXSs6W146QFxcL10qQCkoaHR0cHxodHRwc3x3c3x3c3MpOlxcL1xcLyk/KCg/OigoW146QF0qKSg/OjooW146QF0qKSk/KT9AKT8oKD86W2EtZjAtOV17MCw0fTopezIsN31bYS1mMC05XXswLDR9fFteOlxcLz8jXSopKD86OihcXGQqKSk/KSgoKFxcLyg/OltePyNdKD8hW14/I1xcL10qXFwuW14/I1xcLy5dKyg/Ols/I118JCkpKSpcXC8/KT8oW14/I1xcL10qKSkoPzpcXD8oW14jXSopKT8oPzojKC4qKSk/KS87XHJcblxyXG52YXIgcGFydHMgPSBbXHJcbiAgICAnc291cmNlJywgJ3Byb3RvY29sJywgJ2F1dGhvcml0eScsICd1c2VySW5mbycsICd1c2VyJywgJ3Bhc3N3b3JkJywgJ2hvc3QnLCAncG9ydCcsICdyZWxhdGl2ZScsICdwYXRoJywgJ2RpcmVjdG9yeScsICdmaWxlJywgJ3F1ZXJ5JywgJ2FuY2hvcidcclxuXTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcGFyc2V1cmkoc3RyKSB7XHJcbiAgICB2YXIgc3JjID0gc3RyLFxyXG4gICAgICAgIGIgPSBzdHIuaW5kZXhPZignWycpLFxyXG4gICAgICAgIGUgPSBzdHIuaW5kZXhPZignXScpO1xyXG5cclxuICAgIGlmIChiICE9IC0xICYmIGUgIT0gLTEpIHtcclxuICAgICAgICBzdHIgPSBzdHIuc3Vic3RyaW5nKDAsIGIpICsgc3RyLnN1YnN0cmluZyhiLCBlKS5yZXBsYWNlKC86L2csICc7JykgKyBzdHIuc3Vic3RyaW5nKGUsIHN0ci5sZW5ndGgpO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBtID0gcmUuZXhlYyhzdHIgfHwgJycpLFxyXG4gICAgICAgIHVyaSA9IHt9LFxyXG4gICAgICAgIGkgPSAxNDtcclxuXHJcbiAgICB3aGlsZSAoaS0tKSB7XHJcbiAgICAgICAgdXJpW3BhcnRzW2ldXSA9IG1baV0gfHwgJyc7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGIgIT0gLTEgJiYgZSAhPSAtMSkge1xyXG4gICAgICAgIHVyaS5zb3VyY2UgPSBzcmM7XHJcbiAgICAgICAgdXJpLmhvc3QgPSB1cmkuaG9zdC5zdWJzdHJpbmcoMSwgdXJpLmhvc3QubGVuZ3RoIC0gMSkucmVwbGFjZSgvOy9nLCAnOicpO1xyXG4gICAgICAgIHVyaS5hdXRob3JpdHkgPSB1cmkuYXV0aG9yaXR5LnJlcGxhY2UoJ1snLCAnJykucmVwbGFjZSgnXScsICcnKS5yZXBsYWNlKC87L2csICc6Jyk7XHJcbiAgICAgICAgdXJpLmlwdjZ1cmkgPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB1cmk7XHJcbn07XHJcbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwiXG5tb2R1bGUuZXhwb3J0cyA9IGlzQnVmO1xuXG52YXIgd2l0aE5hdGl2ZUJ1ZmZlciA9IHR5cGVvZiBnbG9iYWwuQnVmZmVyID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBnbG9iYWwuQnVmZmVyLmlzQnVmZmVyID09PSAnZnVuY3Rpb24nO1xudmFyIHdpdGhOYXRpdmVBcnJheUJ1ZmZlciA9IHR5cGVvZiBnbG9iYWwuQXJyYXlCdWZmZXIgPT09ICdmdW5jdGlvbic7XG5cbnZhciBpc1ZpZXcgPSAoZnVuY3Rpb24gKCkge1xuICBpZiAod2l0aE5hdGl2ZUFycmF5QnVmZmVyICYmIHR5cGVvZiBnbG9iYWwuQXJyYXlCdWZmZXIuaXNWaWV3ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGdsb2JhbC5BcnJheUJ1ZmZlci5pc1ZpZXc7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iai5idWZmZXIgaW5zdGFuY2VvZiBnbG9iYWwuQXJyYXlCdWZmZXI7IH07XG4gIH1cbn0pKCk7XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIG9iaiBpcyBhIGJ1ZmZlciBvciBhbiBhcnJheWJ1ZmZlci5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBpc0J1ZihvYmopIHtcbiAgcmV0dXJuICh3aXRoTmF0aXZlQnVmZmVyICYmIGdsb2JhbC5CdWZmZXIuaXNCdWZmZXIob2JqKSkgfHxcbiAgICAgICAgICAod2l0aE5hdGl2ZUFycmF5QnVmZmVyICYmIChvYmogaW5zdGFuY2VvZiBnbG9iYWwuQXJyYXlCdWZmZXIgfHwgaXNWaWV3KG9iaikpKTtcbn1cbiIsIlxuLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciBlaW8gPSByZXF1aXJlKCdlbmdpbmUuaW8tY2xpZW50Jyk7XG52YXIgU29ja2V0ID0gcmVxdWlyZSgnLi9zb2NrZXQnKTtcbnZhciBFbWl0dGVyID0gcmVxdWlyZSgnY29tcG9uZW50LWVtaXR0ZXInKTtcbnZhciBwYXJzZXIgPSByZXF1aXJlKCdzb2NrZXQuaW8tcGFyc2VyJyk7XG52YXIgb24gPSByZXF1aXJlKCcuL29uJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJ2NvbXBvbmVudC1iaW5kJyk7XG52YXIgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdzb2NrZXQuaW8tY2xpZW50Om1hbmFnZXInKTtcbnZhciBpbmRleE9mID0gcmVxdWlyZSgnaW5kZXhvZicpO1xudmFyIEJhY2tvZmYgPSByZXF1aXJlKCdiYWNrbzInKTtcblxuLyoqXG4gKiBJRTYrIGhhc093blByb3BlcnR5XG4gKi9cblxudmFyIGhhcyA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1hbmFnZXI7XG5cbi8qKlxuICogYE1hbmFnZXJgIGNvbnN0cnVjdG9yLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBlbmdpbmUgaW5zdGFuY2Ugb3IgZW5naW5lIHVyaS9vcHRzXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBNYW5hZ2VyICh1cmksIG9wdHMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIE1hbmFnZXIpKSByZXR1cm4gbmV3IE1hbmFnZXIodXJpLCBvcHRzKTtcbiAgaWYgKHVyaSAmJiAoJ29iamVjdCcgPT09IHR5cGVvZiB1cmkpKSB7XG4gICAgb3B0cyA9IHVyaTtcbiAgICB1cmkgPSB1bmRlZmluZWQ7XG4gIH1cbiAgb3B0cyA9IG9wdHMgfHwge307XG5cbiAgb3B0cy5wYXRoID0gb3B0cy5wYXRoIHx8ICcvc29ja2V0LmlvJztcbiAgdGhpcy5uc3BzID0ge307XG4gIHRoaXMuc3VicyA9IFtdO1xuICB0aGlzLm9wdHMgPSBvcHRzO1xuICB0aGlzLnJlY29ubmVjdGlvbihvcHRzLnJlY29ubmVjdGlvbiAhPT0gZmFsc2UpO1xuICB0aGlzLnJlY29ubmVjdGlvbkF0dGVtcHRzKG9wdHMucmVjb25uZWN0aW9uQXR0ZW1wdHMgfHwgSW5maW5pdHkpO1xuICB0aGlzLnJlY29ubmVjdGlvbkRlbGF5KG9wdHMucmVjb25uZWN0aW9uRGVsYXkgfHwgMTAwMCk7XG4gIHRoaXMucmVjb25uZWN0aW9uRGVsYXlNYXgob3B0cy5yZWNvbm5lY3Rpb25EZWxheU1heCB8fCA1MDAwKTtcbiAgdGhpcy5yYW5kb21pemF0aW9uRmFjdG9yKG9wdHMucmFuZG9taXphdGlvbkZhY3RvciB8fCAwLjUpO1xuICB0aGlzLmJhY2tvZmYgPSBuZXcgQmFja29mZih7XG4gICAgbWluOiB0aGlzLnJlY29ubmVjdGlvbkRlbGF5KCksXG4gICAgbWF4OiB0aGlzLnJlY29ubmVjdGlvbkRlbGF5TWF4KCksXG4gICAgaml0dGVyOiB0aGlzLnJhbmRvbWl6YXRpb25GYWN0b3IoKVxuICB9KTtcbiAgdGhpcy50aW1lb3V0KG51bGwgPT0gb3B0cy50aW1lb3V0ID8gMjAwMDAgOiBvcHRzLnRpbWVvdXQpO1xuICB0aGlzLnJlYWR5U3RhdGUgPSAnY2xvc2VkJztcbiAgdGhpcy51cmkgPSB1cmk7XG4gIHRoaXMuY29ubmVjdGluZyA9IFtdO1xuICB0aGlzLmxhc3RQaW5nID0gbnVsbDtcbiAgdGhpcy5lbmNvZGluZyA9IGZhbHNlO1xuICB0aGlzLnBhY2tldEJ1ZmZlciA9IFtdO1xuICB2YXIgX3BhcnNlciA9IG9wdHMucGFyc2VyIHx8IHBhcnNlcjtcbiAgdGhpcy5lbmNvZGVyID0gbmV3IF9wYXJzZXIuRW5jb2RlcigpO1xuICB0aGlzLmRlY29kZXIgPSBuZXcgX3BhcnNlci5EZWNvZGVyKCk7XG4gIHRoaXMuYXV0b0Nvbm5lY3QgPSBvcHRzLmF1dG9Db25uZWN0ICE9PSBmYWxzZTtcbiAgaWYgKHRoaXMuYXV0b0Nvbm5lY3QpIHRoaXMub3BlbigpO1xufVxuXG4vKipcbiAqIFByb3BhZ2F0ZSBnaXZlbiBldmVudCB0byBzb2NrZXRzIGFuZCBlbWl0IG9uIGB0aGlzYFxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLmVtaXRBbGwgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuZW1pdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICBmb3IgKHZhciBuc3AgaW4gdGhpcy5uc3BzKSB7XG4gICAgaWYgKGhhcy5jYWxsKHRoaXMubnNwcywgbnNwKSkge1xuICAgICAgdGhpcy5uc3BzW25zcF0uZW1pdC5hcHBseSh0aGlzLm5zcHNbbnNwXSwgYXJndW1lbnRzKTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogVXBkYXRlIGBzb2NrZXQuaWRgIG9mIGFsbCBzb2NrZXRzXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUudXBkYXRlU29ja2V0SWRzID0gZnVuY3Rpb24gKCkge1xuICBmb3IgKHZhciBuc3AgaW4gdGhpcy5uc3BzKSB7XG4gICAgaWYgKGhhcy5jYWxsKHRoaXMubnNwcywgbnNwKSkge1xuICAgICAgdGhpcy5uc3BzW25zcF0uaWQgPSB0aGlzLmdlbmVyYXRlSWQobnNwKTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogZ2VuZXJhdGUgYHNvY2tldC5pZGAgZm9yIHRoZSBnaXZlbiBgbnNwYFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuc3BcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLmdlbmVyYXRlSWQgPSBmdW5jdGlvbiAobnNwKSB7XG4gIHJldHVybiAobnNwID09PSAnLycgPyAnJyA6IChuc3AgKyAnIycpKSArIHRoaXMuZW5naW5lLmlkO1xufTtcblxuLyoqXG4gKiBNaXggaW4gYEVtaXR0ZXJgLlxuICovXG5cbkVtaXR0ZXIoTWFuYWdlci5wcm90b3R5cGUpO1xuXG4vKipcbiAqIFNldHMgdGhlIGByZWNvbm5lY3Rpb25gIGNvbmZpZy5cbiAqXG4gKiBAcGFyYW0ge0Jvb2xlYW59IHRydWUvZmFsc2UgaWYgaXQgc2hvdWxkIGF1dG9tYXRpY2FsbHkgcmVjb25uZWN0XG4gKiBAcmV0dXJuIHtNYW5hZ2VyfSBzZWxmIG9yIHZhbHVlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLnJlY29ubmVjdGlvbiA9IGZ1bmN0aW9uICh2KSB7XG4gIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHRoaXMuX3JlY29ubmVjdGlvbjtcbiAgdGhpcy5fcmVjb25uZWN0aW9uID0gISF2O1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2V0cyB0aGUgcmVjb25uZWN0aW9uIGF0dGVtcHRzIGNvbmZpZy5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbWF4IHJlY29ubmVjdGlvbiBhdHRlbXB0cyBiZWZvcmUgZ2l2aW5nIHVwXG4gKiBAcmV0dXJuIHtNYW5hZ2VyfSBzZWxmIG9yIHZhbHVlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLnJlY29ubmVjdGlvbkF0dGVtcHRzID0gZnVuY3Rpb24gKHYpIHtcbiAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdGhpcy5fcmVjb25uZWN0aW9uQXR0ZW1wdHM7XG4gIHRoaXMuX3JlY29ubmVjdGlvbkF0dGVtcHRzID0gdjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNldHMgdGhlIGRlbGF5IGJldHdlZW4gcmVjb25uZWN0aW9ucy5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gZGVsYXlcbiAqIEByZXR1cm4ge01hbmFnZXJ9IHNlbGYgb3IgdmFsdWVcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUucmVjb25uZWN0aW9uRGVsYXkgPSBmdW5jdGlvbiAodikge1xuICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB0aGlzLl9yZWNvbm5lY3Rpb25EZWxheTtcbiAgdGhpcy5fcmVjb25uZWN0aW9uRGVsYXkgPSB2O1xuICB0aGlzLmJhY2tvZmYgJiYgdGhpcy5iYWNrb2ZmLnNldE1pbih2KTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5yYW5kb21pemF0aW9uRmFjdG9yID0gZnVuY3Rpb24gKHYpIHtcbiAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdGhpcy5fcmFuZG9taXphdGlvbkZhY3RvcjtcbiAgdGhpcy5fcmFuZG9taXphdGlvbkZhY3RvciA9IHY7XG4gIHRoaXMuYmFja29mZiAmJiB0aGlzLmJhY2tvZmYuc2V0Sml0dGVyKHYpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2V0cyB0aGUgbWF4aW11bSBkZWxheSBiZXR3ZWVuIHJlY29ubmVjdGlvbnMuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGRlbGF5XG4gKiBAcmV0dXJuIHtNYW5hZ2VyfSBzZWxmIG9yIHZhbHVlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLnJlY29ubmVjdGlvbkRlbGF5TWF4ID0gZnVuY3Rpb24gKHYpIHtcbiAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdGhpcy5fcmVjb25uZWN0aW9uRGVsYXlNYXg7XG4gIHRoaXMuX3JlY29ubmVjdGlvbkRlbGF5TWF4ID0gdjtcbiAgdGhpcy5iYWNrb2ZmICYmIHRoaXMuYmFja29mZi5zZXRNYXgodik7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZXRzIHRoZSBjb25uZWN0aW9uIHRpbWVvdXQuIGBmYWxzZWAgdG8gZGlzYWJsZVxuICpcbiAqIEByZXR1cm4ge01hbmFnZXJ9IHNlbGYgb3IgdmFsdWVcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUudGltZW91dCA9IGZ1bmN0aW9uICh2KSB7XG4gIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHRoaXMuX3RpbWVvdXQ7XG4gIHRoaXMuX3RpbWVvdXQgPSB2O1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU3RhcnRzIHRyeWluZyB0byByZWNvbm5lY3QgaWYgcmVjb25uZWN0aW9uIGlzIGVuYWJsZWQgYW5kIHdlIGhhdmUgbm90XG4gKiBzdGFydGVkIHJlY29ubmVjdGluZyB5ZXRcbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5tYXliZVJlY29ubmVjdE9uT3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gT25seSB0cnkgdG8gcmVjb25uZWN0IGlmIGl0J3MgdGhlIGZpcnN0IHRpbWUgd2UncmUgY29ubmVjdGluZ1xuICBpZiAoIXRoaXMucmVjb25uZWN0aW5nICYmIHRoaXMuX3JlY29ubmVjdGlvbiAmJiB0aGlzLmJhY2tvZmYuYXR0ZW1wdHMgPT09IDApIHtcbiAgICAvLyBrZWVwcyByZWNvbm5lY3Rpb24gZnJvbSBmaXJpbmcgdHdpY2UgZm9yIHRoZSBzYW1lIHJlY29ubmVjdGlvbiBsb29wXG4gICAgdGhpcy5yZWNvbm5lY3QoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBTZXRzIHRoZSBjdXJyZW50IHRyYW5zcG9ydCBgc29ja2V0YC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBvcHRpb25hbCwgY2FsbGJhY2tcbiAqIEByZXR1cm4ge01hbmFnZXJ9IHNlbGZcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUub3BlbiA9XG5NYW5hZ2VyLnByb3RvdHlwZS5jb25uZWN0ID0gZnVuY3Rpb24gKGZuLCBvcHRzKSB7XG4gIGRlYnVnKCdyZWFkeVN0YXRlICVzJywgdGhpcy5yZWFkeVN0YXRlKTtcbiAgaWYgKH50aGlzLnJlYWR5U3RhdGUuaW5kZXhPZignb3BlbicpKSByZXR1cm4gdGhpcztcblxuICBkZWJ1Zygnb3BlbmluZyAlcycsIHRoaXMudXJpKTtcbiAgdGhpcy5lbmdpbmUgPSBlaW8odGhpcy51cmksIHRoaXMub3B0cyk7XG4gIHZhciBzb2NrZXQgPSB0aGlzLmVuZ2luZTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB0aGlzLnJlYWR5U3RhdGUgPSAnb3BlbmluZyc7XG4gIHRoaXMuc2tpcFJlY29ubmVjdCA9IGZhbHNlO1xuXG4gIC8vIGVtaXQgYG9wZW5gXG4gIHZhciBvcGVuU3ViID0gb24oc29ja2V0LCAnb3BlbicsIGZ1bmN0aW9uICgpIHtcbiAgICBzZWxmLm9ub3BlbigpO1xuICAgIGZuICYmIGZuKCk7XG4gIH0pO1xuXG4gIC8vIGVtaXQgYGNvbm5lY3RfZXJyb3JgXG4gIHZhciBlcnJvclN1YiA9IG9uKHNvY2tldCwgJ2Vycm9yJywgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICBkZWJ1ZygnY29ubmVjdF9lcnJvcicpO1xuICAgIHNlbGYuY2xlYW51cCgpO1xuICAgIHNlbGYucmVhZHlTdGF0ZSA9ICdjbG9zZWQnO1xuICAgIHNlbGYuZW1pdEFsbCgnY29ubmVjdF9lcnJvcicsIGRhdGEpO1xuICAgIGlmIChmbikge1xuICAgICAgdmFyIGVyciA9IG5ldyBFcnJvcignQ29ubmVjdGlvbiBlcnJvcicpO1xuICAgICAgZXJyLmRhdGEgPSBkYXRhO1xuICAgICAgZm4oZXJyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gT25seSBkbyB0aGlzIGlmIHRoZXJlIGlzIG5vIGZuIHRvIGhhbmRsZSB0aGUgZXJyb3JcbiAgICAgIHNlbGYubWF5YmVSZWNvbm5lY3RPbk9wZW4oKTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIGVtaXQgYGNvbm5lY3RfdGltZW91dGBcbiAgaWYgKGZhbHNlICE9PSB0aGlzLl90aW1lb3V0KSB7XG4gICAgdmFyIHRpbWVvdXQgPSB0aGlzLl90aW1lb3V0O1xuICAgIGRlYnVnKCdjb25uZWN0IGF0dGVtcHQgd2lsbCB0aW1lb3V0IGFmdGVyICVkJywgdGltZW91dCk7XG5cbiAgICAvLyBzZXQgdGltZXJcbiAgICB2YXIgdGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGRlYnVnKCdjb25uZWN0IGF0dGVtcHQgdGltZWQgb3V0IGFmdGVyICVkJywgdGltZW91dCk7XG4gICAgICBvcGVuU3ViLmRlc3Ryb3koKTtcbiAgICAgIHNvY2tldC5jbG9zZSgpO1xuICAgICAgc29ja2V0LmVtaXQoJ2Vycm9yJywgJ3RpbWVvdXQnKTtcbiAgICAgIHNlbGYuZW1pdEFsbCgnY29ubmVjdF90aW1lb3V0JywgdGltZW91dCk7XG4gICAgfSwgdGltZW91dCk7XG5cbiAgICB0aGlzLnN1YnMucHVzaCh7XG4gICAgICBkZXN0cm95OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICB0aGlzLnN1YnMucHVzaChvcGVuU3ViKTtcbiAgdGhpcy5zdWJzLnB1c2goZXJyb3JTdWIpO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiB0cmFuc3BvcnQgb3Blbi5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5vbm9wZW4gPSBmdW5jdGlvbiAoKSB7XG4gIGRlYnVnKCdvcGVuJyk7XG5cbiAgLy8gY2xlYXIgb2xkIHN1YnNcbiAgdGhpcy5jbGVhbnVwKCk7XG5cbiAgLy8gbWFyayBhcyBvcGVuXG4gIHRoaXMucmVhZHlTdGF0ZSA9ICdvcGVuJztcbiAgdGhpcy5lbWl0KCdvcGVuJyk7XG5cbiAgLy8gYWRkIG5ldyBzdWJzXG4gIHZhciBzb2NrZXQgPSB0aGlzLmVuZ2luZTtcbiAgdGhpcy5zdWJzLnB1c2gob24oc29ja2V0LCAnZGF0YScsIGJpbmQodGhpcywgJ29uZGF0YScpKSk7XG4gIHRoaXMuc3Vicy5wdXNoKG9uKHNvY2tldCwgJ3BpbmcnLCBiaW5kKHRoaXMsICdvbnBpbmcnKSkpO1xuICB0aGlzLnN1YnMucHVzaChvbihzb2NrZXQsICdwb25nJywgYmluZCh0aGlzLCAnb25wb25nJykpKTtcbiAgdGhpcy5zdWJzLnB1c2gob24oc29ja2V0LCAnZXJyb3InLCBiaW5kKHRoaXMsICdvbmVycm9yJykpKTtcbiAgdGhpcy5zdWJzLnB1c2gob24oc29ja2V0LCAnY2xvc2UnLCBiaW5kKHRoaXMsICdvbmNsb3NlJykpKTtcbiAgdGhpcy5zdWJzLnB1c2gob24odGhpcy5kZWNvZGVyLCAnZGVjb2RlZCcsIGJpbmQodGhpcywgJ29uZGVjb2RlZCcpKSk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIGEgcGluZy5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5vbnBpbmcgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMubGFzdFBpbmcgPSBuZXcgRGF0ZSgpO1xuICB0aGlzLmVtaXRBbGwoJ3BpbmcnKTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gYSBwYWNrZXQuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUub25wb25nID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmVtaXRBbGwoJ3BvbmcnLCBuZXcgRGF0ZSgpIC0gdGhpcy5sYXN0UGluZyk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB3aXRoIGRhdGEuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUub25kYXRhID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5kZWNvZGVyLmFkZChkYXRhKTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHdoZW4gcGFyc2VyIGZ1bGx5IGRlY29kZXMgYSBwYWNrZXQuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUub25kZWNvZGVkID0gZnVuY3Rpb24gKHBhY2tldCkge1xuICB0aGlzLmVtaXQoJ3BhY2tldCcsIHBhY2tldCk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIHNvY2tldCBlcnJvci5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5vbmVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICBkZWJ1ZygnZXJyb3InLCBlcnIpO1xuICB0aGlzLmVtaXRBbGwoJ2Vycm9yJywgZXJyKTtcbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBzb2NrZXQgZm9yIHRoZSBnaXZlbiBgbnNwYC5cbiAqXG4gKiBAcmV0dXJuIHtTb2NrZXR9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLnNvY2tldCA9IGZ1bmN0aW9uIChuc3AsIG9wdHMpIHtcbiAgdmFyIHNvY2tldCA9IHRoaXMubnNwc1tuc3BdO1xuICBpZiAoIXNvY2tldCkge1xuICAgIHNvY2tldCA9IG5ldyBTb2NrZXQodGhpcywgbnNwLCBvcHRzKTtcbiAgICB0aGlzLm5zcHNbbnNwXSA9IHNvY2tldDtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgc29ja2V0Lm9uKCdjb25uZWN0aW5nJywgb25Db25uZWN0aW5nKTtcbiAgICBzb2NrZXQub24oJ2Nvbm5lY3QnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBzb2NrZXQuaWQgPSBzZWxmLmdlbmVyYXRlSWQobnNwKTtcbiAgICB9KTtcblxuICAgIGlmICh0aGlzLmF1dG9Db25uZWN0KSB7XG4gICAgICAvLyBtYW51YWxseSBjYWxsIGhlcmUgc2luY2UgY29ubmVjdGluZyBldmVudCBpcyBmaXJlZCBiZWZvcmUgbGlzdGVuaW5nXG4gICAgICBvbkNvbm5lY3RpbmcoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBvbkNvbm5lY3RpbmcgKCkge1xuICAgIGlmICghfmluZGV4T2Yoc2VsZi5jb25uZWN0aW5nLCBzb2NrZXQpKSB7XG4gICAgICBzZWxmLmNvbm5lY3RpbmcucHVzaChzb2NrZXQpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzb2NrZXQ7XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIGEgc29ja2V0IGNsb3NlLlxuICpcbiAqIEBwYXJhbSB7U29ja2V0fSBzb2NrZXRcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKHNvY2tldCkge1xuICB2YXIgaW5kZXggPSBpbmRleE9mKHRoaXMuY29ubmVjdGluZywgc29ja2V0KTtcbiAgaWYgKH5pbmRleCkgdGhpcy5jb25uZWN0aW5nLnNwbGljZShpbmRleCwgMSk7XG4gIGlmICh0aGlzLmNvbm5lY3RpbmcubGVuZ3RoKSByZXR1cm47XG5cbiAgdGhpcy5jbG9zZSgpO1xufTtcblxuLyoqXG4gKiBXcml0ZXMgYSBwYWNrZXQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUucGFja2V0ID0gZnVuY3Rpb24gKHBhY2tldCkge1xuICBkZWJ1Zygnd3JpdGluZyBwYWNrZXQgJWonLCBwYWNrZXQpO1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIGlmIChwYWNrZXQucXVlcnkgJiYgcGFja2V0LnR5cGUgPT09IDApIHBhY2tldC5uc3AgKz0gJz8nICsgcGFja2V0LnF1ZXJ5O1xuXG4gIGlmICghc2VsZi5lbmNvZGluZykge1xuICAgIC8vIGVuY29kZSwgdGhlbiB3cml0ZSB0byBlbmdpbmUgd2l0aCByZXN1bHRcbiAgICBzZWxmLmVuY29kaW5nID0gdHJ1ZTtcbiAgICB0aGlzLmVuY29kZXIuZW5jb2RlKHBhY2tldCwgZnVuY3Rpb24gKGVuY29kZWRQYWNrZXRzKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVuY29kZWRQYWNrZXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHNlbGYuZW5naW5lLndyaXRlKGVuY29kZWRQYWNrZXRzW2ldLCBwYWNrZXQub3B0aW9ucyk7XG4gICAgICB9XG4gICAgICBzZWxmLmVuY29kaW5nID0gZmFsc2U7XG4gICAgICBzZWxmLnByb2Nlc3NQYWNrZXRRdWV1ZSgpO1xuICAgIH0pO1xuICB9IGVsc2UgeyAvLyBhZGQgcGFja2V0IHRvIHRoZSBxdWV1ZVxuICAgIHNlbGYucGFja2V0QnVmZmVyLnB1c2gocGFja2V0KTtcbiAgfVxufTtcblxuLyoqXG4gKiBJZiBwYWNrZXQgYnVmZmVyIGlzIG5vbi1lbXB0eSwgYmVnaW5zIGVuY29kaW5nIHRoZVxuICogbmV4dCBwYWNrZXQgaW4gbGluZS5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5wcm9jZXNzUGFja2V0UXVldWUgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLnBhY2tldEJ1ZmZlci5sZW5ndGggPiAwICYmICF0aGlzLmVuY29kaW5nKSB7XG4gICAgdmFyIHBhY2sgPSB0aGlzLnBhY2tldEJ1ZmZlci5zaGlmdCgpO1xuICAgIHRoaXMucGFja2V0KHBhY2spO1xuICB9XG59O1xuXG4vKipcbiAqIENsZWFuIHVwIHRyYW5zcG9ydCBzdWJzY3JpcHRpb25zIGFuZCBwYWNrZXQgYnVmZmVyLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLmNsZWFudXAgPSBmdW5jdGlvbiAoKSB7XG4gIGRlYnVnKCdjbGVhbnVwJyk7XG5cbiAgdmFyIHN1YnNMZW5ndGggPSB0aGlzLnN1YnMubGVuZ3RoO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN1YnNMZW5ndGg7IGkrKykge1xuICAgIHZhciBzdWIgPSB0aGlzLnN1YnMuc2hpZnQoKTtcbiAgICBzdWIuZGVzdHJveSgpO1xuICB9XG5cbiAgdGhpcy5wYWNrZXRCdWZmZXIgPSBbXTtcbiAgdGhpcy5lbmNvZGluZyA9IGZhbHNlO1xuICB0aGlzLmxhc3RQaW5nID0gbnVsbDtcblxuICB0aGlzLmRlY29kZXIuZGVzdHJveSgpO1xufTtcblxuLyoqXG4gKiBDbG9zZSB0aGUgY3VycmVudCBzb2NrZXQuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUuY2xvc2UgPVxuTWFuYWdlci5wcm90b3R5cGUuZGlzY29ubmVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgZGVidWcoJ2Rpc2Nvbm5lY3QnKTtcbiAgdGhpcy5za2lwUmVjb25uZWN0ID0gdHJ1ZTtcbiAgdGhpcy5yZWNvbm5lY3RpbmcgPSBmYWxzZTtcbiAgaWYgKCdvcGVuaW5nJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgLy8gYG9uY2xvc2VgIHdpbGwgbm90IGZpcmUgYmVjYXVzZVxuICAgIC8vIGFuIG9wZW4gZXZlbnQgbmV2ZXIgaGFwcGVuZWRcbiAgICB0aGlzLmNsZWFudXAoKTtcbiAgfVxuICB0aGlzLmJhY2tvZmYucmVzZXQoKTtcbiAgdGhpcy5yZWFkeVN0YXRlID0gJ2Nsb3NlZCc7XG4gIGlmICh0aGlzLmVuZ2luZSkgdGhpcy5lbmdpbmUuY2xvc2UoKTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gZW5naW5lIGNsb3NlLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLm9uY2xvc2UgPSBmdW5jdGlvbiAocmVhc29uKSB7XG4gIGRlYnVnKCdvbmNsb3NlJyk7XG5cbiAgdGhpcy5jbGVhbnVwKCk7XG4gIHRoaXMuYmFja29mZi5yZXNldCgpO1xuICB0aGlzLnJlYWR5U3RhdGUgPSAnY2xvc2VkJztcbiAgdGhpcy5lbWl0KCdjbG9zZScsIHJlYXNvbik7XG5cbiAgaWYgKHRoaXMuX3JlY29ubmVjdGlvbiAmJiAhdGhpcy5za2lwUmVjb25uZWN0KSB7XG4gICAgdGhpcy5yZWNvbm5lY3QoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBBdHRlbXB0IGEgcmVjb25uZWN0aW9uLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLnJlY29ubmVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMucmVjb25uZWN0aW5nIHx8IHRoaXMuc2tpcFJlY29ubmVjdCkgcmV0dXJuIHRoaXM7XG5cbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIGlmICh0aGlzLmJhY2tvZmYuYXR0ZW1wdHMgPj0gdGhpcy5fcmVjb25uZWN0aW9uQXR0ZW1wdHMpIHtcbiAgICBkZWJ1ZygncmVjb25uZWN0IGZhaWxlZCcpO1xuICAgIHRoaXMuYmFja29mZi5yZXNldCgpO1xuICAgIHRoaXMuZW1pdEFsbCgncmVjb25uZWN0X2ZhaWxlZCcpO1xuICAgIHRoaXMucmVjb25uZWN0aW5nID0gZmFsc2U7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGRlbGF5ID0gdGhpcy5iYWNrb2ZmLmR1cmF0aW9uKCk7XG4gICAgZGVidWcoJ3dpbGwgd2FpdCAlZG1zIGJlZm9yZSByZWNvbm5lY3QgYXR0ZW1wdCcsIGRlbGF5KTtcblxuICAgIHRoaXMucmVjb25uZWN0aW5nID0gdHJ1ZTtcbiAgICB2YXIgdGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChzZWxmLnNraXBSZWNvbm5lY3QpIHJldHVybjtcblxuICAgICAgZGVidWcoJ2F0dGVtcHRpbmcgcmVjb25uZWN0Jyk7XG4gICAgICBzZWxmLmVtaXRBbGwoJ3JlY29ubmVjdF9hdHRlbXB0Jywgc2VsZi5iYWNrb2ZmLmF0dGVtcHRzKTtcbiAgICAgIHNlbGYuZW1pdEFsbCgncmVjb25uZWN0aW5nJywgc2VsZi5iYWNrb2ZmLmF0dGVtcHRzKTtcblxuICAgICAgLy8gY2hlY2sgYWdhaW4gZm9yIHRoZSBjYXNlIHNvY2tldCBjbG9zZWQgaW4gYWJvdmUgZXZlbnRzXG4gICAgICBpZiAoc2VsZi5za2lwUmVjb25uZWN0KSByZXR1cm47XG5cbiAgICAgIHNlbGYub3BlbihmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICBkZWJ1ZygncmVjb25uZWN0IGF0dGVtcHQgZXJyb3InKTtcbiAgICAgICAgICBzZWxmLnJlY29ubmVjdGluZyA9IGZhbHNlO1xuICAgICAgICAgIHNlbGYucmVjb25uZWN0KCk7XG4gICAgICAgICAgc2VsZi5lbWl0QWxsKCdyZWNvbm5lY3RfZXJyb3InLCBlcnIuZGF0YSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGVidWcoJ3JlY29ubmVjdCBzdWNjZXNzJyk7XG4gICAgICAgICAgc2VsZi5vbnJlY29ubmVjdCgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9LCBkZWxheSk7XG5cbiAgICB0aGlzLnN1YnMucHVzaCh7XG4gICAgICBkZXN0cm95OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gc3VjY2Vzc2Z1bCByZWNvbm5lY3QuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUub25yZWNvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBhdHRlbXB0ID0gdGhpcy5iYWNrb2ZmLmF0dGVtcHRzO1xuICB0aGlzLnJlY29ubmVjdGluZyA9IGZhbHNlO1xuICB0aGlzLmJhY2tvZmYucmVzZXQoKTtcbiAgdGhpcy51cGRhdGVTb2NrZXRJZHMoKTtcbiAgdGhpcy5lbWl0QWxsKCdyZWNvbm5lY3QnLCBhdHRlbXB0KTtcbn07XG4iLCIvKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXNcbiAqL1xuXG52YXIgWE1MSHR0cFJlcXVlc3QgPSByZXF1aXJlKCd4bWxodHRwcmVxdWVzdC1zc2wnKTtcbnZhciBYSFIgPSByZXF1aXJlKCcuL3BvbGxpbmcteGhyJyk7XG52YXIgSlNPTlAgPSByZXF1aXJlKCcuL3BvbGxpbmctanNvbnAnKTtcbnZhciB3ZWJzb2NrZXQgPSByZXF1aXJlKCcuL3dlYnNvY2tldCcpO1xuXG4vKipcbiAqIEV4cG9ydCB0cmFuc3BvcnRzLlxuICovXG5cbmV4cG9ydHMucG9sbGluZyA9IHBvbGxpbmc7XG5leHBvcnRzLndlYnNvY2tldCA9IHdlYnNvY2tldDtcblxuLyoqXG4gKiBQb2xsaW5nIHRyYW5zcG9ydCBwb2x5bW9ycGhpYyBjb25zdHJ1Y3Rvci5cbiAqIERlY2lkZXMgb24geGhyIHZzIGpzb25wIGJhc2VkIG9uIGZlYXR1cmUgZGV0ZWN0aW9uLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHBvbGxpbmcgKG9wdHMpIHtcbiAgdmFyIHhocjtcbiAgdmFyIHhkID0gZmFsc2U7XG4gIHZhciB4cyA9IGZhbHNlO1xuICB2YXIganNvbnAgPSBmYWxzZSAhPT0gb3B0cy5qc29ucDtcblxuICBpZiAoZ2xvYmFsLmxvY2F0aW9uKSB7XG4gICAgdmFyIGlzU1NMID0gJ2h0dHBzOicgPT09IGxvY2F0aW9uLnByb3RvY29sO1xuICAgIHZhciBwb3J0ID0gbG9jYXRpb24ucG9ydDtcblxuICAgIC8vIHNvbWUgdXNlciBhZ2VudHMgaGF2ZSBlbXB0eSBgbG9jYXRpb24ucG9ydGBcbiAgICBpZiAoIXBvcnQpIHtcbiAgICAgIHBvcnQgPSBpc1NTTCA/IDQ0MyA6IDgwO1xuICAgIH1cblxuICAgIHhkID0gb3B0cy5ob3N0bmFtZSAhPT0gbG9jYXRpb24uaG9zdG5hbWUgfHwgcG9ydCAhPT0gb3B0cy5wb3J0O1xuICAgIHhzID0gb3B0cy5zZWN1cmUgIT09IGlzU1NMO1xuICB9XG5cbiAgb3B0cy54ZG9tYWluID0geGQ7XG4gIG9wdHMueHNjaGVtZSA9IHhzO1xuICB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3Qob3B0cyk7XG5cbiAgaWYgKCdvcGVuJyBpbiB4aHIgJiYgIW9wdHMuZm9yY2VKU09OUCkge1xuICAgIHJldHVybiBuZXcgWEhSKG9wdHMpO1xuICB9IGVsc2Uge1xuICAgIGlmICghanNvbnApIHRocm93IG5ldyBFcnJvcignSlNPTlAgZGlzYWJsZWQnKTtcbiAgICByZXR1cm4gbmV3IEpTT05QKG9wdHMpO1xuICB9XG59XG4iLCIvKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxudmFyIFRyYW5zcG9ydCA9IHJlcXVpcmUoJy4uL3RyYW5zcG9ydCcpO1xudmFyIHBhcnNlcXMgPSByZXF1aXJlKCdwYXJzZXFzJyk7XG52YXIgcGFyc2VyID0gcmVxdWlyZSgnZW5naW5lLmlvLXBhcnNlcicpO1xudmFyIGluaGVyaXQgPSByZXF1aXJlKCdjb21wb25lbnQtaW5oZXJpdCcpO1xudmFyIHllYXN0ID0gcmVxdWlyZSgneWVhc3QnKTtcbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ2VuZ2luZS5pby1jbGllbnQ6cG9sbGluZycpO1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gUG9sbGluZztcblxuLyoqXG4gKiBJcyBYSFIyIHN1cHBvcnRlZD9cbiAqL1xuXG52YXIgaGFzWEhSMiA9IChmdW5jdGlvbiAoKSB7XG4gIHZhciBYTUxIdHRwUmVxdWVzdCA9IHJlcXVpcmUoJ3htbGh0dHByZXF1ZXN0LXNzbCcpO1xuICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KHsgeGRvbWFpbjogZmFsc2UgfSk7XG4gIHJldHVybiBudWxsICE9IHhoci5yZXNwb25zZVR5cGU7XG59KSgpO1xuXG4vKipcbiAqIFBvbGxpbmcgaW50ZXJmYWNlLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBQb2xsaW5nIChvcHRzKSB7XG4gIHZhciBmb3JjZUJhc2U2NCA9IChvcHRzICYmIG9wdHMuZm9yY2VCYXNlNjQpO1xuICBpZiAoIWhhc1hIUjIgfHwgZm9yY2VCYXNlNjQpIHtcbiAgICB0aGlzLnN1cHBvcnRzQmluYXJ5ID0gZmFsc2U7XG4gIH1cbiAgVHJhbnNwb3J0LmNhbGwodGhpcywgb3B0cyk7XG59XG5cbi8qKlxuICogSW5oZXJpdHMgZnJvbSBUcmFuc3BvcnQuXG4gKi9cblxuaW5oZXJpdChQb2xsaW5nLCBUcmFuc3BvcnQpO1xuXG4vKipcbiAqIFRyYW5zcG9ydCBuYW1lLlxuICovXG5cblBvbGxpbmcucHJvdG90eXBlLm5hbWUgPSAncG9sbGluZyc7XG5cbi8qKlxuICogT3BlbnMgdGhlIHNvY2tldCAodHJpZ2dlcnMgcG9sbGluZykuIFdlIHdyaXRlIGEgUElORyBtZXNzYWdlIHRvIGRldGVybWluZVxuICogd2hlbiB0aGUgdHJhbnNwb3J0IGlzIG9wZW4uXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUG9sbGluZy5wcm90b3R5cGUuZG9PcGVuID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLnBvbGwoKTtcbn07XG5cbi8qKlxuICogUGF1c2VzIHBvbGxpbmcuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgdXBvbiBidWZmZXJzIGFyZSBmbHVzaGVkIGFuZCB0cmFuc3BvcnQgaXMgcGF1c2VkXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Qb2xsaW5nLnByb3RvdHlwZS5wYXVzZSA9IGZ1bmN0aW9uIChvblBhdXNlKSB7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICB0aGlzLnJlYWR5U3RhdGUgPSAncGF1c2luZyc7XG5cbiAgZnVuY3Rpb24gcGF1c2UgKCkge1xuICAgIGRlYnVnKCdwYXVzZWQnKTtcbiAgICBzZWxmLnJlYWR5U3RhdGUgPSAncGF1c2VkJztcbiAgICBvblBhdXNlKCk7XG4gIH1cblxuICBpZiAodGhpcy5wb2xsaW5nIHx8ICF0aGlzLndyaXRhYmxlKSB7XG4gICAgdmFyIHRvdGFsID0gMDtcblxuICAgIGlmICh0aGlzLnBvbGxpbmcpIHtcbiAgICAgIGRlYnVnKCd3ZSBhcmUgY3VycmVudGx5IHBvbGxpbmcgLSB3YWl0aW5nIHRvIHBhdXNlJyk7XG4gICAgICB0b3RhbCsrO1xuICAgICAgdGhpcy5vbmNlKCdwb2xsQ29tcGxldGUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGRlYnVnKCdwcmUtcGF1c2UgcG9sbGluZyBjb21wbGV0ZScpO1xuICAgICAgICAtLXRvdGFsIHx8IHBhdXNlKCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMud3JpdGFibGUpIHtcbiAgICAgIGRlYnVnKCd3ZSBhcmUgY3VycmVudGx5IHdyaXRpbmcgLSB3YWl0aW5nIHRvIHBhdXNlJyk7XG4gICAgICB0b3RhbCsrO1xuICAgICAgdGhpcy5vbmNlKCdkcmFpbicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZGVidWcoJ3ByZS1wYXVzZSB3cml0aW5nIGNvbXBsZXRlJyk7XG4gICAgICAgIC0tdG90YWwgfHwgcGF1c2UoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBwYXVzZSgpO1xuICB9XG59O1xuXG4vKipcbiAqIFN0YXJ0cyBwb2xsaW5nIGN5Y2xlLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuUG9sbGluZy5wcm90b3R5cGUucG9sbCA9IGZ1bmN0aW9uICgpIHtcbiAgZGVidWcoJ3BvbGxpbmcnKTtcbiAgdGhpcy5wb2xsaW5nID0gdHJ1ZTtcbiAgdGhpcy5kb1BvbGwoKTtcbiAgdGhpcy5lbWl0KCdwb2xsJyk7XG59O1xuXG4vKipcbiAqIE92ZXJsb2FkcyBvbkRhdGEgdG8gZGV0ZWN0IHBheWxvYWRzLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblBvbGxpbmcucHJvdG90eXBlLm9uRGF0YSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgZGVidWcoJ3BvbGxpbmcgZ290IGRhdGEgJXMnLCBkYXRhKTtcbiAgdmFyIGNhbGxiYWNrID0gZnVuY3Rpb24gKHBhY2tldCwgaW5kZXgsIHRvdGFsKSB7XG4gICAgLy8gaWYgaXRzIHRoZSBmaXJzdCBtZXNzYWdlIHdlIGNvbnNpZGVyIHRoZSB0cmFuc3BvcnQgb3BlblxuICAgIGlmICgnb3BlbmluZycgPT09IHNlbGYucmVhZHlTdGF0ZSkge1xuICAgICAgc2VsZi5vbk9wZW4oKTtcbiAgICB9XG5cbiAgICAvLyBpZiBpdHMgYSBjbG9zZSBwYWNrZXQsIHdlIGNsb3NlIHRoZSBvbmdvaW5nIHJlcXVlc3RzXG4gICAgaWYgKCdjbG9zZScgPT09IHBhY2tldC50eXBlKSB7XG4gICAgICBzZWxmLm9uQ2xvc2UoKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBvdGhlcndpc2UgYnlwYXNzIG9uRGF0YSBhbmQgaGFuZGxlIHRoZSBtZXNzYWdlXG4gICAgc2VsZi5vblBhY2tldChwYWNrZXQpO1xuICB9O1xuXG4gIC8vIGRlY29kZSBwYXlsb2FkXG4gIHBhcnNlci5kZWNvZGVQYXlsb2FkKGRhdGEsIHRoaXMuc29ja2V0LmJpbmFyeVR5cGUsIGNhbGxiYWNrKTtcblxuICAvLyBpZiBhbiBldmVudCBkaWQgbm90IHRyaWdnZXIgY2xvc2luZ1xuICBpZiAoJ2Nsb3NlZCcgIT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgIC8vIGlmIHdlIGdvdCBkYXRhIHdlJ3JlIG5vdCBwb2xsaW5nXG4gICAgdGhpcy5wb2xsaW5nID0gZmFsc2U7XG4gICAgdGhpcy5lbWl0KCdwb2xsQ29tcGxldGUnKTtcblxuICAgIGlmICgnb3BlbicgPT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgICAgdGhpcy5wb2xsKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlYnVnKCdpZ25vcmluZyBwb2xsIC0gdHJhbnNwb3J0IHN0YXRlIFwiJXNcIicsIHRoaXMucmVhZHlTdGF0ZSk7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIEZvciBwb2xsaW5nLCBzZW5kIGEgY2xvc2UgcGFja2V0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblBvbGxpbmcucHJvdG90eXBlLmRvQ2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICBmdW5jdGlvbiBjbG9zZSAoKSB7XG4gICAgZGVidWcoJ3dyaXRpbmcgY2xvc2UgcGFja2V0Jyk7XG4gICAgc2VsZi53cml0ZShbeyB0eXBlOiAnY2xvc2UnIH1dKTtcbiAgfVxuXG4gIGlmICgnb3BlbicgPT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgIGRlYnVnKCd0cmFuc3BvcnQgb3BlbiAtIGNsb3NpbmcnKTtcbiAgICBjbG9zZSgpO1xuICB9IGVsc2Uge1xuICAgIC8vIGluIGNhc2Ugd2UncmUgdHJ5aW5nIHRvIGNsb3NlIHdoaWxlXG4gICAgLy8gaGFuZHNoYWtpbmcgaXMgaW4gcHJvZ3Jlc3MgKEdILTE2NClcbiAgICBkZWJ1ZygndHJhbnNwb3J0IG5vdCBvcGVuIC0gZGVmZXJyaW5nIGNsb3NlJyk7XG4gICAgdGhpcy5vbmNlKCdvcGVuJywgY2xvc2UpO1xuICB9XG59O1xuXG4vKipcbiAqIFdyaXRlcyBhIHBhY2tldHMgcGF5bG9hZC5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBkYXRhIHBhY2tldHNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGRyYWluIGNhbGxiYWNrXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Qb2xsaW5nLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIChwYWNrZXRzKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdGhpcy53cml0YWJsZSA9IGZhbHNlO1xuICB2YXIgY2FsbGJhY2tmbiA9IGZ1bmN0aW9uICgpIHtcbiAgICBzZWxmLndyaXRhYmxlID0gdHJ1ZTtcbiAgICBzZWxmLmVtaXQoJ2RyYWluJyk7XG4gIH07XG5cbiAgcGFyc2VyLmVuY29kZVBheWxvYWQocGFja2V0cywgdGhpcy5zdXBwb3J0c0JpbmFyeSwgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICBzZWxmLmRvV3JpdGUoZGF0YSwgY2FsbGJhY2tmbik7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBHZW5lcmF0ZXMgdXJpIGZvciBjb25uZWN0aW9uLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblBvbGxpbmcucHJvdG90eXBlLnVyaSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHF1ZXJ5ID0gdGhpcy5xdWVyeSB8fCB7fTtcbiAgdmFyIHNjaGVtYSA9IHRoaXMuc2VjdXJlID8gJ2h0dHBzJyA6ICdodHRwJztcbiAgdmFyIHBvcnQgPSAnJztcblxuICAvLyBjYWNoZSBidXN0aW5nIGlzIGZvcmNlZFxuICBpZiAoZmFsc2UgIT09IHRoaXMudGltZXN0YW1wUmVxdWVzdHMpIHtcbiAgICBxdWVyeVt0aGlzLnRpbWVzdGFtcFBhcmFtXSA9IHllYXN0KCk7XG4gIH1cblxuICBpZiAoIXRoaXMuc3VwcG9ydHNCaW5hcnkgJiYgIXF1ZXJ5LnNpZCkge1xuICAgIHF1ZXJ5LmI2NCA9IDE7XG4gIH1cblxuICBxdWVyeSA9IHBhcnNlcXMuZW5jb2RlKHF1ZXJ5KTtcblxuICAvLyBhdm9pZCBwb3J0IGlmIGRlZmF1bHQgZm9yIHNjaGVtYVxuICBpZiAodGhpcy5wb3J0ICYmICgoJ2h0dHBzJyA9PT0gc2NoZW1hICYmIE51bWJlcih0aGlzLnBvcnQpICE9PSA0NDMpIHx8XG4gICAgICgnaHR0cCcgPT09IHNjaGVtYSAmJiBOdW1iZXIodGhpcy5wb3J0KSAhPT0gODApKSkge1xuICAgIHBvcnQgPSAnOicgKyB0aGlzLnBvcnQ7XG4gIH1cblxuICAvLyBwcmVwZW5kID8gdG8gcXVlcnlcbiAgaWYgKHF1ZXJ5Lmxlbmd0aCkge1xuICAgIHF1ZXJ5ID0gJz8nICsgcXVlcnk7XG4gIH1cblxuICB2YXIgaXB2NiA9IHRoaXMuaG9zdG5hbWUuaW5kZXhPZignOicpICE9PSAtMTtcbiAgcmV0dXJuIHNjaGVtYSArICc6Ly8nICsgKGlwdjYgPyAnWycgKyB0aGlzLmhvc3RuYW1lICsgJ10nIDogdGhpcy5ob3N0bmFtZSkgKyBwb3J0ICsgdGhpcy5wYXRoICsgcXVlcnk7XG59O1xuIiwiLyogZ2xvYmFsIEJsb2IgRmlsZSAqL1xuXG4vKlxuICogTW9kdWxlIHJlcXVpcmVtZW50cy5cbiAqL1xuXG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJ2lzYXJyYXknKTtcblxudmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbnZhciB3aXRoTmF0aXZlQmxvYiA9IHR5cGVvZiBCbG9iID09PSAnZnVuY3Rpb24nIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgQmxvYiAhPT0gJ3VuZGVmaW5lZCcgJiYgdG9TdHJpbmcuY2FsbChCbG9iKSA9PT0gJ1tvYmplY3QgQmxvYkNvbnN0cnVjdG9yXSc7XG52YXIgd2l0aE5hdGl2ZUZpbGUgPSB0eXBlb2YgRmlsZSA9PT0gJ2Z1bmN0aW9uJyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIEZpbGUgIT09ICd1bmRlZmluZWQnICYmIHRvU3RyaW5nLmNhbGwoRmlsZSkgPT09ICdbb2JqZWN0IEZpbGVDb25zdHJ1Y3Rvcl0nO1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gaGFzQmluYXJ5O1xuXG4vKipcbiAqIENoZWNrcyBmb3IgYmluYXJ5IGRhdGEuXG4gKlxuICogU3VwcG9ydHMgQnVmZmVyLCBBcnJheUJ1ZmZlciwgQmxvYiBhbmQgRmlsZS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYW55dGhpbmdcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gaGFzQmluYXJ5IChvYmopIHtcbiAgaWYgKCFvYmogfHwgdHlwZW9mIG9iaiAhPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoaXNBcnJheShvYmopKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBvYmoubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBpZiAoaGFzQmluYXJ5KG9ialtpXSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmICgodHlwZW9mIEJ1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJiBCdWZmZXIuaXNCdWZmZXIgJiYgQnVmZmVyLmlzQnVmZmVyKG9iaikpIHx8XG4gICAgKHR5cGVvZiBBcnJheUJ1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJiBvYmogaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikgfHxcbiAgICAod2l0aE5hdGl2ZUJsb2IgJiYgb2JqIGluc3RhbmNlb2YgQmxvYikgfHxcbiAgICAod2l0aE5hdGl2ZUZpbGUgJiYgb2JqIGluc3RhbmNlb2YgRmlsZSlcbiAgKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvLyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9BdXRvbWF0dGljL2hhcy1iaW5hcnkvcHVsbC80XG4gIGlmIChvYmoudG9KU09OICYmIHR5cGVvZiBvYmoudG9KU09OID09PSAnZnVuY3Rpb24nICYmIGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gaGFzQmluYXJ5KG9iai50b0pTT04oKSwgdHJ1ZSk7XG4gIH1cblxuICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkgJiYgaGFzQmluYXJ5KG9ialtrZXldKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuIiwiLyogZ2xvYmFscyBfX3dlYnBhY2tfYW1kX29wdGlvbnNfXyAqL1xubW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfYW1kX29wdGlvbnNfXztcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGFscGhhYmV0ID0gJzAxMjM0NTY3ODlBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6LV8nLnNwbGl0KCcnKVxuICAsIGxlbmd0aCA9IDY0XG4gICwgbWFwID0ge31cbiAgLCBzZWVkID0gMFxuICAsIGkgPSAwXG4gICwgcHJldjtcblxuLyoqXG4gKiBSZXR1cm4gYSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBzcGVjaWZpZWQgbnVtYmVyLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBudW0gVGhlIG51bWJlciB0byBjb252ZXJ0LlxuICogQHJldHVybnMge1N0cmluZ30gVGhlIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgbnVtYmVyLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gZW5jb2RlKG51bSkge1xuICB2YXIgZW5jb2RlZCA9ICcnO1xuXG4gIGRvIHtcbiAgICBlbmNvZGVkID0gYWxwaGFiZXRbbnVtICUgbGVuZ3RoXSArIGVuY29kZWQ7XG4gICAgbnVtID0gTWF0aC5mbG9vcihudW0gLyBsZW5ndGgpO1xuICB9IHdoaWxlIChudW0gPiAwKTtcblxuICByZXR1cm4gZW5jb2RlZDtcbn1cblxuLyoqXG4gKiBSZXR1cm4gdGhlIGludGVnZXIgdmFsdWUgc3BlY2lmaWVkIGJ5IHRoZSBnaXZlbiBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0ciBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBUaGUgaW50ZWdlciB2YWx1ZSByZXByZXNlbnRlZCBieSB0aGUgc3RyaW5nLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gZGVjb2RlKHN0cikge1xuICB2YXIgZGVjb2RlZCA9IDA7XG5cbiAgZm9yIChpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgIGRlY29kZWQgPSBkZWNvZGVkICogbGVuZ3RoICsgbWFwW3N0ci5jaGFyQXQoaSldO1xuICB9XG5cbiAgcmV0dXJuIGRlY29kZWQ7XG59XG5cbi8qKlxuICogWWVhc3Q6IEEgdGlueSBncm93aW5nIGlkIGdlbmVyYXRvci5cbiAqXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBBIHVuaXF1ZSBpZC5cbiAqIEBhcGkgcHVibGljXG4gKi9cbmZ1bmN0aW9uIHllYXN0KCkge1xuICB2YXIgbm93ID0gZW5jb2RlKCtuZXcgRGF0ZSgpKTtcblxuICBpZiAobm93ICE9PSBwcmV2KSByZXR1cm4gc2VlZCA9IDAsIHByZXYgPSBub3c7XG4gIHJldHVybiBub3cgKycuJysgZW5jb2RlKHNlZWQrKyk7XG59XG5cbi8vXG4vLyBNYXAgZWFjaCBjaGFyYWN0ZXIgdG8gaXRzIGluZGV4LlxuLy9cbmZvciAoOyBpIDwgbGVuZ3RoOyBpKyspIG1hcFthbHBoYWJldFtpXV0gPSBpO1xuXG4vL1xuLy8gRXhwb3NlIHRoZSBgeWVhc3RgLCBgZW5jb2RlYCBhbmQgYGRlY29kZWAgZnVuY3Rpb25zLlxuLy9cbnllYXN0LmVuY29kZSA9IGVuY29kZTtcbnllYXN0LmRlY29kZSA9IGRlY29kZTtcbm1vZHVsZS5leHBvcnRzID0geWVhc3Q7XG4iLCJcbnZhciBpbmRleE9mID0gW10uaW5kZXhPZjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihhcnIsIG9iail7XG4gIGlmIChpbmRleE9mKSByZXR1cm4gYXJyLmluZGV4T2Yob2JqKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoYXJyW2ldID09PSBvYmopIHJldHVybiBpO1xuICB9XG4gIHJldHVybiAtMTtcbn07IiwiXG4vKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxudmFyIHBhcnNlciA9IHJlcXVpcmUoJ3NvY2tldC5pby1wYXJzZXInKTtcbnZhciBFbWl0dGVyID0gcmVxdWlyZSgnY29tcG9uZW50LWVtaXR0ZXInKTtcbnZhciB0b0FycmF5ID0gcmVxdWlyZSgndG8tYXJyYXknKTtcbnZhciBvbiA9IHJlcXVpcmUoJy4vb24nKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnY29tcG9uZW50LWJpbmQnKTtcbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ3NvY2tldC5pby1jbGllbnQ6c29ja2V0Jyk7XG52YXIgcGFyc2VxcyA9IHJlcXVpcmUoJ3BhcnNlcXMnKTtcbnZhciBoYXNCaW4gPSByZXF1aXJlKCdoYXMtYmluYXJ5MicpO1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IFNvY2tldDtcblxuLyoqXG4gKiBJbnRlcm5hbCBldmVudHMgKGJsYWNrbGlzdGVkKS5cbiAqIFRoZXNlIGV2ZW50cyBjYW4ndCBiZSBlbWl0dGVkIGJ5IHRoZSB1c2VyLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbnZhciBldmVudHMgPSB7XG4gIGNvbm5lY3Q6IDEsXG4gIGNvbm5lY3RfZXJyb3I6IDEsXG4gIGNvbm5lY3RfdGltZW91dDogMSxcbiAgY29ubmVjdGluZzogMSxcbiAgZGlzY29ubmVjdDogMSxcbiAgZXJyb3I6IDEsXG4gIHJlY29ubmVjdDogMSxcbiAgcmVjb25uZWN0X2F0dGVtcHQ6IDEsXG4gIHJlY29ubmVjdF9mYWlsZWQ6IDEsXG4gIHJlY29ubmVjdF9lcnJvcjogMSxcbiAgcmVjb25uZWN0aW5nOiAxLFxuICBwaW5nOiAxLFxuICBwb25nOiAxXG59O1xuXG4vKipcbiAqIFNob3J0Y3V0IHRvIGBFbWl0dGVyI2VtaXRgLlxuICovXG5cbnZhciBlbWl0ID0gRW1pdHRlci5wcm90b3R5cGUuZW1pdDtcblxuLyoqXG4gKiBgU29ja2V0YCBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIFNvY2tldCAoaW8sIG5zcCwgb3B0cykge1xuICB0aGlzLmlvID0gaW87XG4gIHRoaXMubnNwID0gbnNwO1xuICB0aGlzLmpzb24gPSB0aGlzOyAvLyBjb21wYXRcbiAgdGhpcy5pZHMgPSAwO1xuICB0aGlzLmFja3MgPSB7fTtcbiAgdGhpcy5yZWNlaXZlQnVmZmVyID0gW107XG4gIHRoaXMuc2VuZEJ1ZmZlciA9IFtdO1xuICB0aGlzLmNvbm5lY3RlZCA9IGZhbHNlO1xuICB0aGlzLmRpc2Nvbm5lY3RlZCA9IHRydWU7XG4gIHRoaXMuZmxhZ3MgPSB7fTtcbiAgaWYgKG9wdHMgJiYgb3B0cy5xdWVyeSkge1xuICAgIHRoaXMucXVlcnkgPSBvcHRzLnF1ZXJ5O1xuICB9XG4gIGlmICh0aGlzLmlvLmF1dG9Db25uZWN0KSB0aGlzLm9wZW4oKTtcbn1cblxuLyoqXG4gKiBNaXggaW4gYEVtaXR0ZXJgLlxuICovXG5cbkVtaXR0ZXIoU29ja2V0LnByb3RvdHlwZSk7XG5cbi8qKlxuICogU3Vic2NyaWJlIHRvIG9wZW4sIGNsb3NlIGFuZCBwYWNrZXQgZXZlbnRzXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5zdWJFdmVudHMgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLnN1YnMpIHJldHVybjtcblxuICB2YXIgaW8gPSB0aGlzLmlvO1xuICB0aGlzLnN1YnMgPSBbXG4gICAgb24oaW8sICdvcGVuJywgYmluZCh0aGlzLCAnb25vcGVuJykpLFxuICAgIG9uKGlvLCAncGFja2V0JywgYmluZCh0aGlzLCAnb25wYWNrZXQnKSksXG4gICAgb24oaW8sICdjbG9zZScsIGJpbmQodGhpcywgJ29uY2xvc2UnKSlcbiAgXTtcbn07XG5cbi8qKlxuICogXCJPcGVuc1wiIHRoZSBzb2NrZXQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9wZW4gPVxuU29ja2V0LnByb3RvdHlwZS5jb25uZWN0ID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5jb25uZWN0ZWQpIHJldHVybiB0aGlzO1xuXG4gIHRoaXMuc3ViRXZlbnRzKCk7XG4gIHRoaXMuaW8ub3BlbigpOyAvLyBlbnN1cmUgb3BlblxuICBpZiAoJ29wZW4nID09PSB0aGlzLmlvLnJlYWR5U3RhdGUpIHRoaXMub25vcGVuKCk7XG4gIHRoaXMuZW1pdCgnY29ubmVjdGluZycpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2VuZHMgYSBgbWVzc2FnZWAgZXZlbnQuXG4gKlxuICogQHJldHVybiB7U29ja2V0fSBzZWxmXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblNvY2tldC5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGFyZ3MgPSB0b0FycmF5KGFyZ3VtZW50cyk7XG4gIGFyZ3MudW5zaGlmdCgnbWVzc2FnZScpO1xuICB0aGlzLmVtaXQuYXBwbHkodGhpcywgYXJncyk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBPdmVycmlkZSBgZW1pdGAuXG4gKiBJZiB0aGUgZXZlbnQgaXMgaW4gYGV2ZW50c2AsIGl0J3MgZW1pdHRlZCBub3JtYWxseS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnQgbmFtZVxuICogQHJldHVybiB7U29ja2V0fSBzZWxmXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblNvY2tldC5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uIChldikge1xuICBpZiAoZXZlbnRzLmhhc093blByb3BlcnR5KGV2KSkge1xuICAgIGVtaXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHZhciBhcmdzID0gdG9BcnJheShhcmd1bWVudHMpO1xuICB2YXIgcGFja2V0ID0ge1xuICAgIHR5cGU6ICh0aGlzLmZsYWdzLmJpbmFyeSAhPT0gdW5kZWZpbmVkID8gdGhpcy5mbGFncy5iaW5hcnkgOiBoYXNCaW4oYXJncykpID8gcGFyc2VyLkJJTkFSWV9FVkVOVCA6IHBhcnNlci5FVkVOVCxcbiAgICBkYXRhOiBhcmdzXG4gIH07XG5cbiAgcGFja2V0Lm9wdGlvbnMgPSB7fTtcbiAgcGFja2V0Lm9wdGlvbnMuY29tcHJlc3MgPSAhdGhpcy5mbGFncyB8fCBmYWxzZSAhPT0gdGhpcy5mbGFncy5jb21wcmVzcztcblxuICAvLyBldmVudCBhY2sgY2FsbGJhY2tcbiAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBhcmdzW2FyZ3MubGVuZ3RoIC0gMV0pIHtcbiAgICBkZWJ1ZygnZW1pdHRpbmcgcGFja2V0IHdpdGggYWNrIGlkICVkJywgdGhpcy5pZHMpO1xuICAgIHRoaXMuYWNrc1t0aGlzLmlkc10gPSBhcmdzLnBvcCgpO1xuICAgIHBhY2tldC5pZCA9IHRoaXMuaWRzKys7XG4gIH1cblxuICBpZiAodGhpcy5jb25uZWN0ZWQpIHtcbiAgICB0aGlzLnBhY2tldChwYWNrZXQpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuc2VuZEJ1ZmZlci5wdXNoKHBhY2tldCk7XG4gIH1cblxuICB0aGlzLmZsYWdzID0ge307XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNlbmRzIGEgcGFja2V0LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXRcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUucGFja2V0ID0gZnVuY3Rpb24gKHBhY2tldCkge1xuICBwYWNrZXQubnNwID0gdGhpcy5uc3A7XG4gIHRoaXMuaW8ucGFja2V0KHBhY2tldCk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIGVuZ2luZSBgb3BlbmAuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vbm9wZW4gPSBmdW5jdGlvbiAoKSB7XG4gIGRlYnVnKCd0cmFuc3BvcnQgaXMgb3BlbiAtIGNvbm5lY3RpbmcnKTtcblxuICAvLyB3cml0ZSBjb25uZWN0IHBhY2tldCBpZiBuZWNlc3NhcnlcbiAgaWYgKCcvJyAhPT0gdGhpcy5uc3ApIHtcbiAgICBpZiAodGhpcy5xdWVyeSkge1xuICAgICAgdmFyIHF1ZXJ5ID0gdHlwZW9mIHRoaXMucXVlcnkgPT09ICdvYmplY3QnID8gcGFyc2Vxcy5lbmNvZGUodGhpcy5xdWVyeSkgOiB0aGlzLnF1ZXJ5O1xuICAgICAgZGVidWcoJ3NlbmRpbmcgY29ubmVjdCBwYWNrZXQgd2l0aCBxdWVyeSAlcycsIHF1ZXJ5KTtcbiAgICAgIHRoaXMucGFja2V0KHt0eXBlOiBwYXJzZXIuQ09OTkVDVCwgcXVlcnk6IHF1ZXJ5fSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucGFja2V0KHt0eXBlOiBwYXJzZXIuQ09OTkVDVH0pO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBlbmdpbmUgYGNsb3NlYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gcmVhc29uXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9uY2xvc2UgPSBmdW5jdGlvbiAocmVhc29uKSB7XG4gIGRlYnVnKCdjbG9zZSAoJXMpJywgcmVhc29uKTtcbiAgdGhpcy5jb25uZWN0ZWQgPSBmYWxzZTtcbiAgdGhpcy5kaXNjb25uZWN0ZWQgPSB0cnVlO1xuICBkZWxldGUgdGhpcy5pZDtcbiAgdGhpcy5lbWl0KCdkaXNjb25uZWN0JywgcmVhc29uKTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHdpdGggc29ja2V0IHBhY2tldC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGFja2V0XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9ucGFja2V0ID0gZnVuY3Rpb24gKHBhY2tldCkge1xuICB2YXIgc2FtZU5hbWVzcGFjZSA9IHBhY2tldC5uc3AgPT09IHRoaXMubnNwO1xuICB2YXIgcm9vdE5hbWVzcGFjZUVycm9yID0gcGFja2V0LnR5cGUgPT09IHBhcnNlci5FUlJPUiAmJiBwYWNrZXQubnNwID09PSAnLyc7XG5cbiAgaWYgKCFzYW1lTmFtZXNwYWNlICYmICFyb290TmFtZXNwYWNlRXJyb3IpIHJldHVybjtcblxuICBzd2l0Y2ggKHBhY2tldC50eXBlKSB7XG4gICAgY2FzZSBwYXJzZXIuQ09OTkVDVDpcbiAgICAgIHRoaXMub25jb25uZWN0KCk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgcGFyc2VyLkVWRU5UOlxuICAgICAgdGhpcy5vbmV2ZW50KHBhY2tldCk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgcGFyc2VyLkJJTkFSWV9FVkVOVDpcbiAgICAgIHRoaXMub25ldmVudChwYWNrZXQpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIHBhcnNlci5BQ0s6XG4gICAgICB0aGlzLm9uYWNrKHBhY2tldCk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgcGFyc2VyLkJJTkFSWV9BQ0s6XG4gICAgICB0aGlzLm9uYWNrKHBhY2tldCk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgcGFyc2VyLkRJU0NPTk5FQ1Q6XG4gICAgICB0aGlzLm9uZGlzY29ubmVjdCgpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIHBhcnNlci5FUlJPUjpcbiAgICAgIHRoaXMuZW1pdCgnZXJyb3InLCBwYWNrZXQuZGF0YSk7XG4gICAgICBicmVhaztcbiAgfVxufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBhIHNlcnZlciBldmVudC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGFja2V0XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9uZXZlbnQgPSBmdW5jdGlvbiAocGFja2V0KSB7XG4gIHZhciBhcmdzID0gcGFja2V0LmRhdGEgfHwgW107XG4gIGRlYnVnKCdlbWl0dGluZyBldmVudCAlaicsIGFyZ3MpO1xuXG4gIGlmIChudWxsICE9IHBhY2tldC5pZCkge1xuICAgIGRlYnVnKCdhdHRhY2hpbmcgYWNrIGNhbGxiYWNrIHRvIGV2ZW50Jyk7XG4gICAgYXJncy5wdXNoKHRoaXMuYWNrKHBhY2tldC5pZCkpO1xuICB9XG5cbiAgaWYgKHRoaXMuY29ubmVjdGVkKSB7XG4gICAgZW1pdC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnJlY2VpdmVCdWZmZXIucHVzaChhcmdzKTtcbiAgfVxufTtcblxuLyoqXG4gKiBQcm9kdWNlcyBhbiBhY2sgY2FsbGJhY2sgdG8gZW1pdCB3aXRoIGFuIGV2ZW50LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUuYWNrID0gZnVuY3Rpb24gKGlkKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIHNlbnQgPSBmYWxzZTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAvLyBwcmV2ZW50IGRvdWJsZSBjYWxsYmFja3NcbiAgICBpZiAoc2VudCkgcmV0dXJuO1xuICAgIHNlbnQgPSB0cnVlO1xuICAgIHZhciBhcmdzID0gdG9BcnJheShhcmd1bWVudHMpO1xuICAgIGRlYnVnKCdzZW5kaW5nIGFjayAlaicsIGFyZ3MpO1xuXG4gICAgc2VsZi5wYWNrZXQoe1xuICAgICAgdHlwZTogaGFzQmluKGFyZ3MpID8gcGFyc2VyLkJJTkFSWV9BQ0sgOiBwYXJzZXIuQUNLLFxuICAgICAgaWQ6IGlkLFxuICAgICAgZGF0YTogYXJnc1xuICAgIH0pO1xuICB9O1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBhIHNlcnZlciBhY2tub3dsZWdlbWVudC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGFja2V0XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9uYWNrID0gZnVuY3Rpb24gKHBhY2tldCkge1xuICB2YXIgYWNrID0gdGhpcy5hY2tzW3BhY2tldC5pZF07XG4gIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2YgYWNrKSB7XG4gICAgZGVidWcoJ2NhbGxpbmcgYWNrICVzIHdpdGggJWonLCBwYWNrZXQuaWQsIHBhY2tldC5kYXRhKTtcbiAgICBhY2suYXBwbHkodGhpcywgcGFja2V0LmRhdGEpO1xuICAgIGRlbGV0ZSB0aGlzLmFja3NbcGFja2V0LmlkXTtcbiAgfSBlbHNlIHtcbiAgICBkZWJ1ZygnYmFkIGFjayAlcycsIHBhY2tldC5pZCk7XG4gIH1cbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gc2VydmVyIGNvbm5lY3QuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vbmNvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuY29ubmVjdGVkID0gdHJ1ZTtcbiAgdGhpcy5kaXNjb25uZWN0ZWQgPSBmYWxzZTtcbiAgdGhpcy5lbWl0KCdjb25uZWN0Jyk7XG4gIHRoaXMuZW1pdEJ1ZmZlcmVkKCk7XG59O1xuXG4vKipcbiAqIEVtaXQgYnVmZmVyZWQgZXZlbnRzIChyZWNlaXZlZCBhbmQgZW1pdHRlZCkuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5lbWl0QnVmZmVyZWQgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBpO1xuICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5yZWNlaXZlQnVmZmVyLmxlbmd0aDsgaSsrKSB7XG4gICAgZW1pdC5hcHBseSh0aGlzLCB0aGlzLnJlY2VpdmVCdWZmZXJbaV0pO1xuICB9XG4gIHRoaXMucmVjZWl2ZUJ1ZmZlciA9IFtdO1xuXG4gIGZvciAoaSA9IDA7IGkgPCB0aGlzLnNlbmRCdWZmZXIubGVuZ3RoOyBpKyspIHtcbiAgICB0aGlzLnBhY2tldCh0aGlzLnNlbmRCdWZmZXJbaV0pO1xuICB9XG4gIHRoaXMuc2VuZEJ1ZmZlciA9IFtdO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBzZXJ2ZXIgZGlzY29ubmVjdC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9uZGlzY29ubmVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgZGVidWcoJ3NlcnZlciBkaXNjb25uZWN0ICglcyknLCB0aGlzLm5zcCk7XG4gIHRoaXMuZGVzdHJveSgpO1xuICB0aGlzLm9uY2xvc2UoJ2lvIHNlcnZlciBkaXNjb25uZWN0Jyk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIGZvcmNlZCBjbGllbnQvc2VydmVyIHNpZGUgZGlzY29ubmVjdGlvbnMsXG4gKiB0aGlzIG1ldGhvZCBlbnN1cmVzIHRoZSBtYW5hZ2VyIHN0b3BzIHRyYWNraW5nIHVzIGFuZFxuICogdGhhdCByZWNvbm5lY3Rpb25zIGRvbid0IGdldCB0cmlnZ2VyZWQgZm9yIHRoaXMuXG4gKlxuICogQGFwaSBwcml2YXRlLlxuICovXG5cblNvY2tldC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMuc3Vicykge1xuICAgIC8vIGNsZWFuIHN1YnNjcmlwdGlvbnMgdG8gYXZvaWQgcmVjb25uZWN0aW9uc1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5zdWJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLnN1YnNbaV0uZGVzdHJveSgpO1xuICAgIH1cbiAgICB0aGlzLnN1YnMgPSBudWxsO1xuICB9XG5cbiAgdGhpcy5pby5kZXN0cm95KHRoaXMpO1xufTtcblxuLyoqXG4gKiBEaXNjb25uZWN0cyB0aGUgc29ja2V0IG1hbnVhbGx5LlxuICpcbiAqIEByZXR1cm4ge1NvY2tldH0gc2VsZlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLmNsb3NlID1cblNvY2tldC5wcm90b3R5cGUuZGlzY29ubmVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMuY29ubmVjdGVkKSB7XG4gICAgZGVidWcoJ3BlcmZvcm1pbmcgZGlzY29ubmVjdCAoJXMpJywgdGhpcy5uc3ApO1xuICAgIHRoaXMucGFja2V0KHsgdHlwZTogcGFyc2VyLkRJU0NPTk5FQ1QgfSk7XG4gIH1cblxuICAvLyByZW1vdmUgc29ja2V0IGZyb20gcG9vbFxuICB0aGlzLmRlc3Ryb3koKTtcblxuICBpZiAodGhpcy5jb25uZWN0ZWQpIHtcbiAgICAvLyBmaXJlIGV2ZW50c1xuICAgIHRoaXMub25jbG9zZSgnaW8gY2xpZW50IGRpc2Nvbm5lY3QnKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2V0cyB0aGUgY29tcHJlc3MgZmxhZy5cbiAqXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGlmIGB0cnVlYCwgY29tcHJlc3NlcyB0aGUgc2VuZGluZyBkYXRhXG4gKiBAcmV0dXJuIHtTb2NrZXR9IHNlbGZcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5jb21wcmVzcyA9IGZ1bmN0aW9uIChjb21wcmVzcykge1xuICB0aGlzLmZsYWdzLmNvbXByZXNzID0gY29tcHJlc3M7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZXRzIHRoZSBiaW5hcnkgZmxhZ1xuICpcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gd2hldGhlciB0aGUgZW1pdHRlZCBkYXRhIGNvbnRhaW5zIGJpbmFyeVxuICogQHJldHVybiB7U29ja2V0fSBzZWxmXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblNvY2tldC5wcm90b3R5cGUuYmluYXJ5ID0gZnVuY3Rpb24gKGJpbmFyeSkge1xuICB0aGlzLmZsYWdzLmJpbmFyeSA9IGJpbmFyeTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuIiwiXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gb247XG5cbi8qKlxuICogSGVscGVyIGZvciBzdWJzY3JpcHRpb25zLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fEV2ZW50RW1pdHRlcn0gb2JqIHdpdGggYEVtaXR0ZXJgIG1peGluIG9yIGBFdmVudEVtaXR0ZXJgXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnQgbmFtZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gb24gKG9iaiwgZXYsIGZuKSB7XG4gIG9iai5vbihldiwgZm4pO1xuICByZXR1cm4ge1xuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uICgpIHtcbiAgICAgIG9iai5yZW1vdmVMaXN0ZW5lcihldiwgZm4pO1xuICAgIH1cbiAgfTtcbn1cbiIsIi8qKlxuICogU2xpY2UgcmVmZXJlbmNlLlxuICovXG5cbnZhciBzbGljZSA9IFtdLnNsaWNlO1xuXG4vKipcbiAqIEJpbmQgYG9iamAgdG8gYGZuYC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufFN0cmluZ30gZm4gb3Igc3RyaW5nXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvYmosIGZuKXtcbiAgaWYgKCdzdHJpbmcnID09IHR5cGVvZiBmbikgZm4gPSBvYmpbZm5dO1xuICBpZiAoJ2Z1bmN0aW9uJyAhPSB0eXBlb2YgZm4pIHRocm93IG5ldyBFcnJvcignYmluZCgpIHJlcXVpcmVzIGEgZnVuY3Rpb24nKTtcbiAgdmFyIGFyZ3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMik7XG4gIHJldHVybiBmdW5jdGlvbigpe1xuICAgIHJldHVybiBmbi5hcHBseShvYmosIGFyZ3MuY29uY2F0KHNsaWNlLmNhbGwoYXJndW1lbnRzKSkpO1xuICB9XG59O1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XHJcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9zdHlsZXMuanMnO1xyXG5cclxuaW1wb3J0IHNvY2tldGlvIGZyb20gJ3NvY2tldC5pby1jbGllbnQnO1xyXG5jb25zdCBzb2NrZXQgPSBzb2NrZXRpby5jb25uZWN0KCdodHRwOi8vbG9jYWxob3N0OjMwMDEnKTtcclxuXHJcbmNsYXNzIENoYXRGb3JtIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcclxuICBjb25zdHJ1Y3RvciAocHJvcHMpIHtcclxuICAgIHN1cGVyKHByb3BzKTtcclxuICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgIG5hbWU6ICcnLFxyXG4gICAgICBtZXNzc2FnZTogJydcclxuICAgIH07XHJcbiAgfVxyXG4gIG5hbWVDaGFuZ2VkIChlKSB7XHJcbiAgICB0aGlzLnNldFN0YXRlKHtuYW1lOiBlLnRhcmdldC52YWx1ZX0pO1xyXG4gIH1cclxuICBtZXNzYWdlQ2hhbmdlZCAoZSkge1xyXG4gICAgdGhpcy5zZXRTdGF0ZSh7bWVzc2FnZTogZS50YXJnZXQudmFsdWV9KTtcclxuICB9XHJcbiAgc2VuZCAoKSB7XHJcbiAgICBzb2NrZXQuZW1pdCgnY2hhdC1tc2cnLCB7XHJcbiAgICAgIG5hbWU6IHRoaXMuc3RhdGUubmFtZSxcclxuICAgICAgbWVzc2FnZTogdGhpcy5zdGF0ZS5tZXNzYWdlXHJcbiAgICB9KTtcclxuICAgIHRoaXMuc2V0U3RhdGUoe21lc3NhZ2U6ICcnfSk7XHJcbiAgfVxyXG4gIHJlbmRlciAoKSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAvLyA8ZGl2IHN0eWxlPXtzdHlsZXMuZm9ybX0+XHJcbiAgICAgIDxkaXY+XHJcbiAgICAgICAg5ZCN5YmNOjxiciAvPlxyXG4gICAgICAgIDxpbnB1dCB2YWx1ZT17dGhpcy5zdGF0ZS5uYW1lfVxyXG4gICAgICAgICAgb25DaGFuZ2U9e2UgPT4gdGhpcy5uYW1lQ2hhbmdlZChlKX0gLz48YnIgLz5cclxuICAgICAgICDjg6Hjg4Pjgrvjg7zjgrg6PGJyIC8+XHJcbiAgICAgICAgPGlucHV0IHZhbHVlPXt0aGlzLnN0YXRlLm1lc3NhZ2V9XHJcbiAgICAgICAgICBvbkNoYW5nZT17ZSA9PiB0aGlzLm1lc3NhZ2VDaGFuZ2VkKGUpfSAvPjxiciAvPlxyXG4gICAgICAgIDxidXR0b24gb25DbGljaz17ZSA9PiB0aGlzLnNlbmQoKX0+6YCB5L+hPC9idXR0b24+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgKTtcclxuICB9XHJcbn1cclxuXHJcbmNsYXNzIENoYXRBcHAgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xyXG4gIGNvbnN0cnVjdG9yIChwcm9wcykge1xyXG4gICAgc3VwZXIocHJvcHMpO1xyXG4gICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgbG9nczogW11cclxuICAgIH07XHJcbiAgfVxyXG4gIGNvbXBvbmVudERpZE1vdW50ICgpIHtcclxuICAgIHNvY2tldC5vbignY2hhdC1tc2cnLCAob2JqKSA9PiB7XHJcbiAgICAgIGNvbnN0IGxvZ3MyID0gdGhpcy5zdGF0ZS5sb2dzO1xyXG4gICAgICBvYmoua2V5ID0gJ2tleV8nICsgKHRoaXMuc3RhdGUubG9ncy5sZW5ndGggKyAxKTtcclxuICAgICAgY29uc29sZS5sb2cob2JqKTtcclxuICAgICAgbG9nczIudW5zaGlmdChvYmopO1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtsb2dzOiBsb2dzMn0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG4gIHJlbmRlciAoKSB7XHJcbiAgICBjb25zdCBtZXNzYWdlcyA9IHRoaXMuc3RhdGUubG9ncy5tYXAoZSA9PiAoXHJcbiAgICAgIC8vIDxkaXYga2V5PXtlLmtleX0gc3R5bGU9e3N0eWxlcy5sb2d9PlxyXG4gICAgICAvLyAgIDxzcGFuIHN0eWxlPXtzdHlsZXMubmFtZX0+e2UubmFtZX08L3NwYW4+XHJcbiAgICAgIC8vICAgPHNwYW4gc3R5bGU9e3N0eWxlcy5tc2d9PntlLm1lc3NhZ2V9PC9zcGFuPlxyXG4gICAgICA8ZGl2IGtleT17ZS5rZXl9PlxyXG4gICAgICAgIDxzcGFuPntlLm5hbWV9PC9zcGFuPlxyXG4gICAgICAgIDxzcGFuPjoge2UubWVzc2FnZX08L3NwYW4+XHJcbiAgICAgICAgPHAgc3R5bGU9e3tjbGVhcjogJ2JvdGgnfX0gLz5cclxuICAgICAgPC9kaXY+XHJcbiAgICApKTtcclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8ZGl2PlxyXG4gICAgICAgIDxoMT7jg6rjgqLjg6vjgr/jgqTjg6Djg4Hjg6Pjg4Pjg4g8L2gxPlxyXG4gICAgICAgIDxDaGF0Rm9ybSAvPlxyXG4gICAgICAgIDxkaXY+e21lc3NhZ2VzfTwvZGl2PlxyXG4gICAgICA8L2Rpdj5cclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG5SZWFjdERPTS5yZW5kZXIoPENoYXRBcHAgLz4sIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyb290JykpO1xyXG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjQuMlxuICogcmVhY3QucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGs9cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIiksbj1yZXF1aXJlKFwiZmJqcy9saWIvaW52YXJpYW50XCIpLHA9cmVxdWlyZShcImZianMvbGliL2VtcHR5T2JqZWN0XCIpLHE9cmVxdWlyZShcImZianMvbGliL2VtcHR5RnVuY3Rpb25cIikscj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLHQ9cj9TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyx1PXI/U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTo2MDEwNix2PXI/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LHc9cj9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgseD1yP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTo2MDExNCx5PXI/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LHo9cj9TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCxBPXI/U3ltYm9sLmZvcihcInJlYWN0LmFzeW5jX21vZGVcIik6NjAxMTEsQj1cbnI/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyO3ImJlN5bWJvbC5mb3IoXCJyZWFjdC50aW1lb3V0XCIpO3ZhciBDPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBEKGEpe2Zvcih2YXIgYj1hcmd1bWVudHMubGVuZ3RoLTEsZT1cImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PVwiK2EsYz0wO2M8YjtjKyspZSs9XCImYXJnc1tdPVwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbYysxXSk7bighMSxcIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCAlcyBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuIFwiLGUpfVxudmFyIEU9e2lzTW91bnRlZDpmdW5jdGlvbigpe3JldHVybiExfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbigpe319O2Z1bmN0aW9uIEYoYSxiLGUpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9cDt0aGlzLnVwZGF0ZXI9ZXx8RX1GLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PXt9O0YucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKGEsYil7XCJvYmplY3RcIiE9PXR5cGVvZiBhJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmbnVsbCE9YT9EKFwiODVcIik6dm9pZCAwO3RoaXMudXBkYXRlci5lbnF1ZXVlU2V0U3RhdGUodGhpcyxhLGIsXCJzZXRTdGF0ZVwiKX07Ri5wcm90b3R5cGUuZm9yY2VVcGRhdGU9ZnVuY3Rpb24oYSl7dGhpcy51cGRhdGVyLmVucXVldWVGb3JjZVVwZGF0ZSh0aGlzLGEsXCJmb3JjZVVwZGF0ZVwiKX07ZnVuY3Rpb24gRygpe31cbkcucHJvdG90eXBlPUYucHJvdG90eXBlO2Z1bmN0aW9uIEgoYSxiLGUpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9cDt0aGlzLnVwZGF0ZXI9ZXx8RX12YXIgST1ILnByb3RvdHlwZT1uZXcgRztJLmNvbnN0cnVjdG9yPUg7ayhJLEYucHJvdG90eXBlKTtJLmlzUHVyZVJlYWN0Q29tcG9uZW50PSEwO3ZhciBKPXtjdXJyZW50Om51bGx9LEs9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxMPXtrZXk6ITAscmVmOiEwLF9fc2VsZjohMCxfX3NvdXJjZTohMH07XG5mdW5jdGlvbiBNKGEsYixlKXt2YXIgYz12b2lkIDAsZD17fSxnPW51bGwsaD1udWxsO2lmKG51bGwhPWIpZm9yKGMgaW4gdm9pZCAwIT09Yi5yZWYmJihoPWIucmVmKSx2b2lkIDAhPT1iLmtleSYmKGc9XCJcIitiLmtleSksYilLLmNhbGwoYixjKSYmIUwuaGFzT3duUHJvcGVydHkoYykmJihkW2NdPWJbY10pO3ZhciBmPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZilkLmNoaWxkcmVuPWU7ZWxzZSBpZigxPGYpe2Zvcih2YXIgbD1BcnJheShmKSxtPTA7bTxmO20rKylsW21dPWFyZ3VtZW50c1ttKzJdO2QuY2hpbGRyZW49bH1pZihhJiZhLmRlZmF1bHRQcm9wcylmb3IoYyBpbiBmPWEuZGVmYXVsdFByb3BzLGYpdm9pZCAwPT09ZFtjXSYmKGRbY109ZltjXSk7cmV0dXJueyQkdHlwZW9mOnQsdHlwZTphLGtleTpnLHJlZjpoLHByb3BzOmQsX293bmVyOkouY3VycmVudH19XG5mdW5jdGlvbiBOKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT10fWZ1bmN0aW9uIGVzY2FwZShhKXt2YXIgYj17XCI9XCI6XCI9MFwiLFwiOlwiOlwiPTJcIn07cmV0dXJuXCIkXCIrKFwiXCIrYSkucmVwbGFjZSgvWz06XS9nLGZ1bmN0aW9uKGEpe3JldHVybiBiW2FdfSl9dmFyIE89L1xcLysvZyxQPVtdO2Z1bmN0aW9uIFEoYSxiLGUsYyl7aWYoUC5sZW5ndGgpe3ZhciBkPVAucG9wKCk7ZC5yZXN1bHQ9YTtkLmtleVByZWZpeD1iO2QuZnVuYz1lO2QuY29udGV4dD1jO2QuY291bnQ9MDtyZXR1cm4gZH1yZXR1cm57cmVzdWx0OmEsa2V5UHJlZml4OmIsZnVuYzplLGNvbnRleHQ6Yyxjb3VudDowfX1mdW5jdGlvbiBSKGEpe2EucmVzdWx0PW51bGw7YS5rZXlQcmVmaXg9bnVsbDthLmZ1bmM9bnVsbDthLmNvbnRleHQ9bnVsbDthLmNvdW50PTA7MTA+UC5sZW5ndGgmJlAucHVzaChhKX1cbmZ1bmN0aW9uIFMoYSxiLGUsYyl7dmFyIGQ9dHlwZW9mIGE7aWYoXCJ1bmRlZmluZWRcIj09PWR8fFwiYm9vbGVhblwiPT09ZClhPW51bGw7dmFyIGc9ITE7aWYobnVsbD09PWEpZz0hMDtlbHNlIHN3aXRjaChkKXtjYXNlIFwic3RyaW5nXCI6Y2FzZSBcIm51bWJlclwiOmc9ITA7YnJlYWs7Y2FzZSBcIm9iamVjdFwiOnN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIHQ6Y2FzZSB1Omc9ITB9fWlmKGcpcmV0dXJuIGUoYyxhLFwiXCI9PT1iP1wiLlwiK1QoYSwwKTpiKSwxO2c9MDtiPVwiXCI9PT1iP1wiLlwiOmIrXCI6XCI7aWYoQXJyYXkuaXNBcnJheShhKSlmb3IodmFyIGg9MDtoPGEubGVuZ3RoO2grKyl7ZD1hW2hdO3ZhciBmPWIrVChkLGgpO2crPVMoZCxmLGUsYyl9ZWxzZSBpZihudWxsPT09YXx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhP2Y9bnVsbDooZj1DJiZhW0NdfHxhW1wiQEBpdGVyYXRvclwiXSxmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBmP2Y6bnVsbCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGYpZm9yKGE9Zi5jYWxsKGEpLFxuaD0wOyEoZD1hLm5leHQoKSkuZG9uZTspZD1kLnZhbHVlLGY9YitUKGQsaCsrKSxnKz1TKGQsZixlLGMpO2Vsc2VcIm9iamVjdFwiPT09ZCYmKGU9XCJcIithLEQoXCIzMVwiLFwiW29iamVjdCBPYmplY3RdXCI9PT1lP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYSkuam9pbihcIiwgXCIpK1wifVwiOmUsXCJcIikpO3JldHVybiBnfWZ1bmN0aW9uIFQoYSxiKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZudWxsIT1hLmtleT9lc2NhcGUoYS5rZXkpOmIudG9TdHJpbmcoMzYpfWZ1bmN0aW9uIFUoYSxiKXthLmZ1bmMuY2FsbChhLmNvbnRleHQsYixhLmNvdW50KyspfVxuZnVuY3Rpb24gVihhLGIsZSl7dmFyIGM9YS5yZXN1bHQsZD1hLmtleVByZWZpeDthPWEuZnVuYy5jYWxsKGEuY29udGV4dCxiLGEuY291bnQrKyk7QXJyYXkuaXNBcnJheShhKT9XKGEsYyxlLHEudGhhdFJldHVybnNBcmd1bWVudCk6bnVsbCE9YSYmKE4oYSkmJihiPWQrKCFhLmtleXx8YiYmYi5rZXk9PT1hLmtleT9cIlwiOihcIlwiK2Eua2V5KS5yZXBsYWNlKE8sXCIkJi9cIikrXCIvXCIpK2UsYT17JCR0eXBlb2Y6dCx0eXBlOmEudHlwZSxrZXk6YixyZWY6YS5yZWYscHJvcHM6YS5wcm9wcyxfb3duZXI6YS5fb3duZXJ9KSxjLnB1c2goYSkpfWZ1bmN0aW9uIFcoYSxiLGUsYyxkKXt2YXIgZz1cIlwiO251bGwhPWUmJihnPShcIlwiK2UpLnJlcGxhY2UoTyxcIiQmL1wiKStcIi9cIik7Yj1RKGIsZyxjLGQpO251bGw9PWF8fFMoYSxcIlwiLFYsYik7UihiKX1cbnZhciBYPXtDaGlsZHJlbjp7bWFwOmZ1bmN0aW9uKGEsYixlKXtpZihudWxsPT1hKXJldHVybiBhO3ZhciBjPVtdO1coYSxjLG51bGwsYixlKTtyZXR1cm4gY30sZm9yRWFjaDpmdW5jdGlvbihhLGIsZSl7aWYobnVsbD09YSlyZXR1cm4gYTtiPVEobnVsbCxudWxsLGIsZSk7bnVsbD09YXx8UyhhLFwiXCIsVSxiKTtSKGIpfSxjb3VudDpmdW5jdGlvbihhKXtyZXR1cm4gbnVsbD09YT8wOlMoYSxcIlwiLHEudGhhdFJldHVybnNOdWxsLG51bGwpfSx0b0FycmF5OmZ1bmN0aW9uKGEpe3ZhciBiPVtdO1coYSxiLG51bGwscS50aGF0UmV0dXJuc0FyZ3VtZW50KTtyZXR1cm4gYn0sb25seTpmdW5jdGlvbihhKXtOKGEpP3ZvaWQgMDpEKFwiMTQzXCIpO3JldHVybiBhfX0sY3JlYXRlUmVmOmZ1bmN0aW9uKCl7cmV0dXJue2N1cnJlbnQ6bnVsbH19LENvbXBvbmVudDpGLFB1cmVDb21wb25lbnQ6SCxjcmVhdGVDb250ZXh0OmZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YiYmKGI9bnVsbCk7YT17JCR0eXBlb2Y6eixcbl9jYWxjdWxhdGVDaGFuZ2VkQml0czpiLF9kZWZhdWx0VmFsdWU6YSxfY3VycmVudFZhbHVlOmEsX2N1cnJlbnRWYWx1ZTI6YSxfY2hhbmdlZEJpdHM6MCxfY2hhbmdlZEJpdHMyOjAsUHJvdmlkZXI6bnVsbCxDb25zdW1lcjpudWxsfTthLlByb3ZpZGVyPXskJHR5cGVvZjp5LF9jb250ZXh0OmF9O3JldHVybiBhLkNvbnN1bWVyPWF9LGZvcndhcmRSZWY6ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOkIscmVuZGVyOmF9fSxGcmFnbWVudDp2LFN0cmljdE1vZGU6dyx1bnN0YWJsZV9Bc3luY01vZGU6QSx1bnN0YWJsZV9Qcm9maWxlcjp4LGNyZWF0ZUVsZW1lbnQ6TSxjbG9uZUVsZW1lbnQ6ZnVuY3Rpb24oYSxiLGUpe251bGw9PT1hfHx2b2lkIDA9PT1hP0QoXCIyNjdcIixhKTp2b2lkIDA7dmFyIGM9dm9pZCAwLGQ9ayh7fSxhLnByb3BzKSxnPWEua2V5LGg9YS5yZWYsZj1hLl9vd25lcjtpZihudWxsIT1iKXt2b2lkIDAhPT1iLnJlZiYmKGg9Yi5yZWYsZj1KLmN1cnJlbnQpO3ZvaWQgMCE9PVxuYi5rZXkmJihnPVwiXCIrYi5rZXkpO3ZhciBsPXZvaWQgMDthLnR5cGUmJmEudHlwZS5kZWZhdWx0UHJvcHMmJihsPWEudHlwZS5kZWZhdWx0UHJvcHMpO2ZvcihjIGluIGIpSy5jYWxsKGIsYykmJiFMLmhhc093blByb3BlcnR5KGMpJiYoZFtjXT12b2lkIDA9PT1iW2NdJiZ2b2lkIDAhPT1sP2xbY106YltjXSl9Yz1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWMpZC5jaGlsZHJlbj1lO2Vsc2UgaWYoMTxjKXtsPUFycmF5KGMpO2Zvcih2YXIgbT0wO208YzttKyspbFttXT1hcmd1bWVudHNbbSsyXTtkLmNoaWxkcmVuPWx9cmV0dXJueyQkdHlwZW9mOnQsdHlwZTphLnR5cGUsa2V5OmcscmVmOmgscHJvcHM6ZCxfb3duZXI6Zn19LGNyZWF0ZUZhY3Rvcnk6ZnVuY3Rpb24oYSl7dmFyIGI9TS5iaW5kKG51bGwsYSk7Yi50eXBlPWE7cmV0dXJuIGJ9LGlzVmFsaWRFbGVtZW50Ok4sdmVyc2lvbjpcIjE2LjQuMlwiLF9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEOntSZWFjdEN1cnJlbnRPd25lcjpKLFxuYXNzaWduOmt9fSxZPXtkZWZhdWx0Olh9LFo9WSYmWHx8WTttb2R1bGUuZXhwb3J0cz1aLmRlZmF1bHQ/Wi5kZWZhdWx0Olo7XG4iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNoZWNrRENFKCkge1xuICAvKiBnbG9iYWwgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fICovXG4gIGlmIChcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fID09PSAndW5kZWZpbmVkJyB8fFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UgIT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gVGhpcyBicmFuY2ggaXMgdW5yZWFjaGFibGUgYmVjYXVzZSB0aGlzIGZ1bmN0aW9uIGlzIG9ubHkgY2FsbGVkXG4gICAgLy8gaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBjb25kaXRpb24gaXMgdHJ1ZSBvbmx5IGluIGRldmVsb3BtZW50LlxuICAgIC8vIFRoZXJlZm9yZSBpZiB0aGUgYnJhbmNoIGlzIHN0aWxsIGhlcmUsIGRlYWQgY29kZSBlbGltaW5hdGlvbiB3YXNuJ3RcbiAgICAvLyBwcm9wZXJseSBhcHBsaWVkLlxuICAgIC8vIERvbid0IGNoYW5nZSB0aGUgbWVzc2FnZS4gUmVhY3QgRGV2VG9vbHMgcmVsaWVzIG9uIGl0LiBBbHNvIG1ha2Ugc3VyZVxuICAgIC8vIHRoaXMgbWVzc2FnZSBkb2Vzbid0IG9jY3VyIGVsc2V3aGVyZSBpbiB0aGlzIGZ1bmN0aW9uLCBvciBpdCB3aWxsIGNhdXNlXG4gICAgLy8gYSBmYWxzZSBwb3NpdGl2ZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ15fXicpO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gVmVyaWZ5IHRoYXQgdGhlIGNvZGUgYWJvdmUgaGFzIGJlZW4gZGVhZCBjb2RlIGVsaW1pbmF0ZWQgKERDRSdkKS5cbiAgICBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UoY2hlY2tEQ0UpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBEZXZUb29scyBzaG91bGRuJ3QgY3Jhc2ggUmVhY3QsIG5vIG1hdHRlciB3aGF0LlxuICAgIC8vIFdlIHNob3VsZCBzdGlsbCByZXBvcnQgaW4gY2FzZSB3ZSBicmVhayB0aGlzIGNvZGUuXG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIERDRSBjaGVjayBzaG91bGQgaGFwcGVuIGJlZm9yZSBSZWFjdERPTSBidW5kbGUgZXhlY3V0ZXMgc28gdGhhdFxuICAvLyBEZXZUb29scyBjYW4gcmVwb3J0IGJhZCBtaW5pZmljYXRpb24gZHVyaW5nIGluamVjdGlvbi5cbiAgY2hlY2tEQ0UoKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjQuMlxuICogcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuLypcbiBNb2Rlcm5penIgMy4wLjBwcmUgKEN1c3RvbSBCdWlsZCkgfCBNSVRcbiovXG4ndXNlIHN0cmljdCc7dmFyIGFhPXJlcXVpcmUoXCJmYmpzL2xpYi9pbnZhcmlhbnRcIiksYmE9cmVxdWlyZShcInJlYWN0XCIpLG09cmVxdWlyZShcImZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50XCIpLHA9cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIiksdj1yZXF1aXJlKFwiZmJqcy9saWIvZW1wdHlGdW5jdGlvblwiKSxkYT1yZXF1aXJlKFwiZmJqcy9saWIvZ2V0QWN0aXZlRWxlbWVudFwiKSxlYT1yZXF1aXJlKFwiZmJqcy9saWIvc2hhbGxvd0VxdWFsXCIpLGZhPXJlcXVpcmUoXCJmYmpzL2xpYi9jb250YWluc05vZGVcIiksaGE9cmVxdWlyZShcImZianMvbGliL2VtcHR5T2JqZWN0XCIpO1xuZnVuY3Rpb24gQShhKXtmb3IodmFyIGI9YXJndW1lbnRzLmxlbmd0aC0xLGM9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGQ9MDtkPGI7ZCsrKWMrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2QrMV0pO2FhKCExLFwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0ICVzIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4gXCIsYyl9YmE/dm9pZCAwOkEoXCIyMjdcIik7XG5mdW5jdGlvbiBpYShhLGIsYyxkLGUsZixnLGgsayl7dGhpcy5faGFzQ2F1Z2h0RXJyb3I9ITE7dGhpcy5fY2F1Z2h0RXJyb3I9bnVsbDt2YXIgbj1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMyk7dHJ5e2IuYXBwbHkoYyxuKX1jYXRjaChyKXt0aGlzLl9jYXVnaHRFcnJvcj1yLHRoaXMuX2hhc0NhdWdodEVycm9yPSEwfX1cbnZhciBCPXtfY2F1Z2h0RXJyb3I6bnVsbCxfaGFzQ2F1Z2h0RXJyb3I6ITEsX3JldGhyb3dFcnJvcjpudWxsLF9oYXNSZXRocm93RXJyb3I6ITEsaW52b2tlR3VhcmRlZENhbGxiYWNrOmZ1bmN0aW9uKGEsYixjLGQsZSxmLGcsaCxrKXtpYS5hcHBseShCLGFyZ3VtZW50cyl9LGludm9rZUd1YXJkZWRDYWxsYmFja0FuZENhdGNoRmlyc3RFcnJvcjpmdW5jdGlvbihhLGIsYyxkLGUsZixnLGgsayl7Qi5pbnZva2VHdWFyZGVkQ2FsbGJhY2suYXBwbHkodGhpcyxhcmd1bWVudHMpO2lmKEIuaGFzQ2F1Z2h0RXJyb3IoKSl7dmFyIG49Qi5jbGVhckNhdWdodEVycm9yKCk7Qi5faGFzUmV0aHJvd0Vycm9yfHwoQi5faGFzUmV0aHJvd0Vycm9yPSEwLEIuX3JldGhyb3dFcnJvcj1uKX19LHJldGhyb3dDYXVnaHRFcnJvcjpmdW5jdGlvbigpe3JldHVybiBrYS5hcHBseShCLGFyZ3VtZW50cyl9LGhhc0NhdWdodEVycm9yOmZ1bmN0aW9uKCl7cmV0dXJuIEIuX2hhc0NhdWdodEVycm9yfSxjbGVhckNhdWdodEVycm9yOmZ1bmN0aW9uKCl7aWYoQi5faGFzQ2F1Z2h0RXJyb3Ipe3ZhciBhPVxuQi5fY2F1Z2h0RXJyb3I7Qi5fY2F1Z2h0RXJyb3I9bnVsbDtCLl9oYXNDYXVnaHRFcnJvcj0hMTtyZXR1cm4gYX1BKFwiMTk4XCIpfX07ZnVuY3Rpb24ga2EoKXtpZihCLl9oYXNSZXRocm93RXJyb3Ipe3ZhciBhPUIuX3JldGhyb3dFcnJvcjtCLl9yZXRocm93RXJyb3I9bnVsbDtCLl9oYXNSZXRocm93RXJyb3I9ITE7dGhyb3cgYTt9fXZhciBsYT1udWxsLG1hPXt9O1xuZnVuY3Rpb24gbmEoKXtpZihsYSlmb3IodmFyIGEgaW4gbWEpe3ZhciBiPW1hW2FdLGM9bGEuaW5kZXhPZihhKTstMTxjP3ZvaWQgMDpBKFwiOTZcIixhKTtpZighb2FbY10pe2IuZXh0cmFjdEV2ZW50cz92b2lkIDA6QShcIjk3XCIsYSk7b2FbY109YjtjPWIuZXZlbnRUeXBlcztmb3IodmFyIGQgaW4gYyl7dmFyIGU9dm9pZCAwO3ZhciBmPWNbZF0sZz1iLGg9ZDtwYS5oYXNPd25Qcm9wZXJ0eShoKT9BKFwiOTlcIixoKTp2b2lkIDA7cGFbaF09Zjt2YXIgaz1mLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzO2lmKGspe2ZvcihlIGluIGspay5oYXNPd25Qcm9wZXJ0eShlKSYmcWEoa1tlXSxnLGgpO2U9ITB9ZWxzZSBmLnJlZ2lzdHJhdGlvbk5hbWU/KHFhKGYucmVnaXN0cmF0aW9uTmFtZSxnLGgpLGU9ITApOmU9ITE7ZT92b2lkIDA6QShcIjk4XCIsZCxhKX19fX1cbmZ1bmN0aW9uIHFhKGEsYixjKXtyYVthXT9BKFwiMTAwXCIsYSk6dm9pZCAwO3JhW2FdPWI7c2FbYV09Yi5ldmVudFR5cGVzW2NdLmRlcGVuZGVuY2llc312YXIgb2E9W10scGE9e30scmE9e30sc2E9e307ZnVuY3Rpb24gdGEoYSl7bGE/QShcIjEwMVwiKTp2b2lkIDA7bGE9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYSk7bmEoKX1mdW5jdGlvbiB1YShhKXt2YXIgYj0hMSxjO2ZvcihjIGluIGEpaWYoYS5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9YVtjXTttYS5oYXNPd25Qcm9wZXJ0eShjKSYmbWFbY109PT1kfHwobWFbY10/QShcIjEwMlwiLGMpOnZvaWQgMCxtYVtjXT1kLGI9ITApfWImJm5hKCl9XG52YXIgdmE9e3BsdWdpbnM6b2EsZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzOnBhLHJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzOnJhLHJlZ2lzdHJhdGlvbk5hbWVEZXBlbmRlbmNpZXM6c2EscG9zc2libGVSZWdpc3RyYXRpb25OYW1lczpudWxsLGluamVjdEV2ZW50UGx1Z2luT3JkZXI6dGEsaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lOnVhfSx3YT1udWxsLHhhPW51bGwseWE9bnVsbDtmdW5jdGlvbiB6YShhLGIsYyxkKXtiPWEudHlwZXx8XCJ1bmtub3duLWV2ZW50XCI7YS5jdXJyZW50VGFyZ2V0PXlhKGQpO0IuaW52b2tlR3VhcmRlZENhbGxiYWNrQW5kQ2F0Y2hGaXJzdEVycm9yKGIsYyx2b2lkIDAsYSk7YS5jdXJyZW50VGFyZ2V0PW51bGx9XG5mdW5jdGlvbiBBYShhLGIpe251bGw9PWI/QShcIjMwXCIpOnZvaWQgMDtpZihudWxsPT1hKXJldHVybiBiO2lmKEFycmF5LmlzQXJyYXkoYSkpe2lmKEFycmF5LmlzQXJyYXkoYikpcmV0dXJuIGEucHVzaC5hcHBseShhLGIpLGE7YS5wdXNoKGIpO3JldHVybiBhfXJldHVybiBBcnJheS5pc0FycmF5KGIpP1thXS5jb25jYXQoYik6W2EsYl19ZnVuY3Rpb24gQmEoYSxiLGMpe0FycmF5LmlzQXJyYXkoYSk/YS5mb3JFYWNoKGIsYyk6YSYmYi5jYWxsKGMsYSl9dmFyIENhPW51bGw7XG5mdW5jdGlvbiBEYShhLGIpe2lmKGEpe3ZhciBjPWEuX2Rpc3BhdGNoTGlzdGVuZXJzLGQ9YS5fZGlzcGF0Y2hJbnN0YW5jZXM7aWYoQXJyYXkuaXNBcnJheShjKSlmb3IodmFyIGU9MDtlPGMubGVuZ3RoJiYhYS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpO2UrKyl6YShhLGIsY1tlXSxkW2VdKTtlbHNlIGMmJnphKGEsYixjLGQpO2EuX2Rpc3BhdGNoTGlzdGVuZXJzPW51bGw7YS5fZGlzcGF0Y2hJbnN0YW5jZXM9bnVsbDthLmlzUGVyc2lzdGVudCgpfHxhLmNvbnN0cnVjdG9yLnJlbGVhc2UoYSl9fWZ1bmN0aW9uIEVhKGEpe3JldHVybiBEYShhLCEwKX1mdW5jdGlvbiBGYShhKXtyZXR1cm4gRGEoYSwhMSl9dmFyIEdhPXtpbmplY3RFdmVudFBsdWdpbk9yZGVyOnRhLGluamVjdEV2ZW50UGx1Z2luc0J5TmFtZTp1YX07XG5mdW5jdGlvbiBIYShhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO2lmKCFjKXJldHVybiBudWxsO3ZhciBkPXdhKGMpO2lmKCFkKXJldHVybiBudWxsO2M9ZFtiXTthOnN3aXRjaChiKXtjYXNlIFwib25DbGlja1wiOmNhc2UgXCJvbkNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbkRvdWJsZUNsaWNrXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VEb3duXCI6Y2FzZSBcIm9uTW91c2VEb3duQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlTW92ZVwiOmNhc2UgXCJvbk1vdXNlTW92ZUNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZVVwXCI6Y2FzZSBcIm9uTW91c2VVcENhcHR1cmVcIjooZD0hZC5kaXNhYmxlZCl8fChhPWEudHlwZSxkPSEoXCJidXR0b25cIj09PWF8fFwiaW5wdXRcIj09PWF8fFwic2VsZWN0XCI9PT1hfHxcInRleHRhcmVhXCI9PT1hKSk7YT0hZDticmVhayBhO2RlZmF1bHQ6YT0hMX1pZihhKXJldHVybiBudWxsO2MmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjP0EoXCIyMzFcIixiLHR5cGVvZiBjKTp2b2lkIDA7XG5yZXR1cm4gY31mdW5jdGlvbiBJYShhLGIpe251bGwhPT1hJiYoQ2E9QWEoQ2EsYSkpO2E9Q2E7Q2E9bnVsbDthJiYoYj9CYShhLEVhKTpCYShhLEZhKSxDYT9BKFwiOTVcIik6dm9pZCAwLEIucmV0aHJvd0NhdWdodEVycm9yKCkpfWZ1bmN0aW9uIEphKGEsYixjLGQpe2Zvcih2YXIgZT1udWxsLGY9MDtmPG9hLmxlbmd0aDtmKyspe3ZhciBnPW9hW2ZdO2cmJihnPWcuZXh0cmFjdEV2ZW50cyhhLGIsYyxkKSkmJihlPUFhKGUsZykpfUlhKGUsITEpfXZhciBLYT17aW5qZWN0aW9uOkdhLGdldExpc3RlbmVyOkhhLHJ1bkV2ZW50c0luQmF0Y2g6SWEscnVuRXh0cmFjdGVkRXZlbnRzSW5CYXRjaDpKYX0sTGE9TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMiksQz1cIl9fcmVhY3RJbnRlcm5hbEluc3RhbmNlJFwiK0xhLE1hPVwiX19yZWFjdEV2ZW50SGFuZGxlcnMkXCIrTGE7XG5mdW5jdGlvbiBOYShhKXtpZihhW0NdKXJldHVybiBhW0NdO2Zvcig7IWFbQ107KWlmKGEucGFyZW50Tm9kZSlhPWEucGFyZW50Tm9kZTtlbHNlIHJldHVybiBudWxsO2E9YVtDXTtyZXR1cm4gNT09PWEudGFnfHw2PT09YS50YWc/YTpudWxsfWZ1bmN0aW9uIE9hKGEpe2lmKDU9PT1hLnRhZ3x8Nj09PWEudGFnKXJldHVybiBhLnN0YXRlTm9kZTtBKFwiMzNcIil9ZnVuY3Rpb24gUGEoYSl7cmV0dXJuIGFbTWFdfHxudWxsfXZhciBRYT17cHJlY2FjaGVGaWJlck5vZGU6ZnVuY3Rpb24oYSxiKXtiW0NdPWF9LGdldENsb3Nlc3RJbnN0YW5jZUZyb21Ob2RlOk5hLGdldEluc3RhbmNlRnJvbU5vZGU6ZnVuY3Rpb24oYSl7YT1hW0NdO3JldHVybiFhfHw1IT09YS50YWcmJjYhPT1hLnRhZz9udWxsOmF9LGdldE5vZGVGcm9tSW5zdGFuY2U6T2EsZ2V0RmliZXJDdXJyZW50UHJvcHNGcm9tTm9kZTpQYSx1cGRhdGVGaWJlclByb3BzOmZ1bmN0aW9uKGEsYil7YVtNYV09Yn19O1xuZnVuY3Rpb24gRihhKXtkbyBhPWEucmV0dXJuO3doaWxlKGEmJjUhPT1hLnRhZyk7cmV0dXJuIGE/YTpudWxsfWZ1bmN0aW9uIFJhKGEsYixjKXtmb3IodmFyIGQ9W107YTspZC5wdXNoKGEpLGE9RihhKTtmb3IoYT1kLmxlbmd0aDswPGEtLTspYihkW2FdLFwiY2FwdHVyZWRcIixjKTtmb3IoYT0wO2E8ZC5sZW5ndGg7YSsrKWIoZFthXSxcImJ1YmJsZWRcIixjKX1mdW5jdGlvbiBTYShhLGIsYyl7aWYoYj1IYShhLGMuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXNbYl0pKWMuX2Rpc3BhdGNoTGlzdGVuZXJzPUFhKGMuX2Rpc3BhdGNoTGlzdGVuZXJzLGIpLGMuX2Rpc3BhdGNoSW5zdGFuY2VzPUFhKGMuX2Rpc3BhdGNoSW5zdGFuY2VzLGEpfWZ1bmN0aW9uIFRhKGEpe2EmJmEuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMmJlJhKGEuX3RhcmdldEluc3QsU2EsYSl9XG5mdW5jdGlvbiBVYShhKXtpZihhJiZhLmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzKXt2YXIgYj1hLl90YXJnZXRJbnN0O2I9Yj9GKGIpOm51bGw7UmEoYixTYSxhKX19ZnVuY3Rpb24gVmEoYSxiLGMpe2EmJmMmJmMuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSYmKGI9SGEoYSxjLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUpKSYmKGMuX2Rpc3BhdGNoTGlzdGVuZXJzPUFhKGMuX2Rpc3BhdGNoTGlzdGVuZXJzLGIpLGMuX2Rpc3BhdGNoSW5zdGFuY2VzPUFhKGMuX2Rpc3BhdGNoSW5zdGFuY2VzLGEpKX1mdW5jdGlvbiBYYShhKXthJiZhLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUmJlZhKGEuX3RhcmdldEluc3QsbnVsbCxhKX1mdW5jdGlvbiBZYShhKXtCYShhLFRhKX1cbmZ1bmN0aW9uIFphKGEsYixjLGQpe2lmKGMmJmQpYTp7dmFyIGU9Yztmb3IodmFyIGY9ZCxnPTAsaD1lO2g7aD1GKGgpKWcrKztoPTA7Zm9yKHZhciBrPWY7aztrPUYoaykpaCsrO2Zvcig7MDxnLWg7KWU9RihlKSxnLS07Zm9yKDswPGgtZzspZj1GKGYpLGgtLTtmb3IoO2ctLTspe2lmKGU9PT1mfHxlPT09Zi5hbHRlcm5hdGUpYnJlYWsgYTtlPUYoZSk7Zj1GKGYpfWU9bnVsbH1lbHNlIGU9bnVsbDtmPWU7Zm9yKGU9W107YyYmYyE9PWY7KXtnPWMuYWx0ZXJuYXRlO2lmKG51bGwhPT1nJiZnPT09ZilicmVhaztlLnB1c2goYyk7Yz1GKGMpfWZvcihjPVtdO2QmJmQhPT1mOyl7Zz1kLmFsdGVybmF0ZTtpZihudWxsIT09ZyYmZz09PWYpYnJlYWs7Yy5wdXNoKGQpO2Q9RihkKX1mb3IoZD0wO2Q8ZS5sZW5ndGg7ZCsrKVZhKGVbZF0sXCJidWJibGVkXCIsYSk7Zm9yKGE9Yy5sZW5ndGg7MDxhLS07KVZhKGNbYV0sXCJjYXB0dXJlZFwiLGIpfVxudmFyICRhPXthY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzOllhLGFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXNTa2lwVGFyZ2V0OmZ1bmN0aW9uKGEpe0JhKGEsVWEpfSxhY2N1bXVsYXRlRW50ZXJMZWF2ZURpc3BhdGNoZXM6WmEsYWNjdW11bGF0ZURpcmVjdERpc3BhdGNoZXM6ZnVuY3Rpb24oYSl7QmEoYSxYYSl9fTtmdW5jdGlvbiBhYihhLGIpe3ZhciBjPXt9O2NbYS50b0xvd2VyQ2FzZSgpXT1iLnRvTG93ZXJDYXNlKCk7Y1tcIldlYmtpdFwiK2FdPVwid2Via2l0XCIrYjtjW1wiTW96XCIrYV09XCJtb3pcIitiO2NbXCJtc1wiK2FdPVwiTVNcIitiO2NbXCJPXCIrYV09XCJvXCIrYi50b0xvd2VyQ2FzZSgpO3JldHVybiBjfVxudmFyIGJiPXthbmltYXRpb25lbmQ6YWIoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkVuZFwiKSxhbmltYXRpb25pdGVyYXRpb246YWIoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkl0ZXJhdGlvblwiKSxhbmltYXRpb25zdGFydDphYihcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uU3RhcnRcIiksdHJhbnNpdGlvbmVuZDphYihcIlRyYW5zaXRpb25cIixcIlRyYW5zaXRpb25FbmRcIil9LGNiPXt9LGRiPXt9O20uY2FuVXNlRE9NJiYoZGI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKS5zdHlsZSxcIkFuaW1hdGlvbkV2ZW50XCJpbiB3aW5kb3d8fChkZWxldGUgYmIuYW5pbWF0aW9uZW5kLmFuaW1hdGlvbixkZWxldGUgYmIuYW5pbWF0aW9uaXRlcmF0aW9uLmFuaW1hdGlvbixkZWxldGUgYmIuYW5pbWF0aW9uc3RhcnQuYW5pbWF0aW9uKSxcIlRyYW5zaXRpb25FdmVudFwiaW4gd2luZG93fHxkZWxldGUgYmIudHJhbnNpdGlvbmVuZC50cmFuc2l0aW9uKTtcbmZ1bmN0aW9uIGViKGEpe2lmKGNiW2FdKXJldHVybiBjYlthXTtpZighYmJbYV0pcmV0dXJuIGE7dmFyIGI9YmJbYV0sYztmb3IoYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykmJmMgaW4gZGIpcmV0dXJuIGNiW2FdPWJbY107cmV0dXJuIGF9dmFyIGZiPWViKFwiYW5pbWF0aW9uZW5kXCIpLGdiPWViKFwiYW5pbWF0aW9uaXRlcmF0aW9uXCIpLGhiPWViKFwiYW5pbWF0aW9uc3RhcnRcIiksaWI9ZWIoXCJ0cmFuc2l0aW9uZW5kXCIpLGpiPVwiYWJvcnQgY2FucGxheSBjYW5wbGF5dGhyb3VnaCBkdXJhdGlvbmNoYW5nZSBlbXB0aWVkIGVuY3J5cHRlZCBlbmRlZCBlcnJvciBsb2FkZWRkYXRhIGxvYWRlZG1ldGFkYXRhIGxvYWRzdGFydCBwYXVzZSBwbGF5IHBsYXlpbmcgcHJvZ3Jlc3MgcmF0ZWNoYW5nZSBzZWVrZWQgc2Vla2luZyBzdGFsbGVkIHN1c3BlbmQgdGltZXVwZGF0ZSB2b2x1bWVjaGFuZ2Ugd2FpdGluZ1wiLnNwbGl0KFwiIFwiKSxrYj1udWxsO1xuZnVuY3Rpb24gbGIoKXsha2ImJm0uY2FuVXNlRE9NJiYoa2I9XCJ0ZXh0Q29udGVudFwiaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50P1widGV4dENvbnRlbnRcIjpcImlubmVyVGV4dFwiKTtyZXR1cm4ga2J9dmFyIEc9e19yb290Om51bGwsX3N0YXJ0VGV4dDpudWxsLF9mYWxsYmFja1RleHQ6bnVsbH07ZnVuY3Rpb24gbWIoKXtpZihHLl9mYWxsYmFja1RleHQpcmV0dXJuIEcuX2ZhbGxiYWNrVGV4dDt2YXIgYSxiPUcuX3N0YXJ0VGV4dCxjPWIubGVuZ3RoLGQsZT1uYigpLGY9ZS5sZW5ndGg7Zm9yKGE9MDthPGMmJmJbYV09PT1lW2FdO2ErKyk7dmFyIGc9Yy1hO2ZvcihkPTE7ZDw9ZyYmYltjLWRdPT09ZVtmLWRdO2QrKyk7Ry5fZmFsbGJhY2tUZXh0PWUuc2xpY2UoYSwxPGQ/MS1kOnZvaWQgMCk7cmV0dXJuIEcuX2ZhbGxiYWNrVGV4dH1mdW5jdGlvbiBuYigpe3JldHVyblwidmFsdWVcImluIEcuX3Jvb3Q/Ry5fcm9vdC52YWx1ZTpHLl9yb290W2xiKCldfVxudmFyIG9iPVwiZGlzcGF0Y2hDb25maWcgX3RhcmdldEluc3QgbmF0aXZlRXZlbnQgaXNEZWZhdWx0UHJldmVudGVkIGlzUHJvcGFnYXRpb25TdG9wcGVkIF9kaXNwYXRjaExpc3RlbmVycyBfZGlzcGF0Y2hJbnN0YW5jZXNcIi5zcGxpdChcIiBcIikscGI9e3R5cGU6bnVsbCx0YXJnZXQ6bnVsbCxjdXJyZW50VGFyZ2V0OnYudGhhdFJldHVybnNOdWxsLGV2ZW50UGhhc2U6bnVsbCxidWJibGVzOm51bGwsY2FuY2VsYWJsZTpudWxsLHRpbWVTdGFtcDpmdW5jdGlvbihhKXtyZXR1cm4gYS50aW1lU3RhbXB8fERhdGUubm93KCl9LGRlZmF1bHRQcmV2ZW50ZWQ6bnVsbCxpc1RydXN0ZWQ6bnVsbH07XG5mdW5jdGlvbiBIKGEsYixjLGQpe3RoaXMuZGlzcGF0Y2hDb25maWc9YTt0aGlzLl90YXJnZXRJbnN0PWI7dGhpcy5uYXRpdmVFdmVudD1jO2E9dGhpcy5jb25zdHJ1Y3Rvci5JbnRlcmZhY2U7Zm9yKHZhciBlIGluIGEpYS5oYXNPd25Qcm9wZXJ0eShlKSYmKChiPWFbZV0pP3RoaXNbZV09YihjKTpcInRhcmdldFwiPT09ZT90aGlzLnRhcmdldD1kOnRoaXNbZV09Y1tlXSk7dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9KG51bGwhPWMuZGVmYXVsdFByZXZlbnRlZD9jLmRlZmF1bHRQcmV2ZW50ZWQ6ITE9PT1jLnJldHVyblZhbHVlKT92LnRoYXRSZXR1cm5zVHJ1ZTp2LnRoYXRSZXR1cm5zRmFsc2U7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD12LnRoYXRSZXR1cm5zRmFsc2U7cmV0dXJuIHRoaXN9XG5wKEgucHJvdG90eXBlLHtwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3RoaXMuZGVmYXVsdFByZXZlbnRlZD0hMDt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnByZXZlbnREZWZhdWx0P2EucHJldmVudERlZmF1bHQoKTpcInVua25vd25cIiE9PXR5cGVvZiBhLnJldHVyblZhbHVlJiYoYS5yZXR1cm5WYWx1ZT0hMSksdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9di50aGF0UmV0dXJuc1RydWUpfSxzdG9wUHJvcGFnYXRpb246ZnVuY3Rpb24oKXt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnN0b3BQcm9wYWdhdGlvbj9hLnN0b3BQcm9wYWdhdGlvbigpOlwidW5rbm93blwiIT09dHlwZW9mIGEuY2FuY2VsQnViYmxlJiYoYS5jYW5jZWxCdWJibGU9ITApLHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9di50aGF0UmV0dXJuc1RydWUpfSxwZXJzaXN0OmZ1bmN0aW9uKCl7dGhpcy5pc1BlcnNpc3RlbnQ9di50aGF0UmV0dXJuc1RydWV9LGlzUGVyc2lzdGVudDp2LnRoYXRSZXR1cm5zRmFsc2UsXG5kZXN0cnVjdG9yOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5jb25zdHJ1Y3Rvci5JbnRlcmZhY2UsYjtmb3IoYiBpbiBhKXRoaXNbYl09bnVsbDtmb3IoYT0wO2E8b2IubGVuZ3RoO2ErKyl0aGlzW29iW2FdXT1udWxsfX0pO0guSW50ZXJmYWNlPXBiO0guZXh0ZW5kPWZ1bmN0aW9uKGEpe2Z1bmN0aW9uIGIoKXt9ZnVuY3Rpb24gYygpe3JldHVybiBkLmFwcGx5KHRoaXMsYXJndW1lbnRzKX12YXIgZD10aGlzO2IucHJvdG90eXBlPWQucHJvdG90eXBlO3ZhciBlPW5ldyBiO3AoZSxjLnByb3RvdHlwZSk7Yy5wcm90b3R5cGU9ZTtjLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1jO2MuSW50ZXJmYWNlPXAoe30sZC5JbnRlcmZhY2UsYSk7Yy5leHRlbmQ9ZC5leHRlbmQ7cWIoYyk7cmV0dXJuIGN9O3FiKEgpO1xuZnVuY3Rpb24gcmIoYSxiLGMsZCl7aWYodGhpcy5ldmVudFBvb2wubGVuZ3RoKXt2YXIgZT10aGlzLmV2ZW50UG9vbC5wb3AoKTt0aGlzLmNhbGwoZSxhLGIsYyxkKTtyZXR1cm4gZX1yZXR1cm4gbmV3IHRoaXMoYSxiLGMsZCl9ZnVuY3Rpb24gc2IoYSl7YSBpbnN0YW5jZW9mIHRoaXM/dm9pZCAwOkEoXCIyMjNcIik7YS5kZXN0cnVjdG9yKCk7MTA+dGhpcy5ldmVudFBvb2wubGVuZ3RoJiZ0aGlzLmV2ZW50UG9vbC5wdXNoKGEpfWZ1bmN0aW9uIHFiKGEpe2EuZXZlbnRQb29sPVtdO2EuZ2V0UG9vbGVkPXJiO2EucmVsZWFzZT1zYn12YXIgdGI9SC5leHRlbmQoe2RhdGE6bnVsbH0pLHViPUguZXh0ZW5kKHtkYXRhOm51bGx9KSx2Yj1bOSwxMywyNywzMl0sd2I9bS5jYW5Vc2VET00mJlwiQ29tcG9zaXRpb25FdmVudFwiaW4gd2luZG93LHhiPW51bGw7bS5jYW5Vc2VET00mJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmKHhiPWRvY3VtZW50LmRvY3VtZW50TW9kZSk7XG52YXIgeWI9bS5jYW5Vc2VET00mJlwiVGV4dEV2ZW50XCJpbiB3aW5kb3cmJiF4Yix6Yj1tLmNhblVzZURPTSYmKCF3Ynx8eGImJjg8eGImJjExPj14YiksQWI9U3RyaW5nLmZyb21DaGFyQ29kZSgzMiksQmI9e2JlZm9yZUlucHV0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQmVmb3JlSW5wdXRcIixjYXB0dXJlZDpcIm9uQmVmb3JlSW5wdXRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpbXCJjb21wb3NpdGlvbmVuZFwiLFwia2V5cHJlc3NcIixcInRleHRJbnB1dFwiLFwicGFzdGVcIl19LGNvbXBvc2l0aW9uRW5kOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25FbmRcIixjYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25FbmRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29tcG9zaXRpb25lbmQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIil9LGNvbXBvc2l0aW9uU3RhcnQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvblN0YXJ0XCIsXG5jYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25TdGFydENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb21wb3NpdGlvbnN0YXJ0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpfSxjb21wb3NpdGlvblVwZGF0ZTp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uVXBkYXRlXCIsY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uVXBkYXRlQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbXBvc2l0aW9udXBkYXRlIGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpfX0sQ2I9ITE7XG5mdW5jdGlvbiBEYihhLGIpe3N3aXRjaChhKXtjYXNlIFwia2V5dXBcIjpyZXR1cm4tMSE9PXZiLmluZGV4T2YoYi5rZXlDb2RlKTtjYXNlIFwia2V5ZG93blwiOnJldHVybiAyMjkhPT1iLmtleUNvZGU7Y2FzZSBcImtleXByZXNzXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJibHVyXCI6cmV0dXJuITA7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gRWIoYSl7YT1hLmRldGFpbDtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJlwiZGF0YVwiaW4gYT9hLmRhdGE6bnVsbH12YXIgRmI9ITE7ZnVuY3Rpb24gR2IoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIEViKGIpO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDMyIT09Yi53aGljaClyZXR1cm4gbnVsbDtDYj0hMDtyZXR1cm4gQWI7Y2FzZSBcInRleHRJbnB1dFwiOnJldHVybiBhPWIuZGF0YSxhPT09QWImJkNiP251bGw6YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbmZ1bmN0aW9uIEhiKGEsYil7aWYoRmIpcmV0dXJuXCJjb21wb3NpdGlvbmVuZFwiPT09YXx8IXdiJiZEYihhLGIpPyhhPW1iKCksRy5fcm9vdD1udWxsLEcuX3N0YXJ0VGV4dD1udWxsLEcuX2ZhbGxiYWNrVGV4dD1udWxsLEZiPSExLGEpOm51bGw7c3dpdGNoKGEpe2Nhc2UgXCJwYXN0ZVwiOnJldHVybiBudWxsO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKCEoYi5jdHJsS2V5fHxiLmFsdEtleXx8Yi5tZXRhS2V5KXx8Yi5jdHJsS2V5JiZiLmFsdEtleSl7aWYoYi5jaGFyJiYxPGIuY2hhci5sZW5ndGgpcmV0dXJuIGIuY2hhcjtpZihiLndoaWNoKXJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGIud2hpY2gpfXJldHVybiBudWxsO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiB6Yj9udWxsOmIuZGF0YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbnZhciBJYj17ZXZlbnRUeXBlczpCYixleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPXZvaWQgMDt2YXIgZj12b2lkIDA7aWYod2IpYjp7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbnN0YXJ0XCI6ZT1CYi5jb21wb3NpdGlvblN0YXJ0O2JyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6ZT1CYi5jb21wb3NpdGlvbkVuZDticmVhayBiO2Nhc2UgXCJjb21wb3NpdGlvbnVwZGF0ZVwiOmU9QmIuY29tcG9zaXRpb25VcGRhdGU7YnJlYWsgYn1lPXZvaWQgMH1lbHNlIEZiP0RiKGEsYykmJihlPUJiLmNvbXBvc2l0aW9uRW5kKTpcImtleWRvd25cIj09PWEmJjIyOT09PWMua2V5Q29kZSYmKGU9QmIuY29tcG9zaXRpb25TdGFydCk7ZT8oemImJihGYnx8ZSE9PUJiLmNvbXBvc2l0aW9uU3RhcnQ/ZT09PUJiLmNvbXBvc2l0aW9uRW5kJiZGYiYmKGY9bWIoKSk6KEcuX3Jvb3Q9ZCxHLl9zdGFydFRleHQ9bmIoKSxGYj0hMCkpLGU9dGIuZ2V0UG9vbGVkKGUsYixjLGQpLGY/ZS5kYXRhPVxuZjooZj1FYihjKSxudWxsIT09ZiYmKGUuZGF0YT1mKSksWWEoZSksZj1lKTpmPW51bGw7KGE9eWI/R2IoYSxjKTpIYihhLGMpKT8oYj11Yi5nZXRQb29sZWQoQmIuYmVmb3JlSW5wdXQsYixjLGQpLGIuZGF0YT1hLFlhKGIpKTpiPW51bGw7cmV0dXJuIG51bGw9PT1mP2I6bnVsbD09PWI/ZjpbZixiXX19LEpiPW51bGwsS2I9e2luamVjdEZpYmVyQ29udHJvbGxlZEhvc3RDb21wb25lbnQ6ZnVuY3Rpb24oYSl7SmI9YX19LExiPW51bGwsTWI9bnVsbDtmdW5jdGlvbiBOYihhKXtpZihhPXhhKGEpKXtKYiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIEpiLnJlc3RvcmVDb250cm9sbGVkU3RhdGU/dm9pZCAwOkEoXCIxOTRcIik7dmFyIGI9d2EoYS5zdGF0ZU5vZGUpO0piLnJlc3RvcmVDb250cm9sbGVkU3RhdGUoYS5zdGF0ZU5vZGUsYS50eXBlLGIpfX1mdW5jdGlvbiBPYihhKXtMYj9NYj9NYi5wdXNoKGEpOk1iPVthXTpMYj1hfVxuZnVuY3Rpb24gUGIoKXtyZXR1cm4gbnVsbCE9PUxifHxudWxsIT09TWJ9ZnVuY3Rpb24gUWIoKXtpZihMYil7dmFyIGE9TGIsYj1NYjtNYj1MYj1udWxsO05iKGEpO2lmKGIpZm9yKGE9MDthPGIubGVuZ3RoO2ErKylOYihiW2FdKX19dmFyIFJiPXtpbmplY3Rpb246S2IsZW5xdWV1ZVN0YXRlUmVzdG9yZTpPYixuZWVkc1N0YXRlUmVzdG9yZTpQYixyZXN0b3JlU3RhdGVJZk5lZWRlZDpRYn07ZnVuY3Rpb24gU2IoYSxiKXtyZXR1cm4gYShiKX1mdW5jdGlvbiBUYihhLGIsYyl7cmV0dXJuIGEoYixjKX1mdW5jdGlvbiBVYigpe312YXIgVmI9ITE7ZnVuY3Rpb24gV2IoYSxiKXtpZihWYilyZXR1cm4gYShiKTtWYj0hMDt0cnl7cmV0dXJuIFNiKGEsYil9ZmluYWxseXtWYj0hMSxQYigpJiYoVWIoKSxRYigpKX19XG52YXIgWGI9e2NvbG9yOiEwLGRhdGU6ITAsZGF0ZXRpbWU6ITAsXCJkYXRldGltZS1sb2NhbFwiOiEwLGVtYWlsOiEwLG1vbnRoOiEwLG51bWJlcjohMCxwYXNzd29yZDohMCxyYW5nZTohMCxzZWFyY2g6ITAsdGVsOiEwLHRleHQ6ITAsdGltZTohMCx1cmw6ITAsd2VlazohMH07ZnVuY3Rpb24gWWIoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVyblwiaW5wdXRcIj09PWI/ISFYYlthLnR5cGVdOlwidGV4dGFyZWFcIj09PWI/ITA6ITF9ZnVuY3Rpb24gWmIoYSl7YT1hLnRhcmdldHx8YS5zcmNFbGVtZW50fHx3aW5kb3c7YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCYmKGE9YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCk7cmV0dXJuIDM9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphfVxuZnVuY3Rpb24gJGIoYSxiKXtpZighbS5jYW5Vc2VET018fGImJiEoXCJhZGRFdmVudExpc3RlbmVyXCJpbiBkb2N1bWVudCkpcmV0dXJuITE7YT1cIm9uXCIrYTtiPWEgaW4gZG9jdW1lbnQ7Ynx8KGI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxiLnNldEF0dHJpYnV0ZShhLFwicmV0dXJuO1wiKSxiPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBiW2FdKTtyZXR1cm4gYn1mdW5jdGlvbiBhYyhhKXt2YXIgYj1hLnR5cGU7cmV0dXJuKGE9YS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWEudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWJ8fFwicmFkaW9cIj09PWIpfVxuZnVuY3Rpb24gYmMoYSl7dmFyIGI9YWMoYSk/XCJjaGVja2VkXCI6XCJ2YWx1ZVwiLGM9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihhLmNvbnN0cnVjdG9yLnByb3RvdHlwZSxiKSxkPVwiXCIrYVtiXTtpZighYS5oYXNPd25Qcm9wZXJ0eShiKSYmXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5nZXQmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnNldCl7dmFyIGU9Yy5nZXQsZj1jLnNldDtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGUuY2FsbCh0aGlzKX0sc2V0OmZ1bmN0aW9uKGEpe2Q9XCJcIithO2YuY2FsbCh0aGlzLGEpfX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2VudW1lcmFibGU6Yy5lbnVtZXJhYmxlfSk7cmV0dXJue2dldFZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIGR9LHNldFZhbHVlOmZ1bmN0aW9uKGEpe2Q9XCJcIithfSxzdG9wVHJhY2tpbmc6ZnVuY3Rpb24oKXthLl92YWx1ZVRyYWNrZXI9XG5udWxsO2RlbGV0ZSBhW2JdfX19fWZ1bmN0aW9uIGNjKGEpe2EuX3ZhbHVlVHJhY2tlcnx8KGEuX3ZhbHVlVHJhY2tlcj1iYyhhKSl9ZnVuY3Rpb24gZGMoYSl7aWYoIWEpcmV0dXJuITE7dmFyIGI9YS5fdmFsdWVUcmFja2VyO2lmKCFiKXJldHVybiEwO3ZhciBjPWIuZ2V0VmFsdWUoKTt2YXIgZD1cIlwiO2EmJihkPWFjKGEpP2EuY2hlY2tlZD9cInRydWVcIjpcImZhbHNlXCI6YS52YWx1ZSk7YT1kO3JldHVybiBhIT09Yz8oYi5zZXRWYWx1ZShhKSwhMCk6ITF9XG52YXIgZWM9YmEuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQuUmVhY3RDdXJyZW50T3duZXIsZmM9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixnYz1mYz9TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyxoYz1mYz9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LGljPWZjP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxqYz1mYz9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsa2M9ZmM/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LGxjPWZjP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxtYz1mYz9TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCxwYz1mYz9TeW1ib2wuZm9yKFwicmVhY3QuYXN5bmNfbW9kZVwiKTo2MDExMSxxYz1mYz9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIscmM9ZmM/U3ltYm9sLmZvcihcInJlYWN0LnRpbWVvdXRcIik6XG42MDExMyxzYz1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gdGMoYSl7aWYobnVsbD09PWF8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPXNjJiZhW3NjXXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfVxuZnVuY3Rpb24gdWMoYSl7dmFyIGI9YS50eXBlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXJldHVybiBiLmRpc3BsYXlOYW1lfHxiLm5hbWU7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBiKXJldHVybiBiO3N3aXRjaChiKXtjYXNlIHBjOnJldHVyblwiQXN5bmNNb2RlXCI7Y2FzZSBtYzpyZXR1cm5cIkNvbnRleHQuQ29uc3VtZXJcIjtjYXNlIGljOnJldHVyblwiUmVhY3RGcmFnbWVudFwiO2Nhc2UgaGM6cmV0dXJuXCJSZWFjdFBvcnRhbFwiO2Nhc2Uga2M6cmV0dXJuXCJQcm9maWxlcihcIithLnBlbmRpbmdQcm9wcy5pZCtcIilcIjtjYXNlIGxjOnJldHVyblwiQ29udGV4dC5Qcm92aWRlclwiO2Nhc2UgamM6cmV0dXJuXCJTdHJpY3RNb2RlXCI7Y2FzZSByYzpyZXR1cm5cIlRpbWVvdXRcIn1pZihcIm9iamVjdFwiPT09dHlwZW9mIGImJm51bGwhPT1iKXN3aXRjaChiLiQkdHlwZW9mKXtjYXNlIHFjOnJldHVybiBhPWIucmVuZGVyLmRpc3BsYXlOYW1lfHxiLnJlbmRlci5uYW1lfHxcIlwiLFwiXCIhPT1hP1wiRm9yd2FyZFJlZihcIitcbmErXCIpXCI6XCJGb3J3YXJkUmVmXCJ9cmV0dXJuIG51bGx9ZnVuY3Rpb24gdmMoYSl7dmFyIGI9XCJcIjtkb3thOnN3aXRjaChhLnRhZyl7Y2FzZSAwOmNhc2UgMTpjYXNlIDI6Y2FzZSA1OnZhciBjPWEuX2RlYnVnT3duZXIsZD1hLl9kZWJ1Z1NvdXJjZTt2YXIgZT11YyhhKTt2YXIgZj1udWxsO2MmJihmPXVjKGMpKTtjPWQ7ZT1cIlxcbiAgICBpbiBcIisoZXx8XCJVbmtub3duXCIpKyhjP1wiIChhdCBcIitjLmZpbGVOYW1lLnJlcGxhY2UoL14uKltcXFxcXFwvXS8sXCJcIikrXCI6XCIrYy5saW5lTnVtYmVyK1wiKVwiOmY/XCIgKGNyZWF0ZWQgYnkgXCIrZitcIilcIjpcIlwiKTticmVhayBhO2RlZmF1bHQ6ZT1cIlwifWIrPWU7YT1hLnJldHVybn13aGlsZShhKTtyZXR1cm4gYn1cbnZhciB3Yz0vXls6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRF1bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRcXC0uMC05XFx1MDBCN1xcdTAzMDAtXFx1MDM2RlxcdTIwM0YtXFx1MjA0MF0qJC8seGM9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSx6Yz17fSxBYz17fTtcbmZ1bmN0aW9uIEJjKGEpe2lmKHhjLmNhbGwoQWMsYSkpcmV0dXJuITA7aWYoeGMuY2FsbCh6YyxhKSlyZXR1cm4hMTtpZih3Yy50ZXN0KGEpKXJldHVybiBBY1thXT0hMDt6Y1thXT0hMDtyZXR1cm4hMX1mdW5jdGlvbiBDYyhhLGIsYyxkKXtpZihudWxsIT09YyYmMD09PWMudHlwZSlyZXR1cm4hMTtzd2l0Y2godHlwZW9mIGIpe2Nhc2UgXCJmdW5jdGlvblwiOmNhc2UgXCJzeW1ib2xcIjpyZXR1cm4hMDtjYXNlIFwiYm9vbGVhblwiOmlmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpcmV0dXJuIWMuYWNjZXB0c0Jvb2xlYW5zO2E9YS50b0xvd2VyQ2FzZSgpLnNsaWNlKDAsNSk7cmV0dXJuXCJkYXRhLVwiIT09YSYmXCJhcmlhLVwiIT09YTtkZWZhdWx0OnJldHVybiExfX1cbmZ1bmN0aW9uIERjKGEsYixjLGQpe2lmKG51bGw9PT1ifHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIGJ8fENjKGEsYixjLGQpKXJldHVybiEwO2lmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpc3dpdGNoKGMudHlwZSl7Y2FzZSAzOnJldHVybiFiO2Nhc2UgNDpyZXR1cm4hMT09PWI7Y2FzZSA1OnJldHVybiBpc05hTihiKTtjYXNlIDY6cmV0dXJuIGlzTmFOKGIpfHwxPmJ9cmV0dXJuITF9ZnVuY3Rpb24gSShhLGIsYyxkLGUpe3RoaXMuYWNjZXB0c0Jvb2xlYW5zPTI9PT1ifHwzPT09Ynx8ND09PWI7dGhpcy5hdHRyaWJ1dGVOYW1lPWQ7dGhpcy5hdHRyaWJ1dGVOYW1lc3BhY2U9ZTt0aGlzLm11c3RVc2VQcm9wZXJ0eT1jO3RoaXMucHJvcGVydHlOYW1lPWE7dGhpcy50eXBlPWJ9dmFyIEo9e307XG5cImNoaWxkcmVuIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIGRlZmF1bHRWYWx1ZSBkZWZhdWx0Q2hlY2tlZCBpbm5lckhUTUwgc3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nIHN1cHByZXNzSHlkcmF0aW9uV2FybmluZyBzdHlsZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0pbYV09bmV3IEkoYSwwLCExLGEsbnVsbCl9KTtbW1wiYWNjZXB0Q2hhcnNldFwiLFwiYWNjZXB0LWNoYXJzZXRcIl0sW1wiY2xhc3NOYW1lXCIsXCJjbGFzc1wiXSxbXCJodG1sRm9yXCIsXCJmb3JcIl0sW1wiaHR0cEVxdWl2XCIsXCJodHRwLWVxdWl2XCJdXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWFbMF07SltiXT1uZXcgSShiLDEsITEsYVsxXSxudWxsKX0pO1tcImNvbnRlbnRFZGl0YWJsZVwiLFwiZHJhZ2dhYmxlXCIsXCJzcGVsbENoZWNrXCIsXCJ2YWx1ZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0pbYV09bmV3IEkoYSwyLCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO1xuW1wiYXV0b1JldmVyc2VcIixcImV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWRcIixcInByZXNlcnZlQWxwaGFcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtKW2FdPW5ldyBJKGEsMiwhMSxhLG51bGwpfSk7XCJhbGxvd0Z1bGxTY3JlZW4gYXN5bmMgYXV0b0ZvY3VzIGF1dG9QbGF5IGNvbnRyb2xzIGRlZmF1bHQgZGVmZXIgZGlzYWJsZWQgZm9ybU5vVmFsaWRhdGUgaGlkZGVuIGxvb3Agbm9Nb2R1bGUgbm9WYWxpZGF0ZSBvcGVuIHBsYXlzSW5saW5lIHJlYWRPbmx5IHJlcXVpcmVkIHJldmVyc2VkIHNjb3BlZCBzZWFtbGVzcyBpdGVtU2NvcGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtKW2FdPW5ldyBJKGEsMywhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTtbXCJjaGVja2VkXCIsXCJtdWx0aXBsZVwiLFwibXV0ZWRcIixcInNlbGVjdGVkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7SlthXT1uZXcgSShhLDMsITAsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7XG5bXCJjYXB0dXJlXCIsXCJkb3dubG9hZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0pbYV09bmV3IEkoYSw0LCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO1tcImNvbHNcIixcInJvd3NcIixcInNpemVcIixcInNwYW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtKW2FdPW5ldyBJKGEsNiwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTtbXCJyb3dTcGFuXCIsXCJzdGFydFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0pbYV09bmV3IEkoYSw1LCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO3ZhciBFYz0vW1xcLTpdKFthLXpdKS9nO2Z1bmN0aW9uIEZjKGEpe3JldHVybiBhWzFdLnRvVXBwZXJDYXNlKCl9XG5cImFjY2VudC1oZWlnaHQgYWxpZ25tZW50LWJhc2VsaW5lIGFyYWJpYy1mb3JtIGJhc2VsaW5lLXNoaWZ0IGNhcC1oZWlnaHQgY2xpcC1wYXRoIGNsaXAtcnVsZSBjb2xvci1pbnRlcnBvbGF0aW9uIGNvbG9yLWludGVycG9sYXRpb24tZmlsdGVycyBjb2xvci1wcm9maWxlIGNvbG9yLXJlbmRlcmluZyBkb21pbmFudC1iYXNlbGluZSBlbmFibGUtYmFja2dyb3VuZCBmaWxsLW9wYWNpdHkgZmlsbC1ydWxlIGZsb29kLWNvbG9yIGZsb29kLW9wYWNpdHkgZm9udC1mYW1pbHkgZm9udC1zaXplIGZvbnQtc2l6ZS1hZGp1c3QgZm9udC1zdHJldGNoIGZvbnQtc3R5bGUgZm9udC12YXJpYW50IGZvbnQtd2VpZ2h0IGdseXBoLW5hbWUgZ2x5cGgtb3JpZW50YXRpb24taG9yaXpvbnRhbCBnbHlwaC1vcmllbnRhdGlvbi12ZXJ0aWNhbCBob3Jpei1hZHYteCBob3Jpei1vcmlnaW4teCBpbWFnZS1yZW5kZXJpbmcgbGV0dGVyLXNwYWNpbmcgbGlnaHRpbmctY29sb3IgbWFya2VyLWVuZCBtYXJrZXItbWlkIG1hcmtlci1zdGFydCBvdmVybGluZS1wb3NpdGlvbiBvdmVybGluZS10aGlja25lc3MgcGFpbnQtb3JkZXIgcGFub3NlLTEgcG9pbnRlci1ldmVudHMgcmVuZGVyaW5nLWludGVudCBzaGFwZS1yZW5kZXJpbmcgc3RvcC1jb2xvciBzdG9wLW9wYWNpdHkgc3RyaWtldGhyb3VnaC1wb3NpdGlvbiBzdHJpa2V0aHJvdWdoLXRoaWNrbmVzcyBzdHJva2UtZGFzaGFycmF5IHN0cm9rZS1kYXNob2Zmc2V0IHN0cm9rZS1saW5lY2FwIHN0cm9rZS1saW5lam9pbiBzdHJva2UtbWl0ZXJsaW1pdCBzdHJva2Utb3BhY2l0eSBzdHJva2Utd2lkdGggdGV4dC1hbmNob3IgdGV4dC1kZWNvcmF0aW9uIHRleHQtcmVuZGVyaW5nIHVuZGVybGluZS1wb3NpdGlvbiB1bmRlcmxpbmUtdGhpY2tuZXNzIHVuaWNvZGUtYmlkaSB1bmljb2RlLXJhbmdlIHVuaXRzLXBlci1lbSB2LWFscGhhYmV0aWMgdi1oYW5naW5nIHYtaWRlb2dyYXBoaWMgdi1tYXRoZW1hdGljYWwgdmVjdG9yLWVmZmVjdCB2ZXJ0LWFkdi15IHZlcnQtb3JpZ2luLXggdmVydC1vcmlnaW4teSB3b3JkLXNwYWNpbmcgd3JpdGluZy1tb2RlIHhtbG5zOnhsaW5rIHgtaGVpZ2h0XCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKEVjLFxuRmMpO0pbYl09bmV3IEkoYiwxLCExLGEsbnVsbCl9KTtcInhsaW5rOmFjdHVhdGUgeGxpbms6YXJjcm9sZSB4bGluazpocmVmIHhsaW5rOnJvbGUgeGxpbms6c2hvdyB4bGluazp0aXRsZSB4bGluazp0eXBlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKEVjLEZjKTtKW2JdPW5ldyBJKGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiKX0pO1tcInhtbDpiYXNlXCIsXCJ4bWw6bGFuZ1wiLFwieG1sOnNwYWNlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKEVjLEZjKTtKW2JdPW5ldyBJKGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIpfSk7Si50YWJJbmRleD1uZXcgSShcInRhYkluZGV4XCIsMSwhMSxcInRhYmluZGV4XCIsbnVsbCk7XG5mdW5jdGlvbiBHYyhhLGIsYyxkKXt2YXIgZT1KLmhhc093blByb3BlcnR5KGIpP0pbYl06bnVsbDt2YXIgZj1udWxsIT09ZT8wPT09ZS50eXBlOmQ/ITE6ISgyPGIubGVuZ3RoKXx8XCJvXCIhPT1iWzBdJiZcIk9cIiE9PWJbMF18fFwiblwiIT09YlsxXSYmXCJOXCIhPT1iWzFdPyExOiEwO2Z8fChEYyhiLGMsZSxkKSYmKGM9bnVsbCksZHx8bnVsbD09PWU/QmMoYikmJihudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTphLnNldEF0dHJpYnV0ZShiLFwiXCIrYykpOmUubXVzdFVzZVByb3BlcnR5P2FbZS5wcm9wZXJ0eU5hbWVdPW51bGw9PT1jPzM9PT1lLnR5cGU/ITE6XCJcIjpjOihiPWUuYXR0cmlidXRlTmFtZSxkPWUuYXR0cmlidXRlTmFtZXNwYWNlLG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOihlPWUudHlwZSxjPTM9PT1lfHw0PT09ZSYmITA9PT1jP1wiXCI6XCJcIitjLGQ/YS5zZXRBdHRyaWJ1dGVOUyhkLGIsYyk6YS5zZXRBdHRyaWJ1dGUoYixjKSkpKX1cbmZ1bmN0aW9uIEhjKGEsYil7dmFyIGM9Yi5jaGVja2VkO3JldHVybiBwKHt9LGIse2RlZmF1bHRDaGVja2VkOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLHZhbHVlOnZvaWQgMCxjaGVja2VkOm51bGwhPWM/YzphLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWR9KX1mdW5jdGlvbiBJYyhhLGIpe3ZhciBjPW51bGw9PWIuZGVmYXVsdFZhbHVlP1wiXCI6Yi5kZWZhdWx0VmFsdWUsZD1udWxsIT1iLmNoZWNrZWQ/Yi5jaGVja2VkOmIuZGVmYXVsdENoZWNrZWQ7Yz1KYyhudWxsIT1iLnZhbHVlP2IudmFsdWU6Yyk7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsQ2hlY2tlZDpkLGluaXRpYWxWYWx1ZTpjLGNvbnRyb2xsZWQ6XCJjaGVja2JveFwiPT09Yi50eXBlfHxcInJhZGlvXCI9PT1iLnR5cGU/bnVsbCE9Yi5jaGVja2VkOm51bGwhPWIudmFsdWV9fWZ1bmN0aW9uIEtjKGEsYil7Yj1iLmNoZWNrZWQ7bnVsbCE9YiYmR2MoYSxcImNoZWNrZWRcIixiLCExKX1cbmZ1bmN0aW9uIExjKGEsYil7S2MoYSxiKTt2YXIgYz1KYyhiLnZhbHVlKTtpZihudWxsIT1jKWlmKFwibnVtYmVyXCI9PT1iLnR5cGUpe2lmKDA9PT1jJiZcIlwiPT09YS52YWx1ZXx8YS52YWx1ZSE9YylhLnZhbHVlPVwiXCIrY31lbHNlIGEudmFsdWUhPT1cIlwiK2MmJihhLnZhbHVlPVwiXCIrYyk7Yi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpP01jKGEsYi50eXBlLGMpOmIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikmJk1jKGEsYi50eXBlLEpjKGIuZGVmYXVsdFZhbHVlKSk7bnVsbD09Yi5jaGVja2VkJiZudWxsIT1iLmRlZmF1bHRDaGVja2VkJiYoYS5kZWZhdWx0Q2hlY2tlZD0hIWIuZGVmYXVsdENoZWNrZWQpfVxuZnVuY3Rpb24gTmMoYSxiLGMpe2lmKGIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKXx8Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSl7Yj1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU7dmFyIGQ9YS52YWx1ZTtjfHxiPT09ZHx8KGEudmFsdWU9Yik7YS5kZWZhdWx0VmFsdWU9Yn1jPWEubmFtZTtcIlwiIT09YyYmKGEubmFtZT1cIlwiKTthLmRlZmF1bHRDaGVja2VkPSFhLmRlZmF1bHRDaGVja2VkO2EuZGVmYXVsdENoZWNrZWQ9IWEuZGVmYXVsdENoZWNrZWQ7XCJcIiE9PWMmJihhLm5hbWU9Yyl9ZnVuY3Rpb24gTWMoYSxiLGMpe2lmKFwibnVtYmVyXCIhPT1ifHxhLm93bmVyRG9jdW1lbnQuYWN0aXZlRWxlbWVudCE9PWEpbnVsbD09Yz9hLmRlZmF1bHRWYWx1ZT1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU6YS5kZWZhdWx0VmFsdWUhPT1cIlwiK2MmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2MpfVxuZnVuY3Rpb24gSmMoYSl7c3dpdGNoKHR5cGVvZiBhKXtjYXNlIFwiYm9vbGVhblwiOmNhc2UgXCJudW1iZXJcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJ1bmRlZmluZWRcIjpyZXR1cm4gYTtkZWZhdWx0OnJldHVyblwiXCJ9fXZhciBPYz17Y2hhbmdlOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ2hhbmdlXCIsY2FwdHVyZWQ6XCJvbkNoYW5nZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjaGFuZ2UgY2xpY2sgZm9jdXMgaW5wdXQga2V5ZG93biBrZXl1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIil9fTtmdW5jdGlvbiBQYyhhLGIsYyl7YT1ILmdldFBvb2xlZChPYy5jaGFuZ2UsYSxiLGMpO2EudHlwZT1cImNoYW5nZVwiO09iKGMpO1lhKGEpO3JldHVybiBhfXZhciBRYz1udWxsLFJjPW51bGw7ZnVuY3Rpb24gU2MoYSl7SWEoYSwhMSl9ZnVuY3Rpb24gVGMoYSl7dmFyIGI9T2EoYSk7aWYoZGMoYikpcmV0dXJuIGF9XG5mdW5jdGlvbiBVYyhhLGIpe2lmKFwiY2hhbmdlXCI9PT1hKXJldHVybiBifXZhciBWYz0hMTttLmNhblVzZURPTSYmKFZjPSRiKFwiaW5wdXRcIikmJighZG9jdW1lbnQuZG9jdW1lbnRNb2RlfHw5PGRvY3VtZW50LmRvY3VtZW50TW9kZSkpO2Z1bmN0aW9uIFdjKCl7UWMmJihRYy5kZXRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixYYyksUmM9UWM9bnVsbCl9ZnVuY3Rpb24gWGMoYSl7XCJ2YWx1ZVwiPT09YS5wcm9wZXJ0eU5hbWUmJlRjKFJjKSYmKGE9UGMoUmMsYSxaYihhKSksV2IoU2MsYSkpfWZ1bmN0aW9uIFljKGEsYixjKXtcImZvY3VzXCI9PT1hPyhXYygpLFFjPWIsUmM9YyxRYy5hdHRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixYYykpOlwiYmx1clwiPT09YSYmV2MoKX1mdW5jdGlvbiBaYyhhKXtpZihcInNlbGVjdGlvbmNoYW5nZVwiPT09YXx8XCJrZXl1cFwiPT09YXx8XCJrZXlkb3duXCI9PT1hKXJldHVybiBUYyhSYyl9XG5mdW5jdGlvbiAkYyhhLGIpe2lmKFwiY2xpY2tcIj09PWEpcmV0dXJuIFRjKGIpfWZ1bmN0aW9uIGFkKGEsYil7aWYoXCJpbnB1dFwiPT09YXx8XCJjaGFuZ2VcIj09PWEpcmV0dXJuIFRjKGIpfVxudmFyIGJkPXtldmVudFR5cGVzOk9jLF9pc0lucHV0RXZlbnRTdXBwb3J0ZWQ6VmMsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1iP09hKGIpOndpbmRvdyxmPXZvaWQgMCxnPXZvaWQgMCxoPWUubm9kZU5hbWUmJmUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcInNlbGVjdFwiPT09aHx8XCJpbnB1dFwiPT09aCYmXCJmaWxlXCI9PT1lLnR5cGU/Zj1VYzpZYihlKT9WYz9mPWFkOihmPVpjLGc9WWMpOihoPWUubm9kZU5hbWUpJiZcImlucHV0XCI9PT1oLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1lLnR5cGV8fFwicmFkaW9cIj09PWUudHlwZSkmJihmPSRjKTtpZihmJiYoZj1mKGEsYikpKXJldHVybiBQYyhmLGMsZCk7ZyYmZyhhLGUsYik7XCJibHVyXCI9PT1hJiYoYT1lLl93cmFwcGVyU3RhdGUpJiZhLmNvbnRyb2xsZWQmJlwibnVtYmVyXCI9PT1lLnR5cGUmJk1jKGUsXCJudW1iZXJcIixlLnZhbHVlKX19LGNkPUguZXh0ZW5kKHt2aWV3Om51bGwsZGV0YWlsOm51bGx9KSxkZD17QWx0OlwiYWx0S2V5XCIsXG5Db250cm9sOlwiY3RybEtleVwiLE1ldGE6XCJtZXRhS2V5XCIsU2hpZnQ6XCJzaGlmdEtleVwifTtmdW5jdGlvbiBlZChhKXt2YXIgYj10aGlzLm5hdGl2ZUV2ZW50O3JldHVybiBiLmdldE1vZGlmaWVyU3RhdGU/Yi5nZXRNb2RpZmllclN0YXRlKGEpOihhPWRkW2FdKT8hIWJbYV06ITF9ZnVuY3Rpb24gZmQoKXtyZXR1cm4gZWR9XG52YXIgZ2Q9Y2QuZXh0ZW5kKHtzY3JlZW5YOm51bGwsc2NyZWVuWTpudWxsLGNsaWVudFg6bnVsbCxjbGllbnRZOm51bGwscGFnZVg6bnVsbCxwYWdlWTpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxnZXRNb2RpZmllclN0YXRlOmZkLGJ1dHRvbjpudWxsLGJ1dHRvbnM6bnVsbCxyZWxhdGVkVGFyZ2V0OmZ1bmN0aW9uKGEpe3JldHVybiBhLnJlbGF0ZWRUYXJnZXR8fChhLmZyb21FbGVtZW50PT09YS5zcmNFbGVtZW50P2EudG9FbGVtZW50OmEuZnJvbUVsZW1lbnQpfX0pLGhkPWdkLmV4dGVuZCh7cG9pbnRlcklkOm51bGwsd2lkdGg6bnVsbCxoZWlnaHQ6bnVsbCxwcmVzc3VyZTpudWxsLHRpbHRYOm51bGwsdGlsdFk6bnVsbCxwb2ludGVyVHlwZTpudWxsLGlzUHJpbWFyeTpudWxsfSksaWQ9e21vdXNlRW50ZXI6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvbk1vdXNlRW50ZXJcIixkZXBlbmRlbmNpZXM6W1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXX0sXG5tb3VzZUxlYXZlOntyZWdpc3RyYXRpb25OYW1lOlwib25Nb3VzZUxlYXZlXCIsZGVwZW5kZW5jaWVzOltcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl19LHBvaW50ZXJFbnRlcjp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uUG9pbnRlckVudGVyXCIsZGVwZW5kZW5jaWVzOltcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdfSxwb2ludGVyTGVhdmU6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvblBvaW50ZXJMZWF2ZVwiLGRlcGVuZGVuY2llczpbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXX19LGpkPXtldmVudFR5cGVzOmlkLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9XCJtb3VzZW92ZXJcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWEsZj1cIm1vdXNlb3V0XCI9PT1hfHxcInBvaW50ZXJvdXRcIj09PWE7aWYoZSYmKGMucmVsYXRlZFRhcmdldHx8Yy5mcm9tRWxlbWVudCl8fCFmJiYhZSlyZXR1cm4gbnVsbDtlPWQud2luZG93PT09ZD9kOihlPWQub3duZXJEb2N1bWVudCk/ZS5kZWZhdWx0Vmlld3x8XG5lLnBhcmVudFdpbmRvdzp3aW5kb3c7Zj8oZj1iLGI9KGI9Yy5yZWxhdGVkVGFyZ2V0fHxjLnRvRWxlbWVudCk/TmEoYik6bnVsbCk6Zj1udWxsO2lmKGY9PT1iKXJldHVybiBudWxsO3ZhciBnPXZvaWQgMCxoPXZvaWQgMCxrPXZvaWQgMCxuPXZvaWQgMDtpZihcIm1vdXNlb3V0XCI9PT1hfHxcIm1vdXNlb3ZlclwiPT09YSlnPWdkLGg9aWQubW91c2VMZWF2ZSxrPWlkLm1vdXNlRW50ZXIsbj1cIm1vdXNlXCI7ZWxzZSBpZihcInBvaW50ZXJvdXRcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWEpZz1oZCxoPWlkLnBvaW50ZXJMZWF2ZSxrPWlkLnBvaW50ZXJFbnRlcixuPVwicG9pbnRlclwiO2E9bnVsbD09Zj9lOk9hKGYpO2U9bnVsbD09Yj9lOk9hKGIpO2g9Zy5nZXRQb29sZWQoaCxmLGMsZCk7aC50eXBlPW4rXCJsZWF2ZVwiO2gudGFyZ2V0PWE7aC5yZWxhdGVkVGFyZ2V0PWU7Yz1nLmdldFBvb2xlZChrLGIsYyxkKTtjLnR5cGU9bitcImVudGVyXCI7Yy50YXJnZXQ9ZTtjLnJlbGF0ZWRUYXJnZXQ9YTtaYShoLFxuYyxmLGIpO3JldHVybltoLGNdfX07ZnVuY3Rpb24ga2QoYSl7dmFyIGI9YTtpZihhLmFsdGVybmF0ZSlmb3IoO2IucmV0dXJuOyliPWIucmV0dXJuO2Vsc2V7aWYoMCE9PShiLmVmZmVjdFRhZyYyKSlyZXR1cm4gMTtmb3IoO2IucmV0dXJuOylpZihiPWIucmV0dXJuLDAhPT0oYi5lZmZlY3RUYWcmMikpcmV0dXJuIDF9cmV0dXJuIDM9PT1iLnRhZz8yOjN9ZnVuY3Rpb24gbGQoYSl7MiE9PWtkKGEpP0EoXCIxODhcIik6dm9pZCAwfVxuZnVuY3Rpb24gbWQoYSl7dmFyIGI9YS5hbHRlcm5hdGU7aWYoIWIpcmV0dXJuIGI9a2QoYSksMz09PWI/QShcIjE4OFwiKTp2b2lkIDAsMT09PWI/bnVsbDphO2Zvcih2YXIgYz1hLGQ9Yjs7KXt2YXIgZT1jLnJldHVybixmPWU/ZS5hbHRlcm5hdGU6bnVsbDtpZighZXx8IWYpYnJlYWs7aWYoZS5jaGlsZD09PWYuY2hpbGQpe2Zvcih2YXIgZz1lLmNoaWxkO2c7KXtpZihnPT09YylyZXR1cm4gbGQoZSksYTtpZihnPT09ZClyZXR1cm4gbGQoZSksYjtnPWcuc2libGluZ31BKFwiMTg4XCIpfWlmKGMucmV0dXJuIT09ZC5yZXR1cm4pYz1lLGQ9ZjtlbHNle2c9ITE7Zm9yKHZhciBoPWUuY2hpbGQ7aDspe2lmKGg9PT1jKXtnPSEwO2M9ZTtkPWY7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1lO2M9ZjticmVha31oPWguc2libGluZ31pZighZyl7Zm9yKGg9Zi5jaGlsZDtoOyl7aWYoaD09PWMpe2c9ITA7Yz1mO2Q9ZTticmVha31pZihoPT09ZCl7Zz0hMDtkPWY7Yz1lO2JyZWFrfWg9aC5zaWJsaW5nfWc/XG52b2lkIDA6QShcIjE4OVwiKX19Yy5hbHRlcm5hdGUhPT1kP0EoXCIxOTBcIik6dm9pZCAwfTMhPT1jLnRhZz9BKFwiMTg4XCIpOnZvaWQgMDtyZXR1cm4gYy5zdGF0ZU5vZGUuY3VycmVudD09PWM/YTpifWZ1bmN0aW9uIG5kKGEpe2E9bWQoYSk7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKHZhciBiPWE7Oyl7aWYoNT09PWIudGFnfHw2PT09Yi50YWcpcmV0dXJuIGI7aWYoYi5jaGlsZCliLmNoaWxkLnJldHVybj1iLGI9Yi5jaGlsZDtlbHNle2lmKGI9PT1hKWJyZWFrO2Zvcig7IWIuc2libGluZzspe2lmKCFiLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybiBudWxsO2I9Yi5yZXR1cm59Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ319cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBvZChhKXthPW1kKGEpO2lmKCFhKXJldHVybiBudWxsO2Zvcih2YXIgYj1hOzspe2lmKDU9PT1iLnRhZ3x8Nj09PWIudGFnKXJldHVybiBiO2lmKGIuY2hpbGQmJjQhPT1iLnRhZyliLmNoaWxkLnJldHVybj1iLGI9Yi5jaGlsZDtlbHNle2lmKGI9PT1hKWJyZWFrO2Zvcig7IWIuc2libGluZzspe2lmKCFiLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybiBudWxsO2I9Yi5yZXR1cm59Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ319cmV0dXJuIG51bGx9dmFyIHBkPUguZXh0ZW5kKHthbmltYXRpb25OYW1lOm51bGwsZWxhcHNlZFRpbWU6bnVsbCxwc2V1ZG9FbGVtZW50Om51bGx9KSxxZD1ILmV4dGVuZCh7Y2xpcGJvYXJkRGF0YTpmdW5jdGlvbihhKXtyZXR1cm5cImNsaXBib2FyZERhdGFcImluIGE/YS5jbGlwYm9hcmREYXRhOndpbmRvdy5jbGlwYm9hcmREYXRhfX0pLHJkPWNkLmV4dGVuZCh7cmVsYXRlZFRhcmdldDpudWxsfSk7XG5mdW5jdGlvbiBzZChhKXt2YXIgYj1hLmtleUNvZGU7XCJjaGFyQ29kZVwiaW4gYT8oYT1hLmNoYXJDb2RlLDA9PT1hJiYxMz09PWImJihhPTEzKSk6YT1iOzEwPT09YSYmKGE9MTMpO3JldHVybiAzMjw9YXx8MTM9PT1hP2E6MH1cbnZhciB0ZD17RXNjOlwiRXNjYXBlXCIsU3BhY2ViYXI6XCIgXCIsTGVmdDpcIkFycm93TGVmdFwiLFVwOlwiQXJyb3dVcFwiLFJpZ2h0OlwiQXJyb3dSaWdodFwiLERvd246XCJBcnJvd0Rvd25cIixEZWw6XCJEZWxldGVcIixXaW46XCJPU1wiLE1lbnU6XCJDb250ZXh0TWVudVwiLEFwcHM6XCJDb250ZXh0TWVudVwiLFNjcm9sbDpcIlNjcm9sbExvY2tcIixNb3pQcmludGFibGVLZXk6XCJVbmlkZW50aWZpZWRcIn0sdWQ9ezg6XCJCYWNrc3BhY2VcIiw5OlwiVGFiXCIsMTI6XCJDbGVhclwiLDEzOlwiRW50ZXJcIiwxNjpcIlNoaWZ0XCIsMTc6XCJDb250cm9sXCIsMTg6XCJBbHRcIiwxOTpcIlBhdXNlXCIsMjA6XCJDYXBzTG9ja1wiLDI3OlwiRXNjYXBlXCIsMzI6XCIgXCIsMzM6XCJQYWdlVXBcIiwzNDpcIlBhZ2VEb3duXCIsMzU6XCJFbmRcIiwzNjpcIkhvbWVcIiwzNzpcIkFycm93TGVmdFwiLDM4OlwiQXJyb3dVcFwiLDM5OlwiQXJyb3dSaWdodFwiLDQwOlwiQXJyb3dEb3duXCIsNDU6XCJJbnNlcnRcIiw0NjpcIkRlbGV0ZVwiLDExMjpcIkYxXCIsMTEzOlwiRjJcIiwxMTQ6XCJGM1wiLDExNTpcIkY0XCIsXG4xMTY6XCJGNVwiLDExNzpcIkY2XCIsMTE4OlwiRjdcIiwxMTk6XCJGOFwiLDEyMDpcIkY5XCIsMTIxOlwiRjEwXCIsMTIyOlwiRjExXCIsMTIzOlwiRjEyXCIsMTQ0OlwiTnVtTG9ja1wiLDE0NTpcIlNjcm9sbExvY2tcIiwyMjQ6XCJNZXRhXCJ9LHZkPWNkLmV4dGVuZCh7a2V5OmZ1bmN0aW9uKGEpe2lmKGEua2V5KXt2YXIgYj10ZFthLmtleV18fGEua2V5O2lmKFwiVW5pZGVudGlmaWVkXCIhPT1iKXJldHVybiBifXJldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT8oYT1zZChhKSwxMz09PWE/XCJFbnRlclwiOlN0cmluZy5mcm9tQ2hhckNvZGUoYSkpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/dWRbYS5rZXlDb2RlXXx8XCJVbmlkZW50aWZpZWRcIjpcIlwifSxsb2NhdGlvbjpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxyZXBlYXQ6bnVsbCxsb2NhbGU6bnVsbCxnZXRNb2RpZmllclN0YXRlOmZkLGNoYXJDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PVxuYS50eXBlP3NkKGEpOjB9LGtleUNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH0sd2hpY2g6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlP3NkKGEpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9fSksd2Q9Z2QuZXh0ZW5kKHtkYXRhVHJhbnNmZXI6bnVsbH0pLHhkPWNkLmV4dGVuZCh7dG91Y2hlczpudWxsLHRhcmdldFRvdWNoZXM6bnVsbCxjaGFuZ2VkVG91Y2hlczpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxnZXRNb2RpZmllclN0YXRlOmZkfSkseWQ9SC5leHRlbmQoe3Byb3BlcnR5TmFtZTpudWxsLGVsYXBzZWRUaW1lOm51bGwscHNldWRvRWxlbWVudDpudWxsfSksemQ9Z2QuZXh0ZW5kKHtkZWx0YVg6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVhcImluIGE/YS5kZWx0YVg6XCJ3aGVlbERlbHRhWFwiaW5cbmE/LWEud2hlZWxEZWx0YVg6MH0sZGVsdGFZOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFZXCJpbiBhP2EuZGVsdGFZOlwid2hlZWxEZWx0YVlcImluIGE/LWEud2hlZWxEZWx0YVk6XCJ3aGVlbERlbHRhXCJpbiBhPy1hLndoZWVsRGVsdGE6MH0sZGVsdGFaOm51bGwsZGVsdGFNb2RlOm51bGx9KSxBZD1bW1wiYWJvcnRcIixcImFib3J0XCJdLFtmYixcImFuaW1hdGlvbkVuZFwiXSxbZ2IsXCJhbmltYXRpb25JdGVyYXRpb25cIl0sW2hiLFwiYW5pbWF0aW9uU3RhcnRcIl0sW1wiY2FucGxheVwiLFwiY2FuUGxheVwiXSxbXCJjYW5wbGF5dGhyb3VnaFwiLFwiY2FuUGxheVRocm91Z2hcIl0sW1wiZHJhZ1wiLFwiZHJhZ1wiXSxbXCJkcmFnZW50ZXJcIixcImRyYWdFbnRlclwiXSxbXCJkcmFnZXhpdFwiLFwiZHJhZ0V4aXRcIl0sW1wiZHJhZ2xlYXZlXCIsXCJkcmFnTGVhdmVcIl0sW1wiZHJhZ292ZXJcIixcImRyYWdPdmVyXCJdLFtcImR1cmF0aW9uY2hhbmdlXCIsXCJkdXJhdGlvbkNoYW5nZVwiXSxbXCJlbXB0aWVkXCIsXCJlbXB0aWVkXCJdLFtcImVuY3J5cHRlZFwiLFwiZW5jcnlwdGVkXCJdLFxuW1wiZW5kZWRcIixcImVuZGVkXCJdLFtcImVycm9yXCIsXCJlcnJvclwiXSxbXCJnb3Rwb2ludGVyY2FwdHVyZVwiLFwiZ290UG9pbnRlckNhcHR1cmVcIl0sW1wibG9hZFwiLFwibG9hZFwiXSxbXCJsb2FkZWRkYXRhXCIsXCJsb2FkZWREYXRhXCJdLFtcImxvYWRlZG1ldGFkYXRhXCIsXCJsb2FkZWRNZXRhZGF0YVwiXSxbXCJsb2Fkc3RhcnRcIixcImxvYWRTdGFydFwiXSxbXCJsb3N0cG9pbnRlcmNhcHR1cmVcIixcImxvc3RQb2ludGVyQ2FwdHVyZVwiXSxbXCJtb3VzZW1vdmVcIixcIm1vdXNlTW92ZVwiXSxbXCJtb3VzZW91dFwiLFwibW91c2VPdXRcIl0sW1wibW91c2VvdmVyXCIsXCJtb3VzZU92ZXJcIl0sW1wicGxheWluZ1wiLFwicGxheWluZ1wiXSxbXCJwb2ludGVybW92ZVwiLFwicG9pbnRlck1vdmVcIl0sW1wicG9pbnRlcm91dFwiLFwicG9pbnRlck91dFwiXSxbXCJwb2ludGVyb3ZlclwiLFwicG9pbnRlck92ZXJcIl0sW1wicHJvZ3Jlc3NcIixcInByb2dyZXNzXCJdLFtcInNjcm9sbFwiLFwic2Nyb2xsXCJdLFtcInNlZWtpbmdcIixcInNlZWtpbmdcIl0sW1wic3RhbGxlZFwiLFwic3RhbGxlZFwiXSxcbltcInN1c3BlbmRcIixcInN1c3BlbmRcIl0sW1widGltZXVwZGF0ZVwiLFwidGltZVVwZGF0ZVwiXSxbXCJ0b2dnbGVcIixcInRvZ2dsZVwiXSxbXCJ0b3VjaG1vdmVcIixcInRvdWNoTW92ZVwiXSxbaWIsXCJ0cmFuc2l0aW9uRW5kXCJdLFtcIndhaXRpbmdcIixcIndhaXRpbmdcIl0sW1wid2hlZWxcIixcIndoZWVsXCJdXSxCZD17fSxDZD17fTtmdW5jdGlvbiBEZChhLGIpe3ZhciBjPWFbMF07YT1hWzFdO3ZhciBkPVwib25cIisoYVswXS50b1VwcGVyQ2FzZSgpK2Euc2xpY2UoMSkpO2I9e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOmQsY2FwdHVyZWQ6ZCtcIkNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOltjXSxpc0ludGVyYWN0aXZlOmJ9O0JkW2FdPWI7Q2RbY109Yn1cbltbXCJibHVyXCIsXCJibHVyXCJdLFtcImNhbmNlbFwiLFwiY2FuY2VsXCJdLFtcImNsaWNrXCIsXCJjbGlja1wiXSxbXCJjbG9zZVwiLFwiY2xvc2VcIl0sW1wiY29udGV4dG1lbnVcIixcImNvbnRleHRNZW51XCJdLFtcImNvcHlcIixcImNvcHlcIl0sW1wiY3V0XCIsXCJjdXRcIl0sW1wiZGJsY2xpY2tcIixcImRvdWJsZUNsaWNrXCJdLFtcImRyYWdlbmRcIixcImRyYWdFbmRcIl0sW1wiZHJhZ3N0YXJ0XCIsXCJkcmFnU3RhcnRcIl0sW1wiZHJvcFwiLFwiZHJvcFwiXSxbXCJmb2N1c1wiLFwiZm9jdXNcIl0sW1wiaW5wdXRcIixcImlucHV0XCJdLFtcImludmFsaWRcIixcImludmFsaWRcIl0sW1wia2V5ZG93blwiLFwia2V5RG93blwiXSxbXCJrZXlwcmVzc1wiLFwia2V5UHJlc3NcIl0sW1wia2V5dXBcIixcImtleVVwXCJdLFtcIm1vdXNlZG93blwiLFwibW91c2VEb3duXCJdLFtcIm1vdXNldXBcIixcIm1vdXNlVXBcIl0sW1wicGFzdGVcIixcInBhc3RlXCJdLFtcInBhdXNlXCIsXCJwYXVzZVwiXSxbXCJwbGF5XCIsXCJwbGF5XCJdLFtcInBvaW50ZXJjYW5jZWxcIixcInBvaW50ZXJDYW5jZWxcIl0sW1wicG9pbnRlcmRvd25cIixcInBvaW50ZXJEb3duXCJdLFxuW1wicG9pbnRlcnVwXCIsXCJwb2ludGVyVXBcIl0sW1wicmF0ZWNoYW5nZVwiLFwicmF0ZUNoYW5nZVwiXSxbXCJyZXNldFwiLFwicmVzZXRcIl0sW1wic2Vla2VkXCIsXCJzZWVrZWRcIl0sW1wic3VibWl0XCIsXCJzdWJtaXRcIl0sW1widG91Y2hjYW5jZWxcIixcInRvdWNoQ2FuY2VsXCJdLFtcInRvdWNoZW5kXCIsXCJ0b3VjaEVuZFwiXSxbXCJ0b3VjaHN0YXJ0XCIsXCJ0b3VjaFN0YXJ0XCJdLFtcInZvbHVtZWNoYW5nZVwiLFwidm9sdW1lQ2hhbmdlXCJdXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RkKGEsITApfSk7QWQuZm9yRWFjaChmdW5jdGlvbihhKXtEZChhLCExKX0pO1xudmFyIEVkPXtldmVudFR5cGVzOkJkLGlzSW50ZXJhY3RpdmVUb3BMZXZlbEV2ZW50VHlwZTpmdW5jdGlvbihhKXthPUNkW2FdO3JldHVybiB2b2lkIDAhPT1hJiYhMD09PWEuaXNJbnRlcmFjdGl2ZX0sZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1DZFthXTtpZighZSlyZXR1cm4gbnVsbDtzd2l0Y2goYSl7Y2FzZSBcImtleXByZXNzXCI6aWYoMD09PXNkKGMpKXJldHVybiBudWxsO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6YT12ZDticmVhaztjYXNlIFwiYmx1clwiOmNhc2UgXCJmb2N1c1wiOmE9cmQ7YnJlYWs7Y2FzZSBcImNsaWNrXCI6aWYoMj09PWMuYnV0dG9uKXJldHVybiBudWxsO2Nhc2UgXCJkYmxjbGlja1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwibW91c2Vtb3ZlXCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwibW91c2VvdXRcIjpjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcImNvbnRleHRtZW51XCI6YT1nZDticmVhaztjYXNlIFwiZHJhZ1wiOmNhc2UgXCJkcmFnZW5kXCI6Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnZXhpdFwiOmNhc2UgXCJkcmFnbGVhdmVcIjpjYXNlIFwiZHJhZ292ZXJcIjpjYXNlIFwiZHJhZ3N0YXJ0XCI6Y2FzZSBcImRyb3BcIjphPVxud2Q7YnJlYWs7Y2FzZSBcInRvdWNoY2FuY2VsXCI6Y2FzZSBcInRvdWNoZW5kXCI6Y2FzZSBcInRvdWNobW92ZVwiOmNhc2UgXCJ0b3VjaHN0YXJ0XCI6YT14ZDticmVhaztjYXNlIGZiOmNhc2UgZ2I6Y2FzZSBoYjphPXBkO2JyZWFrO2Nhc2UgaWI6YT15ZDticmVhaztjYXNlIFwic2Nyb2xsXCI6YT1jZDticmVhaztjYXNlIFwid2hlZWxcIjphPXpkO2JyZWFrO2Nhc2UgXCJjb3B5XCI6Y2FzZSBcImN1dFwiOmNhc2UgXCJwYXN0ZVwiOmE9cWQ7YnJlYWs7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJwb2ludGVyY2FuY2VsXCI6Y2FzZSBcInBvaW50ZXJkb3duXCI6Y2FzZSBcInBvaW50ZXJtb3ZlXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwicG9pbnRlcnVwXCI6YT1oZDticmVhaztkZWZhdWx0OmE9SH1iPWEuZ2V0UG9vbGVkKGUsYixjLGQpO1lhKGIpO3JldHVybiBifX0sRmQ9RWQuaXNJbnRlcmFjdGl2ZVRvcExldmVsRXZlbnRUeXBlLFxuR2Q9W107ZnVuY3Rpb24gSGQoYSl7dmFyIGI9YS50YXJnZXRJbnN0O2Rve2lmKCFiKXthLmFuY2VzdG9ycy5wdXNoKGIpO2JyZWFrfXZhciBjO2ZvcihjPWI7Yy5yZXR1cm47KWM9Yy5yZXR1cm47Yz0zIT09Yy50YWc/bnVsbDpjLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2lmKCFjKWJyZWFrO2EuYW5jZXN0b3JzLnB1c2goYik7Yj1OYShjKX13aGlsZShiKTtmb3IoYz0wO2M8YS5hbmNlc3RvcnMubGVuZ3RoO2MrKyliPWEuYW5jZXN0b3JzW2NdLEphKGEudG9wTGV2ZWxUeXBlLGIsYS5uYXRpdmVFdmVudCxaYihhLm5hdGl2ZUV2ZW50KSl9dmFyIElkPSEwO2Z1bmN0aW9uIEtkKGEpe0lkPSEhYX1mdW5jdGlvbiBLKGEsYil7aWYoIWIpcmV0dXJuIG51bGw7dmFyIGM9KEZkKGEpP0xkOk1kKS5iaW5kKG51bGwsYSk7Yi5hZGRFdmVudExpc3RlbmVyKGEsYywhMSl9XG5mdW5jdGlvbiBOZChhLGIpe2lmKCFiKXJldHVybiBudWxsO3ZhciBjPShGZChhKT9MZDpNZCkuYmluZChudWxsLGEpO2IuYWRkRXZlbnRMaXN0ZW5lcihhLGMsITApfWZ1bmN0aW9uIExkKGEsYil7VGIoTWQsYSxiKX1mdW5jdGlvbiBNZChhLGIpe2lmKElkKXt2YXIgYz1aYihiKTtjPU5hKGMpO251bGw9PT1jfHxcIm51bWJlclwiIT09dHlwZW9mIGMudGFnfHwyPT09a2QoYyl8fChjPW51bGwpO2lmKEdkLmxlbmd0aCl7dmFyIGQ9R2QucG9wKCk7ZC50b3BMZXZlbFR5cGU9YTtkLm5hdGl2ZUV2ZW50PWI7ZC50YXJnZXRJbnN0PWM7YT1kfWVsc2UgYT17dG9wTGV2ZWxUeXBlOmEsbmF0aXZlRXZlbnQ6Yix0YXJnZXRJbnN0OmMsYW5jZXN0b3JzOltdfTt0cnl7V2IoSGQsYSl9ZmluYWxseXthLnRvcExldmVsVHlwZT1udWxsLGEubmF0aXZlRXZlbnQ9bnVsbCxhLnRhcmdldEluc3Q9bnVsbCxhLmFuY2VzdG9ycy5sZW5ndGg9MCwxMD5HZC5sZW5ndGgmJkdkLnB1c2goYSl9fX1cbnZhciBPZD17Z2V0IF9lbmFibGVkKCl7cmV0dXJuIElkfSxzZXRFbmFibGVkOktkLGlzRW5hYmxlZDpmdW5jdGlvbigpe3JldHVybiBJZH0sdHJhcEJ1YmJsZWRFdmVudDpLLHRyYXBDYXB0dXJlZEV2ZW50Ok5kLGRpc3BhdGNoRXZlbnQ6TWR9LFBkPXt9LFFkPTAsUmQ9XCJfcmVhY3RMaXN0ZW5lcnNJRFwiKyhcIlwiK01hdGgucmFuZG9tKCkpLnNsaWNlKDIpO2Z1bmN0aW9uIFNkKGEpe09iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChhLFJkKXx8KGFbUmRdPVFkKyssUGRbYVtSZF1dPXt9KTtyZXR1cm4gUGRbYVtSZF1dfWZ1bmN0aW9uIFRkKGEpe2Zvcig7YSYmYS5maXJzdENoaWxkOylhPWEuZmlyc3RDaGlsZDtyZXR1cm4gYX1cbmZ1bmN0aW9uIFVkKGEsYil7dmFyIGM9VGQoYSk7YT0wO2Zvcih2YXIgZDtjOyl7aWYoMz09PWMubm9kZVR5cGUpe2Q9YStjLnRleHRDb250ZW50Lmxlbmd0aDtpZihhPD1iJiZkPj1iKXJldHVybntub2RlOmMsb2Zmc2V0OmItYX07YT1kfWE6e2Zvcig7Yzspe2lmKGMubmV4dFNpYmxpbmcpe2M9Yy5uZXh0U2libGluZzticmVhayBhfWM9Yy5wYXJlbnROb2RlfWM9dm9pZCAwfWM9VGQoYyl9fWZ1bmN0aW9uIFZkKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm4gYiYmKFwiaW5wdXRcIj09PWImJihcInRleHRcIj09PWEudHlwZXx8XCJzZWFyY2hcIj09PWEudHlwZXx8XCJ0ZWxcIj09PWEudHlwZXx8XCJ1cmxcIj09PWEudHlwZXx8XCJwYXNzd29yZFwiPT09YS50eXBlKXx8XCJ0ZXh0YXJlYVwiPT09Ynx8XCJ0cnVlXCI9PT1hLmNvbnRlbnRFZGl0YWJsZSl9XG52YXIgV2Q9bS5jYW5Vc2VET00mJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmMTE+PWRvY3VtZW50LmRvY3VtZW50TW9kZSxYZD17c2VsZWN0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uU2VsZWN0XCIsY2FwdHVyZWQ6XCJvblNlbGVjdENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb250ZXh0bWVudSBmb2N1cyBrZXlkb3duIGtleXVwIG1vdXNlZG93biBtb3VzZXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKX19LFlkPW51bGwsWmQ9bnVsbCwkZD1udWxsLGFlPSExO1xuZnVuY3Rpb24gYmUoYSxiKXtpZihhZXx8bnVsbD09WWR8fFlkIT09ZGEoKSlyZXR1cm4gbnVsbDt2YXIgYz1ZZDtcInNlbGVjdGlvblN0YXJ0XCJpbiBjJiZWZChjKT9jPXtzdGFydDpjLnNlbGVjdGlvblN0YXJ0LGVuZDpjLnNlbGVjdGlvbkVuZH06d2luZG93LmdldFNlbGVjdGlvbj8oYz13aW5kb3cuZ2V0U2VsZWN0aW9uKCksYz17YW5jaG9yTm9kZTpjLmFuY2hvck5vZGUsYW5jaG9yT2Zmc2V0OmMuYW5jaG9yT2Zmc2V0LGZvY3VzTm9kZTpjLmZvY3VzTm9kZSxmb2N1c09mZnNldDpjLmZvY3VzT2Zmc2V0fSk6Yz12b2lkIDA7cmV0dXJuICRkJiZlYSgkZCxjKT9udWxsOigkZD1jLGE9SC5nZXRQb29sZWQoWGQuc2VsZWN0LFpkLGEsYiksYS50eXBlPVwic2VsZWN0XCIsYS50YXJnZXQ9WWQsWWEoYSksYSl9XG52YXIgY2U9e2V2ZW50VHlwZXM6WGQsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1kLndpbmRvdz09PWQ/ZC5kb2N1bWVudDo5PT09ZC5ub2RlVHlwZT9kOmQub3duZXJEb2N1bWVudCxmO2lmKCEoZj0hZSkpe2E6e2U9U2QoZSk7Zj1zYS5vblNlbGVjdDtmb3IodmFyIGc9MDtnPGYubGVuZ3RoO2crKyl7dmFyIGg9ZltnXTtpZighZS5oYXNPd25Qcm9wZXJ0eShoKXx8IWVbaF0pe2U9ITE7YnJlYWsgYX19ZT0hMH1mPSFlfWlmKGYpcmV0dXJuIG51bGw7ZT1iP09hKGIpOndpbmRvdztzd2l0Y2goYSl7Y2FzZSBcImZvY3VzXCI6aWYoWWIoZSl8fFwidHJ1ZVwiPT09ZS5jb250ZW50RWRpdGFibGUpWWQ9ZSxaZD1iLCRkPW51bGw7YnJlYWs7Y2FzZSBcImJsdXJcIjokZD1aZD1ZZD1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZWRvd25cIjphZT0hMDticmVhaztjYXNlIFwiY29udGV4dG1lbnVcIjpjYXNlIFwibW91c2V1cFwiOnJldHVybiBhZT0hMSxiZShjLGQpO2Nhc2UgXCJzZWxlY3Rpb25jaGFuZ2VcIjppZihXZClicmVhaztcbmNhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6cmV0dXJuIGJlKGMsZCl9cmV0dXJuIG51bGx9fTtHYS5pbmplY3RFdmVudFBsdWdpbk9yZGVyKFwiUmVzcG9uZGVyRXZlbnRQbHVnaW4gU2ltcGxlRXZlbnRQbHVnaW4gVGFwRXZlbnRQbHVnaW4gRW50ZXJMZWF2ZUV2ZW50UGx1Z2luIENoYW5nZUV2ZW50UGx1Z2luIFNlbGVjdEV2ZW50UGx1Z2luIEJlZm9yZUlucHV0RXZlbnRQbHVnaW5cIi5zcGxpdChcIiBcIikpO3dhPVFhLmdldEZpYmVyQ3VycmVudFByb3BzRnJvbU5vZGU7eGE9UWEuZ2V0SW5zdGFuY2VGcm9tTm9kZTt5YT1RYS5nZXROb2RlRnJvbUluc3RhbmNlO0dhLmluamVjdEV2ZW50UGx1Z2luc0J5TmFtZSh7U2ltcGxlRXZlbnRQbHVnaW46RWQsRW50ZXJMZWF2ZUV2ZW50UGx1Z2luOmpkLENoYW5nZUV2ZW50UGx1Z2luOmJkLFNlbGVjdEV2ZW50UGx1Z2luOmNlLEJlZm9yZUlucHV0RXZlbnRQbHVnaW46SWJ9KTtcbnZhciBkZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgcmVxdWVzdEFuaW1hdGlvbkZyYW1lP3JlcXVlc3RBbmltYXRpb25GcmFtZTp2b2lkIDAsZWU9RGF0ZSxmZT1zZXRUaW1lb3V0LGdlPWNsZWFyVGltZW91dCxoZT12b2lkIDA7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBwZXJmb3JtYW5jZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHBlcmZvcm1hbmNlLm5vdyl7dmFyIGllPXBlcmZvcm1hbmNlO2hlPWZ1bmN0aW9uKCl7cmV0dXJuIGllLm5vdygpfX1lbHNlIGhlPWZ1bmN0aW9uKCl7cmV0dXJuIGVlLm5vdygpfTt2YXIgamU9dm9pZCAwLGtlPXZvaWQgMDtcbmlmKG0uY2FuVXNlRE9NKXt2YXIgbGU9XCJmdW5jdGlvblwiPT09dHlwZW9mIGRlP2RlOmZ1bmN0aW9uKCl7QShcIjI3NlwiKX0sTD1udWxsLG1lPW51bGwsbmU9LTEsb2U9ITEscGU9ITEscWU9MCxyZT0zMyxzZT0zMyx0ZT17ZGlkVGltZW91dDohMSx0aW1lUmVtYWluaW5nOmZ1bmN0aW9uKCl7dmFyIGE9cWUtaGUoKTtyZXR1cm4gMDxhP2E6MH19LHZlPWZ1bmN0aW9uKGEsYil7dmFyIGM9YS5zY2hlZHVsZWRDYWxsYmFjayxkPSExO3RyeXtjKGIpLGQ9ITB9ZmluYWxseXtrZShhKSxkfHwob2U9ITAsd2luZG93LnBvc3RNZXNzYWdlKHVlLFwiKlwiKSl9fSx1ZT1cIl9fcmVhY3RJZGxlQ2FsbGJhY2skXCIrTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMik7d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsZnVuY3Rpb24oYSl7aWYoYS5zb3VyY2U9PT13aW5kb3cmJmEuZGF0YT09PXVlJiYob2U9ITEsbnVsbCE9PUwpKXtpZihudWxsIT09TCl7dmFyIGI9aGUoKTtpZighKC0xPT09XG5uZXx8bmU+Yikpe2E9LTE7Zm9yKHZhciBjPVtdLGQ9TDtudWxsIT09ZDspe3ZhciBlPWQudGltZW91dFRpbWU7LTEhPT1lJiZlPD1iP2MucHVzaChkKTotMSE9PWUmJigtMT09PWF8fGU8YSkmJihhPWUpO2Q9ZC5uZXh0fWlmKDA8Yy5sZW5ndGgpZm9yKHRlLmRpZFRpbWVvdXQ9ITAsYj0wLGQ9Yy5sZW5ndGg7YjxkO2IrKyl2ZShjW2JdLHRlKTtuZT1hfX1mb3IoYT1oZSgpOzA8cWUtYSYmbnVsbCE9PUw7KWE9TCx0ZS5kaWRUaW1lb3V0PSExLHZlKGEsdGUpLGE9aGUoKTtudWxsPT09THx8cGV8fChwZT0hMCxsZSh3ZSkpfX0sITEpO3ZhciB3ZT1mdW5jdGlvbihhKXtwZT0hMTt2YXIgYj1hLXFlK3NlO2I8c2UmJnJlPHNlPyg4PmImJihiPTgpLHNlPWI8cmU/cmU6Yik6cmU9YjtxZT1hK3NlO29lfHwob2U9ITAsd2luZG93LnBvc3RNZXNzYWdlKHVlLFwiKlwiKSl9O2plPWZ1bmN0aW9uKGEsYil7dmFyIGM9LTE7bnVsbCE9YiYmXCJudW1iZXJcIj09PXR5cGVvZiBiLnRpbWVvdXQmJihjPWhlKCkrXG5iLnRpbWVvdXQpO2lmKC0xPT09bmV8fC0xIT09YyYmYzxuZSluZT1jO2E9e3NjaGVkdWxlZENhbGxiYWNrOmEsdGltZW91dFRpbWU6YyxwcmV2Om51bGwsbmV4dDpudWxsfTtudWxsPT09TD9MPWE6KGI9YS5wcmV2PW1lLG51bGwhPT1iJiYoYi5uZXh0PWEpKTttZT1hO3BlfHwocGU9ITAsbGUod2UpKTtyZXR1cm4gYX07a2U9ZnVuY3Rpb24oYSl7aWYobnVsbCE9PWEucHJldnx8TD09PWEpe3ZhciBiPWEubmV4dCxjPWEucHJldjthLm5leHQ9bnVsbDthLnByZXY9bnVsbDtudWxsIT09Yj9udWxsIT09Yz8oYy5uZXh0PWIsYi5wcmV2PWMpOihiLnByZXY9bnVsbCxMPWIpOm51bGwhPT1jPyhjLm5leHQ9bnVsbCxtZT1jKTptZT1MPW51bGx9fX1lbHNle3ZhciB4ZT1uZXcgTWFwO2plPWZ1bmN0aW9uKGEpe3ZhciBiPXtzY2hlZHVsZWRDYWxsYmFjazphLHRpbWVvdXRUaW1lOjAsbmV4dDpudWxsLHByZXY6bnVsbH0sYz1mZShmdW5jdGlvbigpe2Eoe3RpbWVSZW1haW5pbmc6ZnVuY3Rpb24oKXtyZXR1cm4gSW5maW5pdHl9LFxuZGlkVGltZW91dDohMX0pfSk7eGUuc2V0KGEsYyk7cmV0dXJuIGJ9O2tlPWZ1bmN0aW9uKGEpe3ZhciBiPXhlLmdldChhLnNjaGVkdWxlZENhbGxiYWNrKTt4ZS5kZWxldGUoYSk7Z2UoYil9fWZ1bmN0aW9uIHllKGEpe3ZhciBiPVwiXCI7YmEuQ2hpbGRyZW4uZm9yRWFjaChhLGZ1bmN0aW9uKGEpe251bGw9PWF8fFwic3RyaW5nXCIhPT10eXBlb2YgYSYmXCJudW1iZXJcIiE9PXR5cGVvZiBhfHwoYis9YSl9KTtyZXR1cm4gYn1mdW5jdGlvbiB6ZShhLGIpe2E9cCh7Y2hpbGRyZW46dm9pZCAwfSxiKTtpZihiPXllKGIuY2hpbGRyZW4pKWEuY2hpbGRyZW49YjtyZXR1cm4gYX1cbmZ1bmN0aW9uIEFlKGEsYixjLGQpe2E9YS5vcHRpb25zO2lmKGIpe2I9e307Zm9yKHZhciBlPTA7ZTxjLmxlbmd0aDtlKyspYltcIiRcIitjW2VdXT0hMDtmb3IoYz0wO2M8YS5sZW5ndGg7YysrKWU9Yi5oYXNPd25Qcm9wZXJ0eShcIiRcIithW2NdLnZhbHVlKSxhW2NdLnNlbGVjdGVkIT09ZSYmKGFbY10uc2VsZWN0ZWQ9ZSksZSYmZCYmKGFbY10uZGVmYXVsdFNlbGVjdGVkPSEwKX1lbHNle2M9XCJcIitjO2I9bnVsbDtmb3IoZT0wO2U8YS5sZW5ndGg7ZSsrKXtpZihhW2VdLnZhbHVlPT09Yyl7YVtlXS5zZWxlY3RlZD0hMDtkJiYoYVtlXS5kZWZhdWx0U2VsZWN0ZWQ9ITApO3JldHVybn1udWxsIT09Ynx8YVtlXS5kaXNhYmxlZHx8KGI9YVtlXSl9bnVsbCE9PWImJihiLnNlbGVjdGVkPSEwKX19XG5mdW5jdGlvbiBCZShhLGIpe3ZhciBjPWIudmFsdWU7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsVmFsdWU6bnVsbCE9Yz9jOmIuZGVmYXVsdFZhbHVlLHdhc011bHRpcGxlOiEhYi5tdWx0aXBsZX19ZnVuY3Rpb24gQ2UoYSxiKXtudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MP0EoXCI5MVwiKTp2b2lkIDA7cmV0dXJuIHAoe30sYix7dmFsdWU6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsY2hpbGRyZW46XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlfSl9ZnVuY3Rpb24gRGUoYSxiKXt2YXIgYz1iLnZhbHVlO251bGw9PWMmJihjPWIuZGVmYXVsdFZhbHVlLGI9Yi5jaGlsZHJlbixudWxsIT1iJiYobnVsbCE9Yz9BKFwiOTJcIik6dm9pZCAwLEFycmF5LmlzQXJyYXkoYikmJigxPj1iLmxlbmd0aD92b2lkIDA6QShcIjkzXCIpLGI9YlswXSksYz1cIlwiK2IpLG51bGw9PWMmJihjPVwiXCIpKTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxWYWx1ZTpcIlwiK2N9fVxuZnVuY3Rpb24gRWUoYSxiKXt2YXIgYz1iLnZhbHVlO251bGwhPWMmJihjPVwiXCIrYyxjIT09YS52YWx1ZSYmKGEudmFsdWU9YyksbnVsbD09Yi5kZWZhdWx0VmFsdWUmJihhLmRlZmF1bHRWYWx1ZT1jKSk7bnVsbCE9Yi5kZWZhdWx0VmFsdWUmJihhLmRlZmF1bHRWYWx1ZT1iLmRlZmF1bHRWYWx1ZSl9ZnVuY3Rpb24gRmUoYSl7dmFyIGI9YS50ZXh0Q29udGVudDtiPT09YS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZSYmKGEudmFsdWU9Yil9dmFyIEdlPXtodG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiLG1hdGhtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIixzdmc6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wifTtcbmZ1bmN0aW9uIEhlKGEpe3N3aXRjaChhKXtjYXNlIFwic3ZnXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiO2Nhc2UgXCJtYXRoXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCI7ZGVmYXVsdDpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIn19ZnVuY3Rpb24gSWUoYSxiKXtyZXR1cm4gbnVsbD09YXx8XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hP0hlKGIpOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj09PWEmJlwiZm9yZWlnbk9iamVjdFwiPT09Yj9cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIjphfVxudmFyIEplPXZvaWQgMCxLZT1mdW5jdGlvbihhKXtyZXR1cm5cInVuZGVmaW5lZFwiIT09dHlwZW9mIE1TQXBwJiZNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbj9mdW5jdGlvbihiLGMsZCxlKXtNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbihmdW5jdGlvbigpe3JldHVybiBhKGIsYyxkLGUpfSl9OmF9KGZ1bmN0aW9uKGEsYil7aWYoYS5uYW1lc3BhY2VVUkkhPT1HZS5zdmd8fFwiaW5uZXJIVE1MXCJpbiBhKWEuaW5uZXJIVE1MPWI7ZWxzZXtKZT1KZXx8ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtKZS5pbm5lckhUTUw9XCI8c3ZnPlwiK2IrXCI8L3N2Zz5cIjtmb3IoYj1KZS5maXJzdENoaWxkO2EuZmlyc3RDaGlsZDspYS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpO2Zvcig7Yi5maXJzdENoaWxkOylhLmFwcGVuZENoaWxkKGIuZmlyc3RDaGlsZCl9fSk7XG5mdW5jdGlvbiBMZShhLGIpe2lmKGIpe3ZhciBjPWEuZmlyc3RDaGlsZDtpZihjJiZjPT09YS5sYXN0Q2hpbGQmJjM9PT1jLm5vZGVUeXBlKXtjLm5vZGVWYWx1ZT1iO3JldHVybn19YS50ZXh0Q29udGVudD1ifVxudmFyIE1lPXthbmltYXRpb25JdGVyYXRpb25Db3VudDohMCxib3JkZXJJbWFnZU91dHNldDohMCxib3JkZXJJbWFnZVNsaWNlOiEwLGJvcmRlckltYWdlV2lkdGg6ITAsYm94RmxleDohMCxib3hGbGV4R3JvdXA6ITAsYm94T3JkaW5hbEdyb3VwOiEwLGNvbHVtbkNvdW50OiEwLGNvbHVtbnM6ITAsZmxleDohMCxmbGV4R3JvdzohMCxmbGV4UG9zaXRpdmU6ITAsZmxleFNocmluazohMCxmbGV4TmVnYXRpdmU6ITAsZmxleE9yZGVyOiEwLGdyaWRSb3c6ITAsZ3JpZFJvd0VuZDohMCxncmlkUm93U3BhbjohMCxncmlkUm93U3RhcnQ6ITAsZ3JpZENvbHVtbjohMCxncmlkQ29sdW1uRW5kOiEwLGdyaWRDb2x1bW5TcGFuOiEwLGdyaWRDb2x1bW5TdGFydDohMCxmb250V2VpZ2h0OiEwLGxpbmVDbGFtcDohMCxsaW5lSGVpZ2h0OiEwLG9wYWNpdHk6ITAsb3JkZXI6ITAsb3JwaGFuczohMCx0YWJTaXplOiEwLHdpZG93czohMCx6SW5kZXg6ITAsem9vbTohMCxmaWxsT3BhY2l0eTohMCxmbG9vZE9wYWNpdHk6ITAsXG5zdG9wT3BhY2l0eTohMCxzdHJva2VEYXNoYXJyYXk6ITAsc3Ryb2tlRGFzaG9mZnNldDohMCxzdHJva2VNaXRlcmxpbWl0OiEwLHN0cm9rZU9wYWNpdHk6ITAsc3Ryb2tlV2lkdGg6ITB9LE5lPVtcIldlYmtpdFwiLFwibXNcIixcIk1velwiLFwiT1wiXTtPYmplY3Qua2V5cyhNZSkuZm9yRWFjaChmdW5jdGlvbihhKXtOZS5mb3JFYWNoKGZ1bmN0aW9uKGIpe2I9YithLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Euc3Vic3RyaW5nKDEpO01lW2JdPU1lW2FdfSl9KTtcbmZ1bmN0aW9uIE9lKGEsYil7YT1hLnN0eWxlO2Zvcih2YXIgYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPTA9PT1jLmluZGV4T2YoXCItLVwiKTt2YXIgZT1jO3ZhciBmPWJbY107ZT1udWxsPT1mfHxcImJvb2xlYW5cIj09PXR5cGVvZiBmfHxcIlwiPT09Zj9cIlwiOmR8fFwibnVtYmVyXCIhPT10eXBlb2YgZnx8MD09PWZ8fE1lLmhhc093blByb3BlcnR5KGUpJiZNZVtlXT8oXCJcIitmKS50cmltKCk6ZitcInB4XCI7XCJmbG9hdFwiPT09YyYmKGM9XCJjc3NGbG9hdFwiKTtkP2Euc2V0UHJvcGVydHkoYyxlKTphW2NdPWV9fXZhciBQZT1wKHttZW51aXRlbTohMH0se2FyZWE6ITAsYmFzZTohMCxicjohMCxjb2w6ITAsZW1iZWQ6ITAsaHI6ITAsaW1nOiEwLGlucHV0OiEwLGtleWdlbjohMCxsaW5rOiEwLG1ldGE6ITAscGFyYW06ITAsc291cmNlOiEwLHRyYWNrOiEwLHdicjohMH0pO1xuZnVuY3Rpb24gUWUoYSxiLGMpe2ImJihQZVthXSYmKG51bGwhPWIuY2hpbGRyZW58fG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw/QShcIjEzN1wiLGEsYygpKTp2b2lkIDApLG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJihudWxsIT1iLmNoaWxkcmVuP0EoXCI2MFwiKTp2b2lkIDAsXCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZcIl9faHRtbFwiaW4gYi5kYW5nZXJvdXNseVNldElubmVySFRNTD92b2lkIDA6QShcIjYxXCIpKSxudWxsIT1iLnN0eWxlJiZcIm9iamVjdFwiIT09dHlwZW9mIGIuc3R5bGU/QShcIjYyXCIsYygpKTp2b2lkIDApfVxuZnVuY3Rpb24gUmUoYSxiKXtpZigtMT09PWEuaW5kZXhPZihcIi1cIikpcmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBiLmlzO3N3aXRjaChhKXtjYXNlIFwiYW5ub3RhdGlvbi14bWxcIjpjYXNlIFwiY29sb3ItcHJvZmlsZVwiOmNhc2UgXCJmb250LWZhY2VcIjpjYXNlIFwiZm9udC1mYWNlLXNyY1wiOmNhc2UgXCJmb250LWZhY2UtdXJpXCI6Y2FzZSBcImZvbnQtZmFjZS1mb3JtYXRcIjpjYXNlIFwiZm9udC1mYWNlLW5hbWVcIjpjYXNlIFwibWlzc2luZy1nbHlwaFwiOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITB9fXZhciBTZT12LnRoYXRSZXR1cm5zKFwiXCIpO1xuZnVuY3Rpb24gVGUoYSxiKXthPTk9PT1hLm5vZGVUeXBlfHwxMT09PWEubm9kZVR5cGU/YTphLm93bmVyRG9jdW1lbnQ7dmFyIGM9U2QoYSk7Yj1zYVtiXTtmb3IodmFyIGQ9MDtkPGIubGVuZ3RoO2QrKyl7dmFyIGU9YltkXTtpZighYy5oYXNPd25Qcm9wZXJ0eShlKXx8IWNbZV0pe3N3aXRjaChlKXtjYXNlIFwic2Nyb2xsXCI6TmQoXCJzY3JvbGxcIixhKTticmVhaztjYXNlIFwiZm9jdXNcIjpjYXNlIFwiYmx1clwiOk5kKFwiZm9jdXNcIixhKTtOZChcImJsdXJcIixhKTtjLmJsdXI9ITA7Yy5mb2N1cz0hMDticmVhaztjYXNlIFwiY2FuY2VsXCI6Y2FzZSBcImNsb3NlXCI6JGIoZSwhMCkmJk5kKGUsYSk7YnJlYWs7Y2FzZSBcImludmFsaWRcIjpjYXNlIFwic3VibWl0XCI6Y2FzZSBcInJlc2V0XCI6YnJlYWs7ZGVmYXVsdDotMT09PWpiLmluZGV4T2YoZSkmJksoZSxhKX1jW2VdPSEwfX19XG5mdW5jdGlvbiBVZShhLGIsYyxkKXtjPTk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50O2Q9PT1HZS5odG1sJiYoZD1IZShhKSk7ZD09PUdlLmh0bWw/XCJzY3JpcHRcIj09PWE/KGE9Yy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGEuaW5uZXJIVE1MPVwiPHNjcmlwdD5cXHgzYy9zY3JpcHQ+XCIsYT1hLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCkpOmE9XCJzdHJpbmdcIj09PXR5cGVvZiBiLmlzP2MuY3JlYXRlRWxlbWVudChhLHtpczpiLmlzfSk6Yy5jcmVhdGVFbGVtZW50KGEpOmE9Yy5jcmVhdGVFbGVtZW50TlMoZCxhKTtyZXR1cm4gYX1mdW5jdGlvbiBWZShhLGIpe3JldHVybig5PT09Yi5ub2RlVHlwZT9iOmIub3duZXJEb2N1bWVudCkuY3JlYXRlVGV4dE5vZGUoYSl9XG5mdW5jdGlvbiBXZShhLGIsYyxkKXt2YXIgZT1SZShiLGMpO3N3aXRjaChiKXtjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOksoXCJsb2FkXCIsYSk7dmFyIGY9YzticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoZj0wO2Y8amIubGVuZ3RoO2YrKylLKGpiW2ZdLGEpO2Y9YzticmVhaztjYXNlIFwic291cmNlXCI6SyhcImVycm9yXCIsYSk7Zj1jO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOksoXCJlcnJvclwiLGEpO0soXCJsb2FkXCIsYSk7Zj1jO2JyZWFrO2Nhc2UgXCJmb3JtXCI6SyhcInJlc2V0XCIsYSk7SyhcInN1Ym1pdFwiLGEpO2Y9YzticmVhaztjYXNlIFwiZGV0YWlsc1wiOksoXCJ0b2dnbGVcIixhKTtmPWM7YnJlYWs7Y2FzZSBcImlucHV0XCI6SWMoYSxjKTtmPUhjKGEsYyk7SyhcImludmFsaWRcIixhKTtUZShkLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmY9emUoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6QmUoYSxjKTtmPXAoe30sYyx7dmFsdWU6dm9pZCAwfSk7XG5LKFwiaW52YWxpZFwiLGEpO1RlKGQsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpEZShhLGMpO2Y9Q2UoYSxjKTtLKFwiaW52YWxpZFwiLGEpO1RlKGQsXCJvbkNoYW5nZVwiKTticmVhaztkZWZhdWx0OmY9Y31RZShiLGYsU2UpO3ZhciBnPWYsaDtmb3IoaCBpbiBnKWlmKGcuaGFzT3duUHJvcGVydHkoaCkpe3ZhciBrPWdbaF07XCJzdHlsZVwiPT09aD9PZShhLGssU2UpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWg/KGs9az9rLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmS2UoYSxrKSk6XCJjaGlsZHJlblwiPT09aD9cInN0cmluZ1wiPT09dHlwZW9mIGs/KFwidGV4dGFyZWFcIiE9PWJ8fFwiXCIhPT1rKSYmTGUoYSxrKTpcIm51bWJlclwiPT09dHlwZW9mIGsmJkxlKGEsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09aCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWgmJlwiYXV0b0ZvY3VzXCIhPT1oJiYocmEuaGFzT3duUHJvcGVydHkoaCk/bnVsbCE9ayYmVGUoZCxcbmgpOm51bGwhPWsmJkdjKGEsaCxrLGUpKX1zd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6Y2MoYSk7TmMoYSxjLCExKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpjYyhhKTtGZShhLGMpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpudWxsIT1jLnZhbHVlJiZhLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsYy52YWx1ZSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEubXVsdGlwbGU9ISFjLm11bHRpcGxlO2I9Yy52YWx1ZTtudWxsIT1iP0FlKGEsISFjLm11bHRpcGxlLGIsITEpOm51bGwhPWMuZGVmYXVsdFZhbHVlJiZBZShhLCEhYy5tdWx0aXBsZSxjLmRlZmF1bHRWYWx1ZSwhMCk7YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5vbkNsaWNrJiYoYS5vbmNsaWNrPXYpfX1cbmZ1bmN0aW9uIFhlKGEsYixjLGQsZSl7dmFyIGY9bnVsbDtzd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6Yz1IYyhhLGMpO2Q9SGMoYSxkKTtmPVtdO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpjPXplKGEsYyk7ZD16ZShhLGQpO2Y9W107YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmM9cCh7fSxjLHt2YWx1ZTp2b2lkIDB9KTtkPXAoe30sZCx7dmFsdWU6dm9pZCAwfSk7Zj1bXTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpjPUNlKGEsYyk7ZD1DZShhLGQpO2Y9W107YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCIhPT10eXBlb2YgYy5vbkNsaWNrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5vbkNsaWNrJiYoYS5vbmNsaWNrPXYpfVFlKGIsZCxTZSk7Yj1hPXZvaWQgMDt2YXIgZz1udWxsO2ZvcihhIGluIGMpaWYoIWQuaGFzT3duUHJvcGVydHkoYSkmJmMuaGFzT3duUHJvcGVydHkoYSkmJm51bGwhPWNbYV0paWYoXCJzdHlsZVwiPT09YSl7dmFyIGg9Y1thXTtmb3IoYiBpbiBoKWguaGFzT3duUHJvcGVydHkoYikmJihnfHxcbihnPXt9KSxnW2JdPVwiXCIpfWVsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCIhPT1hJiZcImNoaWxkcmVuXCIhPT1hJiZcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09YSYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWEmJlwiYXV0b0ZvY3VzXCIhPT1hJiYocmEuaGFzT3duUHJvcGVydHkoYSk/Znx8KGY9W10pOihmPWZ8fFtdKS5wdXNoKGEsbnVsbCkpO2ZvcihhIGluIGQpe3ZhciBrPWRbYV07aD1udWxsIT1jP2NbYV06dm9pZCAwO2lmKGQuaGFzT3duUHJvcGVydHkoYSkmJmshPT1oJiYobnVsbCE9a3x8bnVsbCE9aCkpaWYoXCJzdHlsZVwiPT09YSlpZihoKXtmb3IoYiBpbiBoKSFoLmhhc093blByb3BlcnR5KGIpfHxrJiZrLmhhc093blByb3BlcnR5KGIpfHwoZ3x8KGc9e30pLGdbYl09XCJcIik7Zm9yKGIgaW4gaylrLmhhc093blByb3BlcnR5KGIpJiZoW2JdIT09a1tiXSYmKGd8fChnPXt9KSxnW2JdPWtbYl0pfWVsc2UgZ3x8KGZ8fChmPVtdKSxmLnB1c2goYSxnKSksXG5nPWs7ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWE/KGs9az9rLl9faHRtbDp2b2lkIDAsaD1oP2guX19odG1sOnZvaWQgMCxudWxsIT1rJiZoIT09ayYmKGY9Znx8W10pLnB1c2goYSxcIlwiK2spKTpcImNoaWxkcmVuXCI9PT1hP2g9PT1rfHxcInN0cmluZ1wiIT09dHlwZW9mIGsmJlwibnVtYmVyXCIhPT10eXBlb2Yga3x8KGY9Znx8W10pLnB1c2goYSxcIlwiK2spOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1hJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09YSYmKHJhLmhhc093blByb3BlcnR5KGEpPyhudWxsIT1rJiZUZShlLGEpLGZ8fGg9PT1rfHwoZj1bXSkpOihmPWZ8fFtdKS5wdXNoKGEsaykpfWcmJihmPWZ8fFtdKS5wdXNoKFwic3R5bGVcIixnKTtyZXR1cm4gZn1cbmZ1bmN0aW9uIFllKGEsYixjLGQsZSl7XCJpbnB1dFwiPT09YyYmXCJyYWRpb1wiPT09ZS50eXBlJiZudWxsIT1lLm5hbWUmJktjKGEsZSk7UmUoYyxkKTtkPVJlKGMsZSk7Zm9yKHZhciBmPTA7ZjxiLmxlbmd0aDtmKz0yKXt2YXIgZz1iW2ZdLGg9YltmKzFdO1wic3R5bGVcIj09PWc/T2UoYSxoLFNlKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1nP0tlKGEsaCk6XCJjaGlsZHJlblwiPT09Zz9MZShhLGgpOkdjKGEsZyxoLGQpfXN3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpMYyhhLGUpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOkVlKGEsZSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU9dm9pZCAwLGI9YS5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlLGEuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZT0hIWUubXVsdGlwbGUsYz1lLnZhbHVlLG51bGwhPWM/QWUoYSwhIWUubXVsdGlwbGUsYywhMSk6YiE9PSEhZS5tdWx0aXBsZSYmKG51bGwhPWUuZGVmYXVsdFZhbHVlP1xuQWUoYSwhIWUubXVsdGlwbGUsZS5kZWZhdWx0VmFsdWUsITApOkFlKGEsISFlLm11bHRpcGxlLGUubXVsdGlwbGU/W106XCJcIiwhMSkpfX1cbmZ1bmN0aW9uIFplKGEsYixjLGQsZSl7c3dpdGNoKGIpe2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6SyhcImxvYWRcIixhKTticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoZD0wO2Q8amIubGVuZ3RoO2QrKylLKGpiW2RdLGEpO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpLKFwiZXJyb3JcIixhKTticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpLKFwiZXJyb3JcIixhKTtLKFwibG9hZFwiLGEpO2JyZWFrO2Nhc2UgXCJmb3JtXCI6SyhcInJlc2V0XCIsYSk7SyhcInN1Ym1pdFwiLGEpO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6SyhcInRvZ2dsZVwiLGEpO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOkljKGEsYyk7SyhcImludmFsaWRcIixhKTtUZShlLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOkJlKGEsYyk7SyhcImludmFsaWRcIixhKTtUZShlLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6RGUoYSxjKSxLKFwiaW52YWxpZFwiLGEpLFRlKGUsXCJvbkNoYW5nZVwiKX1RZShiLFxuYyxTZSk7ZD1udWxsO2Zvcih2YXIgZiBpbiBjKWlmKGMuaGFzT3duUHJvcGVydHkoZikpe3ZhciBnPWNbZl07XCJjaGlsZHJlblwiPT09Zj9cInN0cmluZ1wiPT09dHlwZW9mIGc/YS50ZXh0Q29udGVudCE9PWcmJihkPVtcImNoaWxkcmVuXCIsZ10pOlwibnVtYmVyXCI9PT10eXBlb2YgZyYmYS50ZXh0Q29udGVudCE9PVwiXCIrZyYmKGQ9W1wiY2hpbGRyZW5cIixcIlwiK2ddKTpyYS5oYXNPd25Qcm9wZXJ0eShmKSYmbnVsbCE9ZyYmVGUoZSxmKX1zd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6Y2MoYSk7TmMoYSxjLCEwKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpjYyhhKTtGZShhLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpjYXNlIFwib3B0aW9uXCI6YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5vbkNsaWNrJiYoYS5vbmNsaWNrPXYpfXJldHVybiBkfWZ1bmN0aW9uICRlKGEsYil7cmV0dXJuIGEubm9kZVZhbHVlIT09Yn1cbnZhciBhZj17Y3JlYXRlRWxlbWVudDpVZSxjcmVhdGVUZXh0Tm9kZTpWZSxzZXRJbml0aWFsUHJvcGVydGllczpXZSxkaWZmUHJvcGVydGllczpYZSx1cGRhdGVQcm9wZXJ0aWVzOlllLGRpZmZIeWRyYXRlZFByb3BlcnRpZXM6WmUsZGlmZkh5ZHJhdGVkVGV4dDokZSx3YXJuRm9yVW5tYXRjaGVkVGV4dDpmdW5jdGlvbigpe30sd2FybkZvckRlbGV0ZWRIeWRyYXRhYmxlRWxlbWVudDpmdW5jdGlvbigpe30sd2FybkZvckRlbGV0ZWRIeWRyYXRhYmxlVGV4dDpmdW5jdGlvbigpe30sd2FybkZvckluc2VydGVkSHlkcmF0ZWRFbGVtZW50OmZ1bmN0aW9uKCl7fSx3YXJuRm9ySW5zZXJ0ZWRIeWRyYXRlZFRleHQ6ZnVuY3Rpb24oKXt9LHJlc3RvcmVDb250cm9sbGVkU3RhdGU6ZnVuY3Rpb24oYSxiLGMpe3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpMYyhhLGMpO2I9Yy5uYW1lO2lmKFwicmFkaW9cIj09PWMudHlwZSYmbnVsbCE9Yil7Zm9yKGM9YTtjLnBhcmVudE5vZGU7KWM9Yy5wYXJlbnROb2RlO1xuYz1jLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFtuYW1lPVwiK0pTT04uc3RyaW5naWZ5KFwiXCIrYikrJ11bdHlwZT1cInJhZGlvXCJdJyk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKyl7dmFyIGQ9Y1tiXTtpZihkIT09YSYmZC5mb3JtPT09YS5mb3JtKXt2YXIgZT1QYShkKTtlP3ZvaWQgMDpBKFwiOTBcIik7ZGMoZCk7TGMoZCxlKX19fWJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOkVlKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmI9Yy52YWx1ZSxudWxsIT1iJiZBZShhLCEhYy5tdWx0aXBsZSxiLCExKX19fSxiZj1udWxsLGNmPW51bGw7ZnVuY3Rpb24gZGYoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImJ1dHRvblwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwidGV4dGFyZWFcIjpyZXR1cm4hIWIuYXV0b0ZvY3VzfXJldHVybiExfVxuZnVuY3Rpb24gZWYoYSxiKXtyZXR1cm5cInRleHRhcmVhXCI9PT1hfHxcInN0cmluZ1wiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwibnVtYmVyXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT09Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmXCJzdHJpbmdcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbH12YXIgZmY9aGUsZ2Y9amUsaGY9a2U7ZnVuY3Rpb24gamYoYSl7Zm9yKGE9YS5uZXh0U2libGluZzthJiYxIT09YS5ub2RlVHlwZSYmMyE9PWEubm9kZVR5cGU7KWE9YS5uZXh0U2libGluZztyZXR1cm4gYX1mdW5jdGlvbiBrZihhKXtmb3IoYT1hLmZpcnN0Q2hpbGQ7YSYmMSE9PWEubm9kZVR5cGUmJjMhPT1hLm5vZGVUeXBlOylhPWEubmV4dFNpYmxpbmc7cmV0dXJuIGF9bmV3IFNldDt2YXIgbGY9W10sbWY9LTE7ZnVuY3Rpb24gbmYoYSl7cmV0dXJue2N1cnJlbnQ6YX19XG5mdW5jdGlvbiBNKGEpezA+bWZ8fChhLmN1cnJlbnQ9bGZbbWZdLGxmW21mXT1udWxsLG1mLS0pfWZ1bmN0aW9uIE4oYSxiKXttZisrO2xmW21mXT1hLmN1cnJlbnQ7YS5jdXJyZW50PWJ9dmFyIG9mPW5mKGhhKSxPPW5mKCExKSxwZj1oYTtmdW5jdGlvbiBxZihhKXtyZXR1cm4gcmYoYSk/cGY6b2YuY3VycmVudH1cbmZ1bmN0aW9uIHNmKGEsYil7dmFyIGM9YS50eXBlLmNvbnRleHRUeXBlcztpZighYylyZXR1cm4gaGE7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoZCYmZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PT09YilyZXR1cm4gZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dDt2YXIgZT17fSxmO2ZvcihmIGluIGMpZVtmXT1iW2ZdO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1iLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9ZSk7cmV0dXJuIGV9ZnVuY3Rpb24gcmYoYSl7cmV0dXJuIDI9PT1hLnRhZyYmbnVsbCE9YS50eXBlLmNoaWxkQ29udGV4dFR5cGVzfWZ1bmN0aW9uIHRmKGEpe3JmKGEpJiYoTShPLGEpLE0ob2YsYSkpfWZ1bmN0aW9uIHVmKGEpe00oTyxhKTtNKG9mLGEpfVxuZnVuY3Rpb24gdmYoYSxiLGMpe29mLmN1cnJlbnQhPT1oYT9BKFwiMTY4XCIpOnZvaWQgMDtOKG9mLGIsYSk7TihPLGMsYSl9ZnVuY3Rpb24gd2YoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZSxkPWEudHlwZS5jaGlsZENvbnRleHRUeXBlcztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgYy5nZXRDaGlsZENvbnRleHQpcmV0dXJuIGI7Yz1jLmdldENoaWxkQ29udGV4dCgpO2Zvcih2YXIgZSBpbiBjKWUgaW4gZD92b2lkIDA6QShcIjEwOFwiLHVjKGEpfHxcIlVua25vd25cIixlKTtyZXR1cm4gcCh7fSxiLGMpfWZ1bmN0aW9uIHhmKGEpe2lmKCFyZihhKSlyZXR1cm4hMTt2YXIgYj1hLnN0YXRlTm9kZTtiPWImJmIuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHR8fGhhO3BmPW9mLmN1cnJlbnQ7TihvZixiLGEpO04oTyxPLmN1cnJlbnQsYSk7cmV0dXJuITB9XG5mdW5jdGlvbiB5ZihhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO2M/dm9pZCAwOkEoXCIxNjlcIik7aWYoYil7dmFyIGQ9d2YoYSxwZik7Yy5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dD1kO00oTyxhKTtNKG9mLGEpO04ob2YsZCxhKX1lbHNlIE0oTyxhKTtOKE8sYixhKX1cbmZ1bmN0aW9uIHpmKGEsYixjLGQpe3RoaXMudGFnPWE7dGhpcy5rZXk9Yzt0aGlzLnNpYmxpbmc9dGhpcy5jaGlsZD10aGlzLnJldHVybj10aGlzLnN0YXRlTm9kZT10aGlzLnR5cGU9bnVsbDt0aGlzLmluZGV4PTA7dGhpcy5yZWY9bnVsbDt0aGlzLnBlbmRpbmdQcm9wcz1iO3RoaXMubWVtb2l6ZWRTdGF0ZT10aGlzLnVwZGF0ZVF1ZXVlPXRoaXMubWVtb2l6ZWRQcm9wcz1udWxsO3RoaXMubW9kZT1kO3RoaXMuZWZmZWN0VGFnPTA7dGhpcy5sYXN0RWZmZWN0PXRoaXMuZmlyc3RFZmZlY3Q9dGhpcy5uZXh0RWZmZWN0PW51bGw7dGhpcy5leHBpcmF0aW9uVGltZT0wO3RoaXMuYWx0ZXJuYXRlPW51bGx9XG5mdW5jdGlvbiBBZihhLGIsYyl7dmFyIGQ9YS5hbHRlcm5hdGU7bnVsbD09PWQ/KGQ9bmV3IHpmKGEudGFnLGIsYS5rZXksYS5tb2RlKSxkLnR5cGU9YS50eXBlLGQuc3RhdGVOb2RlPWEuc3RhdGVOb2RlLGQuYWx0ZXJuYXRlPWEsYS5hbHRlcm5hdGU9ZCk6KGQucGVuZGluZ1Byb3BzPWIsZC5lZmZlY3RUYWc9MCxkLm5leHRFZmZlY3Q9bnVsbCxkLmZpcnN0RWZmZWN0PW51bGwsZC5sYXN0RWZmZWN0PW51bGwpO2QuZXhwaXJhdGlvblRpbWU9YztkLmNoaWxkPWEuY2hpbGQ7ZC5tZW1vaXplZFByb3BzPWEubWVtb2l6ZWRQcm9wcztkLm1lbW9pemVkU3RhdGU9YS5tZW1vaXplZFN0YXRlO2QudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZTtkLnNpYmxpbmc9YS5zaWJsaW5nO2QuaW5kZXg9YS5pbmRleDtkLnJlZj1hLnJlZjtyZXR1cm4gZH1cbmZ1bmN0aW9uIEJmKGEsYixjKXt2YXIgZD1hLnR5cGUsZT1hLmtleTthPWEucHJvcHM7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpdmFyIGY9ZC5wcm90b3R5cGUmJmQucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ/MjowO2Vsc2UgaWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkKWY9NTtlbHNlIHN3aXRjaChkKXtjYXNlIGljOnJldHVybiBDZihhLmNoaWxkcmVuLGIsYyxlKTtjYXNlIHBjOmY9MTE7Ynw9MzticmVhaztjYXNlIGpjOmY9MTE7Ynw9MjticmVhaztjYXNlIGtjOnJldHVybiBkPW5ldyB6ZigxNSxhLGUsYnw0KSxkLnR5cGU9a2MsZC5leHBpcmF0aW9uVGltZT1jLGQ7Y2FzZSByYzpmPTE2O2J8PTI7YnJlYWs7ZGVmYXVsdDphOntzd2l0Y2goXCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZD9kLiQkdHlwZW9mOm51bGwpe2Nhc2UgbGM6Zj0xMzticmVhayBhO2Nhc2UgbWM6Zj0xMjticmVhayBhO2Nhc2UgcWM6Zj0xNDticmVhayBhO2RlZmF1bHQ6QShcIjEzMFwiLG51bGw9PWQ/XG5kOnR5cGVvZiBkLFwiXCIpfWY9dm9pZCAwfX1iPW5ldyB6ZihmLGEsZSxiKTtiLnR5cGU9ZDtiLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGJ9ZnVuY3Rpb24gQ2YoYSxiLGMsZCl7YT1uZXcgemYoMTAsYSxkLGIpO2EuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYX1mdW5jdGlvbiBEZihhLGIsYyl7YT1uZXcgemYoNixhLG51bGwsYik7YS5leHBpcmF0aW9uVGltZT1jO3JldHVybiBhfWZ1bmN0aW9uIEVmKGEsYixjKXtiPW5ldyB6Zig0LG51bGwhPT1hLmNoaWxkcmVuP2EuY2hpbGRyZW46W10sYS5rZXksYik7Yi5leHBpcmF0aW9uVGltZT1jO2Iuc3RhdGVOb2RlPXtjb250YWluZXJJbmZvOmEuY29udGFpbmVySW5mbyxwZW5kaW5nQ2hpbGRyZW46bnVsbCxpbXBsZW1lbnRhdGlvbjphLmltcGxlbWVudGF0aW9ufTtyZXR1cm4gYn1cbmZ1bmN0aW9uIEZmKGEsYixjKXtiPW5ldyB6ZigzLG51bGwsbnVsbCxiPzM6MCk7YT17Y3VycmVudDpiLGNvbnRhaW5lckluZm86YSxwZW5kaW5nQ2hpbGRyZW46bnVsbCxlYXJsaWVzdFBlbmRpbmdUaW1lOjAsbGF0ZXN0UGVuZGluZ1RpbWU6MCxlYXJsaWVzdFN1c3BlbmRlZFRpbWU6MCxsYXRlc3RTdXNwZW5kZWRUaW1lOjAsbGF0ZXN0UGluZ2VkVGltZTowLHBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZTowLGZpbmlzaGVkV29yazpudWxsLGNvbnRleHQ6bnVsbCxwZW5kaW5nQ29udGV4dDpudWxsLGh5ZHJhdGU6YyxyZW1haW5pbmdFeHBpcmF0aW9uVGltZTowLGZpcnN0QmF0Y2g6bnVsbCxuZXh0U2NoZWR1bGVkUm9vdDpudWxsfTtyZXR1cm4gYi5zdGF0ZU5vZGU9YX12YXIgR2Y9bnVsbCxIZj1udWxsO2Z1bmN0aW9uIElmKGEpe3JldHVybiBmdW5jdGlvbihiKXt0cnl7cmV0dXJuIGEoYil9Y2F0Y2goYyl7fX19XG5mdW5jdGlvbiBKZihhKXtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXylyZXR1cm4hMTt2YXIgYj1fX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX187aWYoYi5pc0Rpc2FibGVkfHwhYi5zdXBwb3J0c0ZpYmVyKXJldHVybiEwO3RyeXt2YXIgYz1iLmluamVjdChhKTtHZj1JZihmdW5jdGlvbihhKXtyZXR1cm4gYi5vbkNvbW1pdEZpYmVyUm9vdChjLGEpfSk7SGY9SWYoZnVuY3Rpb24oYSl7cmV0dXJuIGIub25Db21taXRGaWJlclVubW91bnQoYyxhKX0pfWNhdGNoKGQpe31yZXR1cm4hMH1mdW5jdGlvbiBLZihhKXtcImZ1bmN0aW9uXCI9PT10eXBlb2YgR2YmJkdmKGEpfWZ1bmN0aW9uIExmKGEpe1wiZnVuY3Rpb25cIj09PXR5cGVvZiBIZiYmSGYoYSl9dmFyIE1mPSExO1xuZnVuY3Rpb24gTmYoYSl7cmV0dXJue2V4cGlyYXRpb25UaW1lOjAsYmFzZVN0YXRlOmEsZmlyc3RVcGRhdGU6bnVsbCxsYXN0VXBkYXRlOm51bGwsZmlyc3RDYXB0dXJlZFVwZGF0ZTpudWxsLGxhc3RDYXB0dXJlZFVwZGF0ZTpudWxsLGZpcnN0RWZmZWN0Om51bGwsbGFzdEVmZmVjdDpudWxsLGZpcnN0Q2FwdHVyZWRFZmZlY3Q6bnVsbCxsYXN0Q2FwdHVyZWRFZmZlY3Q6bnVsbH19ZnVuY3Rpb24gT2YoYSl7cmV0dXJue2V4cGlyYXRpb25UaW1lOmEuZXhwaXJhdGlvblRpbWUsYmFzZVN0YXRlOmEuYmFzZVN0YXRlLGZpcnN0VXBkYXRlOmEuZmlyc3RVcGRhdGUsbGFzdFVwZGF0ZTphLmxhc3RVcGRhdGUsZmlyc3RDYXB0dXJlZFVwZGF0ZTpudWxsLGxhc3RDYXB0dXJlZFVwZGF0ZTpudWxsLGZpcnN0RWZmZWN0Om51bGwsbGFzdEVmZmVjdDpudWxsLGZpcnN0Q2FwdHVyZWRFZmZlY3Q6bnVsbCxsYXN0Q2FwdHVyZWRFZmZlY3Q6bnVsbH19XG5mdW5jdGlvbiBQZihhKXtyZXR1cm57ZXhwaXJhdGlvblRpbWU6YSx0YWc6MCxwYXlsb2FkOm51bGwsY2FsbGJhY2s6bnVsbCxuZXh0Om51bGwsbmV4dEVmZmVjdDpudWxsfX1mdW5jdGlvbiBRZihhLGIsYyl7bnVsbD09PWEubGFzdFVwZGF0ZT9hLmZpcnN0VXBkYXRlPWEubGFzdFVwZGF0ZT1iOihhLmxhc3RVcGRhdGUubmV4dD1iLGEubGFzdFVwZGF0ZT1iKTtpZigwPT09YS5leHBpcmF0aW9uVGltZXx8YS5leHBpcmF0aW9uVGltZT5jKWEuZXhwaXJhdGlvblRpbWU9Y31cbmZ1bmN0aW9uIFJmKGEsYixjKXt2YXIgZD1hLmFsdGVybmF0ZTtpZihudWxsPT09ZCl7dmFyIGU9YS51cGRhdGVRdWV1ZTt2YXIgZj1udWxsO251bGw9PT1lJiYoZT1hLnVwZGF0ZVF1ZXVlPU5mKGEubWVtb2l6ZWRTdGF0ZSkpfWVsc2UgZT1hLnVwZGF0ZVF1ZXVlLGY9ZC51cGRhdGVRdWV1ZSxudWxsPT09ZT9udWxsPT09Zj8oZT1hLnVwZGF0ZVF1ZXVlPU5mKGEubWVtb2l6ZWRTdGF0ZSksZj1kLnVwZGF0ZVF1ZXVlPU5mKGQubWVtb2l6ZWRTdGF0ZSkpOmU9YS51cGRhdGVRdWV1ZT1PZihmKTpudWxsPT09ZiYmKGY9ZC51cGRhdGVRdWV1ZT1PZihlKSk7bnVsbD09PWZ8fGU9PT1mP1FmKGUsYixjKTpudWxsPT09ZS5sYXN0VXBkYXRlfHxudWxsPT09Zi5sYXN0VXBkYXRlPyhRZihlLGIsYyksUWYoZixiLGMpKTooUWYoZSxiLGMpLGYubGFzdFVwZGF0ZT1iKX1cbmZ1bmN0aW9uIFNmKGEsYixjKXt2YXIgZD1hLnVwZGF0ZVF1ZXVlO2Q9bnVsbD09PWQ/YS51cGRhdGVRdWV1ZT1OZihhLm1lbW9pemVkU3RhdGUpOlRmKGEsZCk7bnVsbD09PWQubGFzdENhcHR1cmVkVXBkYXRlP2QuZmlyc3RDYXB0dXJlZFVwZGF0ZT1kLmxhc3RDYXB0dXJlZFVwZGF0ZT1iOihkLmxhc3RDYXB0dXJlZFVwZGF0ZS5uZXh0PWIsZC5sYXN0Q2FwdHVyZWRVcGRhdGU9Yik7aWYoMD09PWQuZXhwaXJhdGlvblRpbWV8fGQuZXhwaXJhdGlvblRpbWU+YylkLmV4cGlyYXRpb25UaW1lPWN9ZnVuY3Rpb24gVGYoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmYj09PWMudXBkYXRlUXVldWUmJihiPWEudXBkYXRlUXVldWU9T2YoYikpO3JldHVybiBifVxuZnVuY3Rpb24gVWYoYSxiLGMsZCxlLGYpe3N3aXRjaChjLnRhZyl7Y2FzZSAxOnJldHVybiBhPWMucGF5bG9hZCxcImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hLmNhbGwoZixkLGUpOmE7Y2FzZSAzOmEuZWZmZWN0VGFnPWEuZWZmZWN0VGFnJi0xMDI1fDY0O2Nhc2UgMDphPWMucGF5bG9hZDtlPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2EuY2FsbChmLGQsZSk6YTtpZihudWxsPT09ZXx8dm9pZCAwPT09ZSlicmVhaztyZXR1cm4gcCh7fSxkLGUpO2Nhc2UgMjpNZj0hMH1yZXR1cm4gZH1cbmZ1bmN0aW9uIFZmKGEsYixjLGQsZSl7TWY9ITE7aWYoISgwPT09Yi5leHBpcmF0aW9uVGltZXx8Yi5leHBpcmF0aW9uVGltZT5lKSl7Yj1UZihhLGIpO2Zvcih2YXIgZj1iLmJhc2VTdGF0ZSxnPW51bGwsaD0wLGs9Yi5maXJzdFVwZGF0ZSxuPWY7bnVsbCE9PWs7KXt2YXIgcj1rLmV4cGlyYXRpb25UaW1lO2lmKHI+ZSl7aWYobnVsbD09PWcmJihnPWssZj1uKSwwPT09aHx8aD5yKWg9cn1lbHNlIG49VWYoYSxiLGssbixjLGQpLG51bGwhPT1rLmNhbGxiYWNrJiYoYS5lZmZlY3RUYWd8PTMyLGsubmV4dEVmZmVjdD1udWxsLG51bGw9PT1iLmxhc3RFZmZlY3Q/Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9azooYi5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9ayxiLmxhc3RFZmZlY3Q9aykpO2s9ay5uZXh0fXI9bnVsbDtmb3Ioaz1iLmZpcnN0Q2FwdHVyZWRVcGRhdGU7bnVsbCE9PWs7KXt2YXIgdz1rLmV4cGlyYXRpb25UaW1lO2lmKHc+ZSl7aWYobnVsbD09PXImJihyPWssbnVsbD09PVxuZyYmKGY9bikpLDA9PT1ofHxoPncpaD13fWVsc2Ugbj1VZihhLGIsayxuLGMsZCksbnVsbCE9PWsuY2FsbGJhY2smJihhLmVmZmVjdFRhZ3w9MzIsay5uZXh0RWZmZWN0PW51bGwsbnVsbD09PWIubGFzdENhcHR1cmVkRWZmZWN0P2IuZmlyc3RDYXB0dXJlZEVmZmVjdD1iLmxhc3RDYXB0dXJlZEVmZmVjdD1rOihiLmxhc3RDYXB0dXJlZEVmZmVjdC5uZXh0RWZmZWN0PWssYi5sYXN0Q2FwdHVyZWRFZmZlY3Q9aykpO2s9ay5uZXh0fW51bGw9PT1nJiYoYi5sYXN0VXBkYXRlPW51bGwpO251bGw9PT1yP2IubGFzdENhcHR1cmVkVXBkYXRlPW51bGw6YS5lZmZlY3RUYWd8PTMyO251bGw9PT1nJiZudWxsPT09ciYmKGY9bik7Yi5iYXNlU3RhdGU9ZjtiLmZpcnN0VXBkYXRlPWc7Yi5maXJzdENhcHR1cmVkVXBkYXRlPXI7Yi5leHBpcmF0aW9uVGltZT1oO2EubWVtb2l6ZWRTdGF0ZT1ufX1cbmZ1bmN0aW9uIFdmKGEsYil7XCJmdW5jdGlvblwiIT09dHlwZW9mIGE/QShcIjE5MVwiLGEpOnZvaWQgMDthLmNhbGwoYil9XG5mdW5jdGlvbiBYZihhLGIsYyl7bnVsbCE9PWIuZmlyc3RDYXB0dXJlZFVwZGF0ZSYmKG51bGwhPT1iLmxhc3RVcGRhdGUmJihiLmxhc3RVcGRhdGUubmV4dD1iLmZpcnN0Q2FwdHVyZWRVcGRhdGUsYi5sYXN0VXBkYXRlPWIubGFzdENhcHR1cmVkVXBkYXRlKSxiLmZpcnN0Q2FwdHVyZWRVcGRhdGU9Yi5sYXN0Q2FwdHVyZWRVcGRhdGU9bnVsbCk7YT1iLmZpcnN0RWZmZWN0O2ZvcihiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1udWxsO251bGwhPT1hOyl7dmFyIGQ9YS5jYWxsYmFjaztudWxsIT09ZCYmKGEuY2FsbGJhY2s9bnVsbCxXZihkLGMpKTthPWEubmV4dEVmZmVjdH1hPWIuZmlyc3RDYXB0dXJlZEVmZmVjdDtmb3IoYi5maXJzdENhcHR1cmVkRWZmZWN0PWIubGFzdENhcHR1cmVkRWZmZWN0PW51bGw7bnVsbCE9PWE7KWI9YS5jYWxsYmFjayxudWxsIT09YiYmKGEuY2FsbGJhY2s9bnVsbCxXZihiLGMpKSxhPWEubmV4dEVmZmVjdH1cbmZ1bmN0aW9uIFlmKGEsYil7cmV0dXJue3ZhbHVlOmEsc291cmNlOmIsc3RhY2s6dmMoYil9fXZhciBaZj1uZihudWxsKSwkZj1uZihudWxsKSxhZz1uZigwKTtmdW5jdGlvbiBiZyhhKXt2YXIgYj1hLnR5cGUuX2NvbnRleHQ7TihhZyxiLl9jaGFuZ2VkQml0cyxhKTtOKCRmLGIuX2N1cnJlbnRWYWx1ZSxhKTtOKFpmLGEsYSk7Yi5fY3VycmVudFZhbHVlPWEucGVuZGluZ1Byb3BzLnZhbHVlO2IuX2NoYW5nZWRCaXRzPWEuc3RhdGVOb2RlfWZ1bmN0aW9uIGNnKGEpe3ZhciBiPWFnLmN1cnJlbnQsYz0kZi5jdXJyZW50O00oWmYsYSk7TSgkZixhKTtNKGFnLGEpO2E9YS50eXBlLl9jb250ZXh0O2EuX2N1cnJlbnRWYWx1ZT1jO2EuX2NoYW5nZWRCaXRzPWJ9dmFyIGRnPXt9LGVnPW5mKGRnKSxmZz1uZihkZyksZ2c9bmYoZGcpO2Z1bmN0aW9uIGhnKGEpe2E9PT1kZz9BKFwiMTc0XCIpOnZvaWQgMDtyZXR1cm4gYX1cbmZ1bmN0aW9uIGpnKGEsYil7TihnZyxiLGEpO04oZmcsYSxhKTtOKGVnLGRnLGEpO3ZhciBjPWIubm9kZVR5cGU7c3dpdGNoKGMpe2Nhc2UgOTpjYXNlIDExOmI9KGI9Yi5kb2N1bWVudEVsZW1lbnQpP2IubmFtZXNwYWNlVVJJOkllKG51bGwsXCJcIik7YnJlYWs7ZGVmYXVsdDpjPTg9PT1jP2IucGFyZW50Tm9kZTpiLGI9Yy5uYW1lc3BhY2VVUkl8fG51bGwsYz1jLnRhZ05hbWUsYj1JZShiLGMpfU0oZWcsYSk7TihlZyxiLGEpfWZ1bmN0aW9uIGtnKGEpe00oZWcsYSk7TShmZyxhKTtNKGdnLGEpfWZ1bmN0aW9uIGxnKGEpe2ZnLmN1cnJlbnQ9PT1hJiYoTShlZyxhKSxNKGZnLGEpKX1mdW5jdGlvbiBtZyhhLGIsYyl7dmFyIGQ9YS5tZW1vaXplZFN0YXRlO2I9YihjLGQpO2Q9bnVsbD09PWJ8fHZvaWQgMD09PWI/ZDpwKHt9LGQsYik7YS5tZW1vaXplZFN0YXRlPWQ7YT1hLnVwZGF0ZVF1ZXVlO251bGwhPT1hJiYwPT09YS5leHBpcmF0aW9uVGltZSYmKGEuYmFzZVN0YXRlPWQpfVxudmFyIHFnPXtpc01vdW50ZWQ6ZnVuY3Rpb24oYSl7cmV0dXJuKGE9YS5fcmVhY3RJbnRlcm5hbEZpYmVyKT8yPT09a2QoYSk6ITF9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGQ9bmcoKTtkPW9nKGQsYSk7dmFyIGU9UGYoZCk7ZS5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihlLmNhbGxiYWNrPWMpO1JmKGEsZSxkKTtwZyhhLGQpfSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgZD1uZygpO2Q9b2coZCxhKTt2YXIgZT1QZihkKTtlLnRhZz0xO2UucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZS5jYWxsYmFjaz1jKTtSZihhLGUsZCk7cGcoYSxkKX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKGEsYil7YT1hLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGM9bmcoKTtjPW9nKGMsYSk7dmFyIGQ9UGYoYyk7ZC50YWc9Mjt2b2lkIDAhPT1cbmImJm51bGwhPT1iJiYoZC5jYWxsYmFjaz1iKTtSZihhLGQsYyk7cGcoYSxjKX19O2Z1bmN0aW9uIHJnKGEsYixjLGQsZSxmKXt2YXIgZz1hLnN0YXRlTm9kZTthPWEudHlwZTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5zaG91bGRDb21wb25lbnRVcGRhdGU/Zy5zaG91bGRDb21wb25lbnRVcGRhdGUoYyxlLGYpOmEucHJvdG90eXBlJiZhLnByb3RvdHlwZS5pc1B1cmVSZWFjdENvbXBvbmVudD8hZWEoYixjKXx8IWVhKGQsZSk6ITB9XG5mdW5jdGlvbiBzZyhhLGIsYyxkKXthPWIuc3RhdGU7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtiLnN0YXRlIT09YSYmcWcuZW5xdWV1ZVJlcGxhY2VTdGF0ZShiLGIuc3RhdGUsbnVsbCl9XG5mdW5jdGlvbiB0ZyhhLGIpe3ZhciBjPWEudHlwZSxkPWEuc3RhdGVOb2RlLGU9YS5wZW5kaW5nUHJvcHMsZj1xZihhKTtkLnByb3BzPWU7ZC5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7ZC5yZWZzPWhhO2QuY29udGV4dD1zZihhLGYpO2Y9YS51cGRhdGVRdWV1ZTtudWxsIT09ZiYmKFZmKGEsZixlLGQsYiksZC5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO2Y9YS50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZiYmKG1nKGEsZixlKSxkLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGQuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGQuY29tcG9uZW50V2lsbE1vdW50fHwoYz1kLnN0YXRlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudFdpbGxNb3VudCYmXG5kLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmQuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpLGMhPT1kLnN0YXRlJiZxZy5lbnF1ZXVlUmVwbGFjZVN0YXRlKGQsZC5zdGF0ZSxudWxsKSxmPWEudXBkYXRlUXVldWUsbnVsbCE9PWYmJihWZihhLGYsZSxkLGIpLGQuc3RhdGU9YS5tZW1vaXplZFN0YXRlKSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkTW91bnQmJihhLmVmZmVjdFRhZ3w9NCl9dmFyIHVnPUFycmF5LmlzQXJyYXk7XG5mdW5jdGlvbiB2ZyhhLGIsYyl7YT1jLnJlZjtpZihudWxsIT09YSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJlwib2JqZWN0XCIhPT10eXBlb2YgYSl7aWYoYy5fb3duZXIpe2M9Yy5fb3duZXI7dmFyIGQ9dm9pZCAwO2MmJigyIT09Yy50YWc/QShcIjExMFwiKTp2b2lkIDAsZD1jLnN0YXRlTm9kZSk7ZD92b2lkIDA6QShcIjE0N1wiLGEpO3ZhciBlPVwiXCIrYTtpZihudWxsIT09YiYmbnVsbCE9PWIucmVmJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5yZWYmJmIucmVmLl9zdHJpbmdSZWY9PT1lKXJldHVybiBiLnJlZjtiPWZ1bmN0aW9uKGEpe3ZhciBiPWQucmVmcz09PWhhP2QucmVmcz17fTpkLnJlZnM7bnVsbD09PWE/ZGVsZXRlIGJbZV06YltlXT1hfTtiLl9zdHJpbmdSZWY9ZTtyZXR1cm4gYn1cInN0cmluZ1wiIT09dHlwZW9mIGE/QShcIjE0OFwiKTp2b2lkIDA7Yy5fb3duZXI/dm9pZCAwOkEoXCIyNTRcIixhKX1yZXR1cm4gYX1cbmZ1bmN0aW9uIHdnKGEsYil7XCJ0ZXh0YXJlYVwiIT09YS50eXBlJiZBKFwiMzFcIixcIltvYmplY3QgT2JqZWN0XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGIpP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYikuam9pbihcIiwgXCIpK1wifVwiOmIsXCJcIil9XG5mdW5jdGlvbiB4ZyhhKXtmdW5jdGlvbiBiKGIsYyl7aWYoYSl7dmFyIGQ9Yi5sYXN0RWZmZWN0O251bGwhPT1kPyhkLm5leHRFZmZlY3Q9YyxiLmxhc3RFZmZlY3Q9Yyk6Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9YztjLm5leHRFZmZlY3Q9bnVsbDtjLmVmZmVjdFRhZz04fX1mdW5jdGlvbiBjKGMsZCl7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKDtudWxsIT09ZDspYihjLGQpLGQ9ZC5zaWJsaW5nO3JldHVybiBudWxsfWZ1bmN0aW9uIGQoYSxiKXtmb3IoYT1uZXcgTWFwO251bGwhPT1iOyludWxsIT09Yi5rZXk/YS5zZXQoYi5rZXksYik6YS5zZXQoYi5pbmRleCxiKSxiPWIuc2libGluZztyZXR1cm4gYX1mdW5jdGlvbiBlKGEsYixjKXthPUFmKGEsYixjKTthLmluZGV4PTA7YS5zaWJsaW5nPW51bGw7cmV0dXJuIGF9ZnVuY3Rpb24gZihiLGMsZCl7Yi5pbmRleD1kO2lmKCFhKXJldHVybiBjO2Q9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWQpcmV0dXJuIGQ9ZC5pbmRleCxkPGM/KGIuZWZmZWN0VGFnPVxuMixjKTpkO2IuZWZmZWN0VGFnPTI7cmV0dXJuIGN9ZnVuY3Rpb24gZyhiKXthJiZudWxsPT09Yi5hbHRlcm5hdGUmJihiLmVmZmVjdFRhZz0yKTtyZXR1cm4gYn1mdW5jdGlvbiBoKGEsYixjLGQpe2lmKG51bGw9PT1ifHw2IT09Yi50YWcpcmV0dXJuIGI9RGYoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMsZCk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBrKGEsYixjLGQpe2lmKG51bGwhPT1iJiZiLnR5cGU9PT1jLnR5cGUpcmV0dXJuIGQ9ZShiLGMucHJvcHMsZCksZC5yZWY9dmcoYSxiLGMpLGQucmV0dXJuPWEsZDtkPUJmKGMsYS5tb2RlLGQpO2QucmVmPXZnKGEsYixjKTtkLnJldHVybj1hO3JldHVybiBkfWZ1bmN0aW9uIG4oYSxiLGMsZCl7aWYobnVsbD09PWJ8fDQhPT1iLnRhZ3x8Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyE9PWMuY29udGFpbmVySW5mb3x8Yi5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb24hPT1jLmltcGxlbWVudGF0aW9uKXJldHVybiBiPVxuRWYoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMuY2hpbGRyZW58fFtdLGQpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gcihhLGIsYyxkLGYpe2lmKG51bGw9PT1ifHwxMCE9PWIudGFnKXJldHVybiBiPUNmKGMsYS5tb2RlLGQsZiksYi5yZXR1cm49YSxiO2I9ZShiLGMsZCk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiB3KGEsYixjKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGJ8fFwibnVtYmVyXCI9PT10eXBlb2YgYilyZXR1cm4gYj1EZihcIlwiK2IsYS5tb2RlLGMpLGIucmV0dXJuPWEsYjtpZihcIm9iamVjdFwiPT09dHlwZW9mIGImJm51bGwhPT1iKXtzd2l0Y2goYi4kJHR5cGVvZil7Y2FzZSBnYzpyZXR1cm4gYz1CZihiLGEubW9kZSxjKSxjLnJlZj12ZyhhLG51bGwsYiksYy5yZXR1cm49YSxjO2Nhc2UgaGM6cmV0dXJuIGI9RWYoYixhLm1vZGUsYyksYi5yZXR1cm49YSxifWlmKHVnKGIpfHx0YyhiKSlyZXR1cm4gYj1DZihiLGEubW9kZSxjLG51bGwpLGIucmV0dXJuPVxuYSxiO3dnKGEsYil9cmV0dXJuIG51bGx9ZnVuY3Rpb24gUChhLGIsYyxkKXt2YXIgZT1udWxsIT09Yj9iLmtleTpudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgY3x8XCJudW1iZXJcIj09PXR5cGVvZiBjKXJldHVybiBudWxsIT09ZT9udWxsOmgoYSxiLFwiXCIrYyxkKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jKXtzd2l0Y2goYy4kJHR5cGVvZil7Y2FzZSBnYzpyZXR1cm4gYy5rZXk9PT1lP2MudHlwZT09PWljP3IoYSxiLGMucHJvcHMuY2hpbGRyZW4sZCxlKTprKGEsYixjLGQpOm51bGw7Y2FzZSBoYzpyZXR1cm4gYy5rZXk9PT1lP24oYSxiLGMsZCk6bnVsbH1pZih1ZyhjKXx8dGMoYykpcmV0dXJuIG51bGwhPT1lP251bGw6cihhLGIsYyxkLG51bGwpO3dnKGEsYyl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gbmMoYSxiLGMsZCxlKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGR8fFwibnVtYmVyXCI9PT10eXBlb2YgZClyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxoKGIsYSxcIlwiK2QsZSk7XG5pZihcIm9iamVjdFwiPT09dHlwZW9mIGQmJm51bGwhPT1kKXtzd2l0Y2goZC4kJHR5cGVvZil7Y2FzZSBnYzpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsZC50eXBlPT09aWM/cihiLGEsZC5wcm9wcy5jaGlsZHJlbixlLGQua2V5KTprKGIsYSxkLGUpO2Nhc2UgaGM6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLG4oYixhLGQsZSl9aWYodWcoZCl8fHRjKGQpKXJldHVybiBhPWEuZ2V0KGMpfHxudWxsLHIoYixhLGQsZSxudWxsKTt3ZyhiLGQpfXJldHVybiBudWxsfWZ1bmN0aW9uIEpkKGUsZyxoLGspe2Zvcih2YXIgdT1udWxsLHg9bnVsbCx0PWcscT1nPTAsbj1udWxsO251bGwhPT10JiZxPGgubGVuZ3RoO3ErKyl7dC5pbmRleD5xPyhuPXQsdD1udWxsKTpuPXQuc2libGluZzt2YXIgbD1QKGUsdCxoW3FdLGspO2lmKG51bGw9PT1sKXtudWxsPT09dCYmKHQ9bik7YnJlYWt9YSYmdCYmbnVsbD09PWwuYWx0ZXJuYXRlJiZiKGUsXG50KTtnPWYobCxnLHEpO251bGw9PT14P3U9bDp4LnNpYmxpbmc9bDt4PWw7dD1ufWlmKHE9PT1oLmxlbmd0aClyZXR1cm4gYyhlLHQpLHU7aWYobnVsbD09PXQpe2Zvcig7cTxoLmxlbmd0aDtxKyspaWYodD13KGUsaFtxXSxrKSlnPWYodCxnLHEpLG51bGw9PT14P3U9dDp4LnNpYmxpbmc9dCx4PXQ7cmV0dXJuIHV9Zm9yKHQ9ZChlLHQpO3E8aC5sZW5ndGg7cSsrKWlmKG49bmModCxlLHEsaFtxXSxrKSlhJiZudWxsIT09bi5hbHRlcm5hdGUmJnQuZGVsZXRlKG51bGw9PT1uLmtleT9xOm4ua2V5KSxnPWYobixnLHEpLG51bGw9PT14P3U9bjp4LnNpYmxpbmc9bix4PW47YSYmdC5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4gdX1mdW5jdGlvbiBFKGUsZyxoLGspe3ZhciB1PXRjKGgpO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiB1P0EoXCIxNTBcIik6dm9pZCAwO2g9dS5jYWxsKGgpO251bGw9PWg/QShcIjE1MVwiKTp2b2lkIDA7Zm9yKHZhciB0PXU9bnVsbCxuPWcseD1cbmc9MCx5PW51bGwsbD1oLm5leHQoKTtudWxsIT09biYmIWwuZG9uZTt4KyssbD1oLm5leHQoKSl7bi5pbmRleD54Pyh5PW4sbj1udWxsKTp5PW4uc2libGluZzt2YXIgcj1QKGUsbixsLnZhbHVlLGspO2lmKG51bGw9PT1yKXtufHwobj15KTticmVha31hJiZuJiZudWxsPT09ci5hbHRlcm5hdGUmJmIoZSxuKTtnPWYocixnLHgpO251bGw9PT10P3U9cjp0LnNpYmxpbmc9cjt0PXI7bj15fWlmKGwuZG9uZSlyZXR1cm4gYyhlLG4pLHU7aWYobnVsbD09PW4pe2Zvcig7IWwuZG9uZTt4KyssbD1oLm5leHQoKSlsPXcoZSxsLnZhbHVlLGspLG51bGwhPT1sJiYoZz1mKGwsZyx4KSxudWxsPT09dD91PWw6dC5zaWJsaW5nPWwsdD1sKTtyZXR1cm4gdX1mb3Iobj1kKGUsbik7IWwuZG9uZTt4KyssbD1oLm5leHQoKSlsPW5jKG4sZSx4LGwudmFsdWUsayksbnVsbCE9PWwmJihhJiZudWxsIT09bC5hbHRlcm5hdGUmJm4uZGVsZXRlKG51bGw9PT1sLmtleT94Omwua2V5KSxnPWYobCxnLHgpLG51bGw9PT1cbnQ/dT1sOnQuc2libGluZz1sLHQ9bCk7YSYmbi5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4gdX1yZXR1cm4gZnVuY3Rpb24oYSxkLGYsaCl7dmFyIGs9XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZiYmZi50eXBlPT09aWMmJm51bGw9PT1mLmtleTtrJiYoZj1mLnByb3BzLmNoaWxkcmVuKTt2YXIgbj1cIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mO2lmKG4pc3dpdGNoKGYuJCR0eXBlb2Ype2Nhc2UgZ2M6YTp7bj1mLmtleTtmb3Ioaz1kO251bGwhPT1rOyl7aWYoay5rZXk9PT1uKWlmKDEwPT09ay50YWc/Zi50eXBlPT09aWM6ay50eXBlPT09Zi50eXBlKXtjKGEsay5zaWJsaW5nKTtkPWUoayxmLnR5cGU9PT1pYz9mLnByb3BzLmNoaWxkcmVuOmYucHJvcHMsaCk7ZC5yZWY9dmcoYSxrLGYpO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9ZWxzZXtjKGEsayk7YnJlYWt9ZWxzZSBiKGEsayk7az1rLnNpYmxpbmd9Zi50eXBlPT09aWM/KGQ9Q2YoZi5wcm9wcy5jaGlsZHJlbixcbmEubW9kZSxoLGYua2V5KSxkLnJldHVybj1hLGE9ZCk6KGg9QmYoZixhLm1vZGUsaCksaC5yZWY9dmcoYSxkLGYpLGgucmV0dXJuPWEsYT1oKX1yZXR1cm4gZyhhKTtjYXNlIGhjOmE6e2ZvcihrPWYua2V5O251bGwhPT1kOyl7aWYoZC5rZXk9PT1rKWlmKDQ9PT1kLnRhZyYmZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbz09PWYuY29udGFpbmVySW5mbyYmZC5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb249PT1mLmltcGxlbWVudGF0aW9uKXtjKGEsZC5zaWJsaW5nKTtkPWUoZCxmLmNoaWxkcmVufHxbXSxoKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWVsc2V7YyhhLGQpO2JyZWFrfWVsc2UgYihhLGQpO2Q9ZC5zaWJsaW5nfWQ9RWYoZixhLm1vZGUsaCk7ZC5yZXR1cm49YTthPWR9cmV0dXJuIGcoYSl9aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBmfHxcIm51bWJlclwiPT09dHlwZW9mIGYpcmV0dXJuIGY9XCJcIitmLG51bGwhPT1kJiY2PT09ZC50YWc/KGMoYSxkLnNpYmxpbmcpLGQ9ZShkLGYsaCksZC5yZXR1cm49XG5hLGE9ZCk6KGMoYSxkKSxkPURmKGYsYS5tb2RlLGgpLGQucmV0dXJuPWEsYT1kKSxnKGEpO2lmKHVnKGYpKXJldHVybiBKZChhLGQsZixoKTtpZih0YyhmKSlyZXR1cm4gRShhLGQsZixoKTtuJiZ3ZyhhLGYpO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgZiYmIWspc3dpdGNoKGEudGFnKXtjYXNlIDI6Y2FzZSAxOmg9YS50eXBlLEEoXCIxNTJcIixoLmRpc3BsYXlOYW1lfHxoLm5hbWV8fFwiQ29tcG9uZW50XCIpfXJldHVybiBjKGEsZCl9fXZhciB5Zz14ZyghMCksemc9eGcoITEpLEFnPW51bGwsQmc9bnVsbCxDZz0hMTtmdW5jdGlvbiBEZyhhLGIpe3ZhciBjPW5ldyB6Zig1LG51bGwsbnVsbCwwKTtjLnR5cGU9XCJERUxFVEVEXCI7Yy5zdGF0ZU5vZGU9YjtjLnJldHVybj1hO2MuZWZmZWN0VGFnPTg7bnVsbCE9PWEubGFzdEVmZmVjdD8oYS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YyxhLmxhc3RFZmZlY3Q9Yyk6YS5maXJzdEVmZmVjdD1hLmxhc3RFZmZlY3Q9Y31cbmZ1bmN0aW9uIEVnKGEsYil7c3dpdGNoKGEudGFnKXtjYXNlIDU6dmFyIGM9YS50eXBlO2I9MSE9PWIubm9kZVR5cGV8fGMudG9Mb3dlckNhc2UoKSE9PWIubm9kZU5hbWUudG9Mb3dlckNhc2UoKT9udWxsOmI7cmV0dXJuIG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDY6cmV0dXJuIGI9XCJcIj09PWEucGVuZGluZ1Byb3BzfHwzIT09Yi5ub2RlVHlwZT9udWxsOmIsbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIEZnKGEpe2lmKENnKXt2YXIgYj1CZztpZihiKXt2YXIgYz1iO2lmKCFFZyhhLGIpKXtiPWpmKGMpO2lmKCFifHwhRWcoYSxiKSl7YS5lZmZlY3RUYWd8PTI7Q2c9ITE7QWc9YTtyZXR1cm59RGcoQWcsYyl9QWc9YTtCZz1rZihiKX1lbHNlIGEuZWZmZWN0VGFnfD0yLENnPSExLEFnPWF9fVxuZnVuY3Rpb24gR2coYSl7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWEmJjUhPT1hLnRhZyYmMyE9PWEudGFnOylhPWEucmV0dXJuO0FnPWF9ZnVuY3Rpb24gSGcoYSl7aWYoYSE9PUFnKXJldHVybiExO2lmKCFDZylyZXR1cm4gR2coYSksQ2c9ITAsITE7dmFyIGI9YS50eXBlO2lmKDUhPT1hLnRhZ3x8XCJoZWFkXCIhPT1iJiZcImJvZHlcIiE9PWImJiFlZihiLGEubWVtb2l6ZWRQcm9wcykpZm9yKGI9Qmc7YjspRGcoYSxiKSxiPWpmKGIpO0dnKGEpO0JnPUFnP2pmKGEuc3RhdGVOb2RlKTpudWxsO3JldHVybiEwfWZ1bmN0aW9uIElnKCl7Qmc9QWc9bnVsbDtDZz0hMX1mdW5jdGlvbiBRKGEsYixjKXtKZyhhLGIsYyxiLmV4cGlyYXRpb25UaW1lKX1mdW5jdGlvbiBKZyhhLGIsYyxkKXtiLmNoaWxkPW51bGw9PT1hP3pnKGIsbnVsbCxjLGQpOnlnKGIsYS5jaGlsZCxjLGQpfVxuZnVuY3Rpb24gS2coYSxiKXt2YXIgYz1iLnJlZjtpZihudWxsPT09YSYmbnVsbCE9PWN8fG51bGwhPT1hJiZhLnJlZiE9PWMpYi5lZmZlY3RUYWd8PTEyOH1mdW5jdGlvbiBMZyhhLGIsYyxkLGUpe0tnKGEsYik7dmFyIGY9MCE9PShiLmVmZmVjdFRhZyY2NCk7aWYoIWMmJiFmKXJldHVybiBkJiZ5ZihiLCExKSxSKGEsYik7Yz1iLnN0YXRlTm9kZTtlYy5jdXJyZW50PWI7dmFyIGc9Zj9udWxsOmMucmVuZGVyKCk7Yi5lZmZlY3RUYWd8PTE7ZiYmKEpnKGEsYixudWxsLGUpLGIuY2hpbGQ9bnVsbCk7SmcoYSxiLGcsZSk7Yi5tZW1vaXplZFN0YXRlPWMuc3RhdGU7Yi5tZW1vaXplZFByb3BzPWMucHJvcHM7ZCYmeWYoYiwhMCk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBNZyhhKXt2YXIgYj1hLnN0YXRlTm9kZTtiLnBlbmRpbmdDb250ZXh0P3ZmKGEsYi5wZW5kaW5nQ29udGV4dCxiLnBlbmRpbmdDb250ZXh0IT09Yi5jb250ZXh0KTpiLmNvbnRleHQmJnZmKGEsYi5jb250ZXh0LCExKTtqZyhhLGIuY29udGFpbmVySW5mbyl9XG5mdW5jdGlvbiBOZyhhLGIsYyxkKXt2YXIgZT1hLmNoaWxkO251bGwhPT1lJiYoZS5yZXR1cm49YSk7Zm9yKDtudWxsIT09ZTspe3N3aXRjaChlLnRhZyl7Y2FzZSAxMjp2YXIgZj1lLnN0YXRlTm9kZXwwO2lmKGUudHlwZT09PWImJjAhPT0oZiZjKSl7Zm9yKGY9ZTtudWxsIT09Zjspe3ZhciBnPWYuYWx0ZXJuYXRlO2lmKDA9PT1mLmV4cGlyYXRpb25UaW1lfHxmLmV4cGlyYXRpb25UaW1lPmQpZi5leHBpcmF0aW9uVGltZT1kLG51bGwhPT1nJiYoMD09PWcuZXhwaXJhdGlvblRpbWV8fGcuZXhwaXJhdGlvblRpbWU+ZCkmJihnLmV4cGlyYXRpb25UaW1lPWQpO2Vsc2UgaWYobnVsbCE9PWcmJigwPT09Zy5leHBpcmF0aW9uVGltZXx8Zy5leHBpcmF0aW9uVGltZT5kKSlnLmV4cGlyYXRpb25UaW1lPWQ7ZWxzZSBicmVhaztmPWYucmV0dXJufWY9bnVsbH1lbHNlIGY9ZS5jaGlsZDticmVhaztjYXNlIDEzOmY9ZS50eXBlPT09YS50eXBlP251bGw6ZS5jaGlsZDticmVhaztkZWZhdWx0OmY9XG5lLmNoaWxkfWlmKG51bGwhPT1mKWYucmV0dXJuPWU7ZWxzZSBmb3IoZj1lO251bGwhPT1mOyl7aWYoZj09PWEpe2Y9bnVsbDticmVha31lPWYuc2libGluZztpZihudWxsIT09ZSl7ZS5yZXR1cm49Zi5yZXR1cm47Zj1lO2JyZWFrfWY9Zi5yZXR1cm59ZT1mfX1cbmZ1bmN0aW9uIFJnKGEsYixjKXt2YXIgZD1iLnR5cGUuX2NvbnRleHQsZT1iLnBlbmRpbmdQcm9wcyxmPWIubWVtb2l6ZWRQcm9wcyxnPSEwO2lmKE8uY3VycmVudClnPSExO2Vsc2UgaWYoZj09PWUpcmV0dXJuIGIuc3RhdGVOb2RlPTAsYmcoYiksUihhLGIpO3ZhciBoPWUudmFsdWU7Yi5tZW1vaXplZFByb3BzPWU7aWYobnVsbD09PWYpaD0xMDczNzQxODIzO2Vsc2UgaWYoZi52YWx1ZT09PWUudmFsdWUpe2lmKGYuY2hpbGRyZW49PT1lLmNoaWxkcmVuJiZnKXJldHVybiBiLnN0YXRlTm9kZT0wLGJnKGIpLFIoYSxiKTtoPTB9ZWxzZXt2YXIgaz1mLnZhbHVlO2lmKGs9PT1oJiYoMCE9PWt8fDEvaz09PTEvaCl8fGshPT1rJiZoIT09aCl7aWYoZi5jaGlsZHJlbj09PWUuY2hpbGRyZW4mJmcpcmV0dXJuIGIuc3RhdGVOb2RlPTAsYmcoYiksUihhLGIpO2g9MH1lbHNlIGlmKGg9XCJmdW5jdGlvblwiPT09dHlwZW9mIGQuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzP2QuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzKGssXG5oKToxMDczNzQxODIzLGh8PTAsMD09PWgpe2lmKGYuY2hpbGRyZW49PT1lLmNoaWxkcmVuJiZnKXJldHVybiBiLnN0YXRlTm9kZT0wLGJnKGIpLFIoYSxiKX1lbHNlIE5nKGIsZCxoLGMpfWIuc3RhdGVOb2RlPWg7YmcoYik7UShhLGIsZS5jaGlsZHJlbik7cmV0dXJuIGIuY2hpbGR9ZnVuY3Rpb24gUihhLGIpe251bGwhPT1hJiZiLmNoaWxkIT09YS5jaGlsZD9BKFwiMTUzXCIpOnZvaWQgMDtpZihudWxsIT09Yi5jaGlsZCl7YT1iLmNoaWxkO3ZhciBjPUFmKGEsYS5wZW5kaW5nUHJvcHMsYS5leHBpcmF0aW9uVGltZSk7Yi5jaGlsZD1jO2ZvcihjLnJldHVybj1iO251bGwhPT1hLnNpYmxpbmc7KWE9YS5zaWJsaW5nLGM9Yy5zaWJsaW5nPUFmKGEsYS5wZW5kaW5nUHJvcHMsYS5leHBpcmF0aW9uVGltZSksYy5yZXR1cm49YjtjLnNpYmxpbmc9bnVsbH1yZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIFNnKGEsYixjKXtpZigwPT09Yi5leHBpcmF0aW9uVGltZXx8Yi5leHBpcmF0aW9uVGltZT5jKXtzd2l0Y2goYi50YWcpe2Nhc2UgMzpNZyhiKTticmVhaztjYXNlIDI6eGYoYik7YnJlYWs7Y2FzZSA0OmpnKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7YnJlYWs7Y2FzZSAxMzpiZyhiKX1yZXR1cm4gbnVsbH1zd2l0Y2goYi50YWcpe2Nhc2UgMDpudWxsIT09YT9BKFwiMTU1XCIpOnZvaWQgMDt2YXIgZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxmPXFmKGIpO2Y9c2YoYixmKTtkPWQoZSxmKTtiLmVmZmVjdFRhZ3w9MTtcIm9iamVjdFwiPT09dHlwZW9mIGQmJm51bGwhPT1kJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5yZW5kZXImJnZvaWQgMD09PWQuJCR0eXBlb2Y/KGY9Yi50eXBlLGIudGFnPTIsYi5tZW1vaXplZFN0YXRlPW51bGwhPT1kLnN0YXRlJiZ2b2lkIDAhPT1kLnN0YXRlP2Quc3RhdGU6bnVsbCxmPWYuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLFwiZnVuY3Rpb25cIj09PVxudHlwZW9mIGYmJm1nKGIsZixlKSxlPXhmKGIpLGQudXBkYXRlcj1xZyxiLnN0YXRlTm9kZT1kLGQuX3JlYWN0SW50ZXJuYWxGaWJlcj1iLHRnKGIsYyksYT1MZyhhLGIsITAsZSxjKSk6KGIudGFnPTEsUShhLGIsZCksYi5tZW1vaXplZFByb3BzPWUsYT1iLmNoaWxkKTtyZXR1cm4gYTtjYXNlIDE6cmV0dXJuIGU9Yi50eXBlLGM9Yi5wZW5kaW5nUHJvcHMsTy5jdXJyZW50fHxiLm1lbW9pemVkUHJvcHMhPT1jPyhkPXFmKGIpLGQ9c2YoYixkKSxlPWUoYyxkKSxiLmVmZmVjdFRhZ3w9MSxRKGEsYixlKSxiLm1lbW9pemVkUHJvcHM9YyxhPWIuY2hpbGQpOmE9UihhLGIpLGE7Y2FzZSAyOmU9eGYoYik7aWYobnVsbD09PWEpaWYobnVsbD09PWIuc3RhdGVOb2RlKXt2YXIgZz1iLnBlbmRpbmdQcm9wcyxoPWIudHlwZTtkPXFmKGIpO3ZhciBrPTI9PT1iLnRhZyYmbnVsbCE9Yi50eXBlLmNvbnRleHRUeXBlcztmPWs/c2YoYixkKTpoYTtnPW5ldyBoKGcsZik7Yi5tZW1vaXplZFN0YXRlPW51bGwhPT1cbmcuc3RhdGUmJnZvaWQgMCE9PWcuc3RhdGU/Zy5zdGF0ZTpudWxsO2cudXBkYXRlcj1xZztiLnN0YXRlTm9kZT1nO2cuX3JlYWN0SW50ZXJuYWxGaWJlcj1iO2smJihrPWIuc3RhdGVOb2RlLGsuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1kLGsuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9Zik7dGcoYixjKTtkPSEwfWVsc2V7aD1iLnR5cGU7ZD1iLnN0YXRlTm9kZTtrPWIubWVtb2l6ZWRQcm9wcztmPWIucGVuZGluZ1Byb3BzO2QucHJvcHM9azt2YXIgbj1kLmNvbnRleHQ7Zz1xZihiKTtnPXNmKGIsZyk7dmFyIHI9aC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7KGg9XCJmdW5jdGlvblwiPT09dHlwZW9mIHJ8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGQuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fFxuKGshPT1mfHxuIT09ZykmJnNnKGIsZCxmLGcpO01mPSExO3ZhciB3PWIubWVtb2l6ZWRTdGF0ZTtuPWQuc3RhdGU9dzt2YXIgUD1iLnVwZGF0ZVF1ZXVlO251bGwhPT1QJiYoVmYoYixQLGYsZCxjKSxuPWIubWVtb2l6ZWRTdGF0ZSk7ayE9PWZ8fHchPT1ufHxPLmN1cnJlbnR8fE1mPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgciYmKG1nKGIscixmKSxuPWIubWVtb2l6ZWRTdGF0ZSksKGs9TWZ8fHJnKGIsayxmLHcsbixnKSk/KGh8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLmNvbXBvbmVudFdpbGxNb3VudHx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudFdpbGxNb3VudCYmZC5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZkLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkTW91bnQmJlxuKGIuZWZmZWN0VGFnfD00KSk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZE1vdW50JiYoYi5lZmZlY3RUYWd8PTQpLGIubWVtb2l6ZWRQcm9wcz1mLGIubWVtb2l6ZWRTdGF0ZT1uKSxkLnByb3BzPWYsZC5zdGF0ZT1uLGQuY29udGV4dD1nLGQ9ayk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZE1vdW50JiYoYi5lZmZlY3RUYWd8PTQpLGQ9ITEpfWVsc2UgaD1iLnR5cGUsZD1iLnN0YXRlTm9kZSxmPWIubWVtb2l6ZWRQcm9wcyxrPWIucGVuZGluZ1Byb3BzLGQucHJvcHM9ZixuPWQuY29udGV4dCxnPXFmKGIpLGc9c2YoYixnKSxyPWguZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLChoPVwiZnVuY3Rpb25cIj09PXR5cGVvZiByfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSl8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHxcbihmIT09a3x8biE9PWcpJiZzZyhiLGQsayxnKSxNZj0hMSxuPWIubWVtb2l6ZWRTdGF0ZSx3PWQuc3RhdGU9bixQPWIudXBkYXRlUXVldWUsbnVsbCE9PVAmJihWZihiLFAsayxkLGMpLHc9Yi5tZW1vaXplZFN0YXRlKSxmIT09a3x8biE9PXd8fE8uY3VycmVudHx8TWY/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiByJiYobWcoYixyLGspLHc9Yi5tZW1vaXplZFN0YXRlKSwocj1NZnx8cmcoYixmLGssbix3LGcpKT8oaHx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGQuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLmNvbXBvbmVudFdpbGxVcGRhdGV8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnRXaWxsVXBkYXRlJiZkLmNvbXBvbmVudFdpbGxVcGRhdGUoayx3LGcpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZkLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlKGssdyxnKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkVXBkYXRlJiZcbihiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUmJihiLmVmZmVjdFRhZ3w9MjU2KSk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLmNvbXBvbmVudERpZFVwZGF0ZXx8Zj09PWEubWVtb2l6ZWRQcm9wcyYmbj09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8Zj09PWEubWVtb2l6ZWRQcm9wcyYmbj09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD0yNTYpLGIubWVtb2l6ZWRQcm9wcz1rLGIubWVtb2l6ZWRTdGF0ZT13KSxkLnByb3BzPWssZC5zdGF0ZT13LGQuY29udGV4dD1nLGQ9cik6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLmNvbXBvbmVudERpZFVwZGF0ZXx8Zj09PWEubWVtb2l6ZWRQcm9wcyYmbj09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8XG5mPT09YS5tZW1vaXplZFByb3BzJiZuPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTI1NiksZD0hMSk7cmV0dXJuIExnKGEsYixkLGUsYyk7Y2FzZSAzOk1nKGIpO2U9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09ZSlpZihkPWIubWVtb2l6ZWRTdGF0ZSxkPW51bGwhPT1kP2QuZWxlbWVudDpudWxsLFZmKGIsZSxiLnBlbmRpbmdQcm9wcyxudWxsLGMpLGU9Yi5tZW1vaXplZFN0YXRlLmVsZW1lbnQsZT09PWQpSWcoKSxhPVIoYSxiKTtlbHNle2Q9Yi5zdGF0ZU5vZGU7aWYoZD0obnVsbD09PWF8fG51bGw9PT1hLmNoaWxkKSYmZC5oeWRyYXRlKUJnPWtmKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLEFnPWIsZD1DZz0hMDtkPyhiLmVmZmVjdFRhZ3w9MixiLmNoaWxkPXpnKGIsbnVsbCxlLGMpKTooSWcoKSxRKGEsYixlKSk7YT1iLmNoaWxkfWVsc2UgSWcoKSxhPVIoYSxiKTtyZXR1cm4gYTtjYXNlIDU6YTp7aGcoZ2cuY3VycmVudCk7ZT1oZyhlZy5jdXJyZW50KTtkPUllKGUsXG5iLnR5cGUpO2UhPT1kJiYoTihmZyxiLGIpLE4oZWcsZCxiKSk7bnVsbD09PWEmJkZnKGIpO2U9Yi50eXBlO2s9Yi5tZW1vaXplZFByb3BzO2Q9Yi5wZW5kaW5nUHJvcHM7Zj1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6bnVsbDtpZighTy5jdXJyZW50JiZrPT09ZCl7aWYoaz1iLm1vZGUmMSYmISFkLmhpZGRlbiliLmV4cGlyYXRpb25UaW1lPTEwNzM3NDE4MjM7aWYoIWt8fDEwNzM3NDE4MjMhPT1jKXthPVIoYSxiKTticmVhayBhfX1rPWQuY2hpbGRyZW47ZWYoZSxkKT9rPW51bGw6ZiYmZWYoZSxmKSYmKGIuZWZmZWN0VGFnfD0xNik7S2coYSxiKTsxMDczNzQxODIzIT09YyYmYi5tb2RlJjEmJmQuaGlkZGVuPyhiLmV4cGlyYXRpb25UaW1lPTEwNzM3NDE4MjMsYi5tZW1vaXplZFByb3BzPWQsYT1udWxsKTooUShhLGIsayksYi5tZW1vaXplZFByb3BzPWQsYT1iLmNoaWxkKX1yZXR1cm4gYTtjYXNlIDY6cmV0dXJuIG51bGw9PT1hJiZGZyhiKSxiLm1lbW9pemVkUHJvcHM9Yi5wZW5kaW5nUHJvcHMsXG5udWxsO2Nhc2UgMTY6cmV0dXJuIG51bGw7Y2FzZSA0OnJldHVybiBqZyhiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLGU9Yi5wZW5kaW5nUHJvcHMsTy5jdXJyZW50fHxiLm1lbW9pemVkUHJvcHMhPT1lPyhudWxsPT09YT9iLmNoaWxkPXlnKGIsbnVsbCxlLGMpOlEoYSxiLGUpLGIubWVtb2l6ZWRQcm9wcz1lLGE9Yi5jaGlsZCk6YT1SKGEsYiksYTtjYXNlIDE0OnJldHVybiBlPWIudHlwZS5yZW5kZXIsYz1iLnBlbmRpbmdQcm9wcyxkPWIucmVmLE8uY3VycmVudHx8Yi5tZW1vaXplZFByb3BzIT09Y3x8ZCE9PShudWxsIT09YT9hLnJlZjpudWxsKT8oZT1lKGMsZCksUShhLGIsZSksYi5tZW1vaXplZFByb3BzPWMsYT1iLmNoaWxkKTphPVIoYSxiKSxhO2Nhc2UgMTA6cmV0dXJuIGM9Yi5wZW5kaW5nUHJvcHMsTy5jdXJyZW50fHxiLm1lbW9pemVkUHJvcHMhPT1jPyhRKGEsYixjKSxiLm1lbW9pemVkUHJvcHM9YyxhPWIuY2hpbGQpOmE9UihhLGIpLGE7Y2FzZSAxMTpyZXR1cm4gYz1cbmIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLE8uY3VycmVudHx8bnVsbCE9PWMmJmIubWVtb2l6ZWRQcm9wcyE9PWM/KFEoYSxiLGMpLGIubWVtb2l6ZWRQcm9wcz1jLGE9Yi5jaGlsZCk6YT1SKGEsYiksYTtjYXNlIDE1OnJldHVybiBjPWIucGVuZGluZ1Byb3BzLGIubWVtb2l6ZWRQcm9wcz09PWM/YT1SKGEsYik6KFEoYSxiLGMuY2hpbGRyZW4pLGIubWVtb2l6ZWRQcm9wcz1jLGE9Yi5jaGlsZCksYTtjYXNlIDEzOnJldHVybiBSZyhhLGIsYyk7Y2FzZSAxMjphOmlmKGQ9Yi50eXBlLGY9Yi5wZW5kaW5nUHJvcHMsaz1iLm1lbW9pemVkUHJvcHMsZT1kLl9jdXJyZW50VmFsdWUsZz1kLl9jaGFuZ2VkQml0cyxPLmN1cnJlbnR8fDAhPT1nfHxrIT09Zil7Yi5tZW1vaXplZFByb3BzPWY7aD1mLnVuc3RhYmxlX29ic2VydmVkQml0cztpZih2b2lkIDA9PT1ofHxudWxsPT09aCloPTEwNzM3NDE4MjM7Yi5zdGF0ZU5vZGU9aDtpZigwIT09KGcmaCkpTmcoYixkLGcsYyk7ZWxzZSBpZihrPT09Zil7YT1cblIoYSxiKTticmVhayBhfWM9Zi5jaGlsZHJlbjtjPWMoZSk7Yi5lZmZlY3RUYWd8PTE7UShhLGIsYyk7YT1iLmNoaWxkfWVsc2UgYT1SKGEsYik7cmV0dXJuIGE7ZGVmYXVsdDpBKFwiMTU2XCIpfX1mdW5jdGlvbiBUZyhhKXthLmVmZmVjdFRhZ3w9NH12YXIgVWc9dm9pZCAwLFZnPXZvaWQgMCxXZz12b2lkIDA7VWc9ZnVuY3Rpb24oKXt9O1ZnPWZ1bmN0aW9uKGEsYixjKXsoYi51cGRhdGVRdWV1ZT1jKSYmVGcoYil9O1dnPWZ1bmN0aW9uKGEsYixjLGQpe2MhPT1kJiZUZyhiKX07XG5mdW5jdGlvbiBYZyhhLGIpe3ZhciBjPWIucGVuZGluZ1Byb3BzO3N3aXRjaChiLnRhZyl7Y2FzZSAxOnJldHVybiBudWxsO2Nhc2UgMjpyZXR1cm4gdGYoYiksbnVsbDtjYXNlIDM6a2coYik7dWYoYik7dmFyIGQ9Yi5zdGF0ZU5vZGU7ZC5wZW5kaW5nQ29udGV4dCYmKGQuY29udGV4dD1kLnBlbmRpbmdDb250ZXh0LGQucGVuZGluZ0NvbnRleHQ9bnVsbCk7aWYobnVsbD09PWF8fG51bGw9PT1hLmNoaWxkKUhnKGIpLGIuZWZmZWN0VGFnJj0tMztVZyhiKTtyZXR1cm4gbnVsbDtjYXNlIDU6bGcoYik7ZD1oZyhnZy5jdXJyZW50KTt2YXIgZT1iLnR5cGU7aWYobnVsbCE9PWEmJm51bGwhPWIuc3RhdGVOb2RlKXt2YXIgZj1hLm1lbW9pemVkUHJvcHMsZz1iLnN0YXRlTm9kZSxoPWhnKGVnLmN1cnJlbnQpO2c9WGUoZyxlLGYsYyxkKTtWZyhhLGIsZyxlLGYsYyxkLGgpO2EucmVmIT09Yi5yZWYmJihiLmVmZmVjdFRhZ3w9MTI4KX1lbHNle2lmKCFjKXJldHVybiBudWxsPT09Yi5zdGF0ZU5vZGU/XG5BKFwiMTY2XCIpOnZvaWQgMCxudWxsO2E9aGcoZWcuY3VycmVudCk7aWYoSGcoYikpYz1iLnN0YXRlTm9kZSxlPWIudHlwZSxmPWIubWVtb2l6ZWRQcm9wcyxjW0NdPWIsY1tNYV09ZixkPVplKGMsZSxmLGEsZCksYi51cGRhdGVRdWV1ZT1kLG51bGwhPT1kJiZUZyhiKTtlbHNle2E9VWUoZSxjLGQsYSk7YVtDXT1iO2FbTWFdPWM7YTpmb3IoZj1iLmNoaWxkO251bGwhPT1mOyl7aWYoNT09PWYudGFnfHw2PT09Zi50YWcpYS5hcHBlbmRDaGlsZChmLnN0YXRlTm9kZSk7ZWxzZSBpZig0IT09Zi50YWcmJm51bGwhPT1mLmNoaWxkKXtmLmNoaWxkLnJldHVybj1mO2Y9Zi5jaGlsZDtjb250aW51ZX1pZihmPT09YilicmVhaztmb3IoO251bGw9PT1mLnNpYmxpbmc7KXtpZihudWxsPT09Zi5yZXR1cm58fGYucmV0dXJuPT09YilicmVhayBhO2Y9Zi5yZXR1cm59Zi5zaWJsaW5nLnJldHVybj1mLnJldHVybjtmPWYuc2libGluZ31XZShhLGUsYyxkKTtkZihlLGMpJiZUZyhiKTtiLnN0YXRlTm9kZT1cbmF9bnVsbCE9PWIucmVmJiYoYi5lZmZlY3RUYWd8PTEyOCl9cmV0dXJuIG51bGw7Y2FzZSA2OmlmKGEmJm51bGwhPWIuc3RhdGVOb2RlKVdnKGEsYixhLm1lbW9pemVkUHJvcHMsYyk7ZWxzZXtpZihcInN0cmluZ1wiIT09dHlwZW9mIGMpcmV0dXJuIG51bGw9PT1iLnN0YXRlTm9kZT9BKFwiMTY2XCIpOnZvaWQgMCxudWxsO2Q9aGcoZ2cuY3VycmVudCk7aGcoZWcuY3VycmVudCk7SGcoYik/KGQ9Yi5zdGF0ZU5vZGUsYz1iLm1lbW9pemVkUHJvcHMsZFtDXT1iLCRlKGQsYykmJlRnKGIpKTooZD1WZShjLGQpLGRbQ109YixiLnN0YXRlTm9kZT1kKX1yZXR1cm4gbnVsbDtjYXNlIDE0OnJldHVybiBudWxsO2Nhc2UgMTY6cmV0dXJuIG51bGw7Y2FzZSAxMDpyZXR1cm4gbnVsbDtjYXNlIDExOnJldHVybiBudWxsO2Nhc2UgMTU6cmV0dXJuIG51bGw7Y2FzZSA0OnJldHVybiBrZyhiKSxVZyhiKSxudWxsO2Nhc2UgMTM6cmV0dXJuIGNnKGIpLG51bGw7Y2FzZSAxMjpyZXR1cm4gbnVsbDtjYXNlIDA6QShcIjE2N1wiKTtcbmRlZmF1bHQ6QShcIjE1NlwiKX19ZnVuY3Rpb24gWWcoYSxiKXt2YXIgYz1iLnNvdXJjZTtudWxsPT09Yi5zdGFjayYmbnVsbCE9PWMmJnZjKGMpO251bGwhPT1jJiZ1YyhjKTtiPWIudmFsdWU7bnVsbCE9PWEmJjI9PT1hLnRhZyYmdWMoYSk7dHJ5e2ImJmIuc3VwcHJlc3NSZWFjdEVycm9yTG9nZ2luZ3x8Y29uc29sZS5lcnJvcihiKX1jYXRjaChkKXtkJiZkLnN1cHByZXNzUmVhY3RFcnJvckxvZ2dpbmd8fGNvbnNvbGUuZXJyb3IoZCl9fWZ1bmN0aW9uIFpnKGEpe3ZhciBiPWEucmVmO2lmKG51bGwhPT1iKWlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXRyeXtiKG51bGwpfWNhdGNoKGMpeyRnKGEsYyl9ZWxzZSBiLmN1cnJlbnQ9bnVsbH1cbmZ1bmN0aW9uIGFoKGEpe1wiZnVuY3Rpb25cIj09PXR5cGVvZiBMZiYmTGYoYSk7c3dpdGNoKGEudGFnKXtjYXNlIDI6WmcoYSk7dmFyIGI9YS5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIuY29tcG9uZW50V2lsbFVubW91bnQpdHJ5e2IucHJvcHM9YS5tZW1vaXplZFByb3BzLGIuc3RhdGU9YS5tZW1vaXplZFN0YXRlLGIuY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaChjKXskZyhhLGMpfWJyZWFrO2Nhc2UgNTpaZyhhKTticmVhaztjYXNlIDQ6YmgoYSl9fWZ1bmN0aW9uIGNoKGEpe3JldHVybiA1PT09YS50YWd8fDM9PT1hLnRhZ3x8ND09PWEudGFnfVxuZnVuY3Rpb24gZGgoYSl7YTp7Zm9yKHZhciBiPWEucmV0dXJuO251bGwhPT1iOyl7aWYoY2goYikpe3ZhciBjPWI7YnJlYWsgYX1iPWIucmV0dXJufUEoXCIxNjBcIik7Yz12b2lkIDB9dmFyIGQ9Yj12b2lkIDA7c3dpdGNoKGMudGFnKXtjYXNlIDU6Yj1jLnN0YXRlTm9kZTtkPSExO2JyZWFrO2Nhc2UgMzpiPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztjYXNlIDQ6Yj1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7ZGVmYXVsdDpBKFwiMTYxXCIpfWMuZWZmZWN0VGFnJjE2JiYoTGUoYixcIlwiKSxjLmVmZmVjdFRhZyY9LTE3KTthOmI6Zm9yKGM9YTs7KXtmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fGNoKGMucmV0dXJuKSl7Yz1udWxsO2JyZWFrIGF9Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2ZvcihjPWMuc2libGluZzs1IT09Yy50YWcmJjYhPT1jLnRhZzspe2lmKGMuZWZmZWN0VGFnJjIpY29udGludWUgYjtcbmlmKG51bGw9PT1jLmNoaWxkfHw0PT09Yy50YWcpY29udGludWUgYjtlbHNlIGMuY2hpbGQucmV0dXJuPWMsYz1jLmNoaWxkfWlmKCEoYy5lZmZlY3RUYWcmMikpe2M9Yy5zdGF0ZU5vZGU7YnJlYWsgYX19Zm9yKHZhciBlPWE7Oyl7aWYoNT09PWUudGFnfHw2PT09ZS50YWcpaWYoYylpZihkKXt2YXIgZj1iLGc9ZS5zdGF0ZU5vZGUsaD1jOzg9PT1mLm5vZGVUeXBlP2YucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZyxoKTpmLmluc2VydEJlZm9yZShnLGgpfWVsc2UgYi5pbnNlcnRCZWZvcmUoZS5zdGF0ZU5vZGUsYyk7ZWxzZSBkPyhmPWIsZz1lLnN0YXRlTm9kZSw4PT09Zi5ub2RlVHlwZT9mLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGcsZik6Zi5hcHBlbmRDaGlsZChnKSk6Yi5hcHBlbmRDaGlsZChlLnN0YXRlTm9kZSk7ZWxzZSBpZig0IT09ZS50YWcmJm51bGwhPT1lLmNoaWxkKXtlLmNoaWxkLnJldHVybj1lO2U9ZS5jaGlsZDtjb250aW51ZX1pZihlPT09YSlicmVhaztmb3IoO251bGw9PT1cbmUuc2libGluZzspe2lmKG51bGw9PT1lLnJldHVybnx8ZS5yZXR1cm49PT1hKXJldHVybjtlPWUucmV0dXJufWUuc2libGluZy5yZXR1cm49ZS5yZXR1cm47ZT1lLnNpYmxpbmd9fVxuZnVuY3Rpb24gYmgoYSl7Zm9yKHZhciBiPWEsYz0hMSxkPXZvaWQgMCxlPXZvaWQgMDs7KXtpZighYyl7Yz1iLnJldHVybjthOmZvcig7Oyl7bnVsbD09PWM/QShcIjE2MFwiKTp2b2lkIDA7c3dpdGNoKGMudGFnKXtjYXNlIDU6ZD1jLnN0YXRlTm9kZTtlPSExO2JyZWFrIGE7Y2FzZSAzOmQ9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztlPSEwO2JyZWFrIGE7Y2FzZSA0OmQ9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztlPSEwO2JyZWFrIGF9Yz1jLnJldHVybn1jPSEwfWlmKDU9PT1iLnRhZ3x8Nj09PWIudGFnKXthOmZvcih2YXIgZj1iLGc9Zjs7KWlmKGFoKGcpLG51bGwhPT1nLmNoaWxkJiY0IT09Zy50YWcpZy5jaGlsZC5yZXR1cm49ZyxnPWcuY2hpbGQ7ZWxzZXtpZihnPT09ZilicmVhaztmb3IoO251bGw9PT1nLnNpYmxpbmc7KXtpZihudWxsPT09Zy5yZXR1cm58fGcucmV0dXJuPT09ZilicmVhayBhO2c9Zy5yZXR1cm59Zy5zaWJsaW5nLnJldHVybj1nLnJldHVybjtnPWcuc2libGluZ31lP1xuKGY9ZCxnPWIuc3RhdGVOb2RlLDg9PT1mLm5vZGVUeXBlP2YucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChnKTpmLnJlbW92ZUNoaWxkKGcpKTpkLnJlbW92ZUNoaWxkKGIuc3RhdGVOb2RlKX1lbHNlIGlmKDQ9PT1iLnRhZz9kPWIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm86YWgoYiksbnVsbCE9PWIuY2hpbGQpe2IuY2hpbGQucmV0dXJuPWI7Yj1iLmNoaWxkO2NvbnRpbnVlfWlmKGI9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWIuc2libGluZzspe2lmKG51bGw9PT1iLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybjtiPWIucmV0dXJuOzQ9PT1iLnRhZyYmKGM9ITEpfWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9fVxuZnVuY3Rpb24gZWgoYSxiKXtzd2l0Y2goYi50YWcpe2Nhc2UgMjpicmVhaztjYXNlIDU6dmFyIGM9Yi5zdGF0ZU5vZGU7aWYobnVsbCE9Yyl7dmFyIGQ9Yi5tZW1vaXplZFByb3BzO2E9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOmQ7dmFyIGU9Yi50eXBlLGY9Yi51cGRhdGVRdWV1ZTtiLnVwZGF0ZVF1ZXVlPW51bGw7bnVsbCE9PWYmJihjW01hXT1kLFllKGMsZixlLGEsZCkpfWJyZWFrO2Nhc2UgNjpudWxsPT09Yi5zdGF0ZU5vZGU/QShcIjE2MlwiKTp2b2lkIDA7Yi5zdGF0ZU5vZGUubm9kZVZhbHVlPWIubWVtb2l6ZWRQcm9wczticmVhaztjYXNlIDM6YnJlYWs7Y2FzZSAxNTpicmVhaztjYXNlIDE2OmJyZWFrO2RlZmF1bHQ6QShcIjE2M1wiKX19ZnVuY3Rpb24gZmgoYSxiLGMpe2M9UGYoYyk7Yy50YWc9MztjLnBheWxvYWQ9e2VsZW1lbnQ6bnVsbH07dmFyIGQ9Yi52YWx1ZTtjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7Z2goZCk7WWcoYSxiKX07cmV0dXJuIGN9XG5mdW5jdGlvbiBoaChhLGIsYyl7Yz1QZihjKTtjLnRhZz0zO3ZhciBkPWEuc3RhdGVOb2RlO251bGwhPT1kJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCYmKGMuY2FsbGJhY2s9ZnVuY3Rpb24oKXtudWxsPT09aWg/aWg9bmV3IFNldChbdGhpc10pOmloLmFkZCh0aGlzKTt2YXIgYz1iLnZhbHVlLGQ9Yi5zdGFjaztZZyhhLGIpO3RoaXMuY29tcG9uZW50RGlkQ2F0Y2goYyx7Y29tcG9uZW50U3RhY2s6bnVsbCE9PWQ/ZDpcIlwifSl9KTtyZXR1cm4gY31cbmZ1bmN0aW9uIGpoKGEsYixjLGQsZSxmKXtjLmVmZmVjdFRhZ3w9NTEyO2MuZmlyc3RFZmZlY3Q9Yy5sYXN0RWZmZWN0PW51bGw7ZD1ZZihkLGMpO2E9Yjtkb3tzd2l0Y2goYS50YWcpe2Nhc2UgMzphLmVmZmVjdFRhZ3w9MTAyNDtkPWZoKGEsZCxmKTtTZihhLGQsZik7cmV0dXJuO2Nhc2UgMjppZihiPWQsYz1hLnN0YXRlTm9kZSwwPT09KGEuZWZmZWN0VGFnJjY0KSYmbnVsbCE9PWMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PWlofHwhaWguaGFzKGMpKSl7YS5lZmZlY3RUYWd8PTEwMjQ7ZD1oaChhLGIsZik7U2YoYSxkLGYpO3JldHVybn19YT1hLnJldHVybn13aGlsZShudWxsIT09YSl9XG5mdW5jdGlvbiBraChhKXtzd2l0Y2goYS50YWcpe2Nhc2UgMjp0ZihhKTt2YXIgYj1hLmVmZmVjdFRhZztyZXR1cm4gYiYxMDI0PyhhLmVmZmVjdFRhZz1iJi0xMDI1fDY0LGEpOm51bGw7Y2FzZSAzOnJldHVybiBrZyhhKSx1ZihhKSxiPWEuZWZmZWN0VGFnLGImMTAyND8oYS5lZmZlY3RUYWc9YiYtMTAyNXw2NCxhKTpudWxsO2Nhc2UgNTpyZXR1cm4gbGcoYSksbnVsbDtjYXNlIDE2OnJldHVybiBiPWEuZWZmZWN0VGFnLGImMTAyND8oYS5lZmZlY3RUYWc9YiYtMTAyNXw2NCxhKTpudWxsO2Nhc2UgNDpyZXR1cm4ga2coYSksbnVsbDtjYXNlIDEzOnJldHVybiBjZyhhKSxudWxsO2RlZmF1bHQ6cmV0dXJuIG51bGx9fXZhciBsaD1mZigpLG1oPTIsbmg9bGgsb2g9MCxwaD0wLHFoPSExLFM9bnVsbCxyaD1udWxsLFQ9MCxzaD0tMSx0aD0hMSxVPW51bGwsdWg9ITEsdmg9ITEsaWg9bnVsbDtcbmZ1bmN0aW9uIHdoKCl7aWYobnVsbCE9PVMpZm9yKHZhciBhPVMucmV0dXJuO251bGwhPT1hOyl7dmFyIGI9YTtzd2l0Y2goYi50YWcpe2Nhc2UgMjp0ZihiKTticmVhaztjYXNlIDM6a2coYik7dWYoYik7YnJlYWs7Y2FzZSA1OmxnKGIpO2JyZWFrO2Nhc2UgNDprZyhiKTticmVhaztjYXNlIDEzOmNnKGIpfWE9YS5yZXR1cm59cmg9bnVsbDtUPTA7c2g9LTE7dGg9ITE7Uz1udWxsO3ZoPSExfVxuZnVuY3Rpb24geGgoYSl7Zm9yKDs7KXt2YXIgYj1hLmFsdGVybmF0ZSxjPWEucmV0dXJuLGQ9YS5zaWJsaW5nO2lmKDA9PT0oYS5lZmZlY3RUYWcmNTEyKSl7Yj1YZyhiLGEsVCk7dmFyIGU9YTtpZigxMDczNzQxODIzPT09VHx8MTA3Mzc0MTgyMyE9PWUuZXhwaXJhdGlvblRpbWUpe3ZhciBmPTA7c3dpdGNoKGUudGFnKXtjYXNlIDM6Y2FzZSAyOnZhciBnPWUudXBkYXRlUXVldWU7bnVsbCE9PWcmJihmPWcuZXhwaXJhdGlvblRpbWUpfWZvcihnPWUuY2hpbGQ7bnVsbCE9PWc7KTAhPT1nLmV4cGlyYXRpb25UaW1lJiYoMD09PWZ8fGY+Zy5leHBpcmF0aW9uVGltZSkmJihmPWcuZXhwaXJhdGlvblRpbWUpLGc9Zy5zaWJsaW5nO2UuZXhwaXJhdGlvblRpbWU9Zn1pZihudWxsIT09YilyZXR1cm4gYjtudWxsIT09YyYmMD09PShjLmVmZmVjdFRhZyY1MTIpJiYobnVsbD09PWMuZmlyc3RFZmZlY3QmJihjLmZpcnN0RWZmZWN0PWEuZmlyc3RFZmZlY3QpLG51bGwhPT1hLmxhc3RFZmZlY3QmJlxuKG51bGwhPT1jLmxhc3RFZmZlY3QmJihjLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1hLmZpcnN0RWZmZWN0KSxjLmxhc3RFZmZlY3Q9YS5sYXN0RWZmZWN0KSwxPGEuZWZmZWN0VGFnJiYobnVsbCE9PWMubGFzdEVmZmVjdD9jLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1hOmMuZmlyc3RFZmZlY3Q9YSxjLmxhc3RFZmZlY3Q9YSkpO2lmKG51bGwhPT1kKXJldHVybiBkO2lmKG51bGwhPT1jKWE9YztlbHNle3ZoPSEwO2JyZWFrfX1lbHNle2E9a2goYSx0aCxUKTtpZihudWxsIT09YSlyZXR1cm4gYS5lZmZlY3RUYWcmPTUxMSxhO251bGwhPT1jJiYoYy5maXJzdEVmZmVjdD1jLmxhc3RFZmZlY3Q9bnVsbCxjLmVmZmVjdFRhZ3w9NTEyKTtpZihudWxsIT09ZClyZXR1cm4gZDtpZihudWxsIT09YylhPWM7ZWxzZSBicmVha319cmV0dXJuIG51bGx9XG5mdW5jdGlvbiB5aChhKXt2YXIgYj1TZyhhLmFsdGVybmF0ZSxhLFQpO251bGw9PT1iJiYoYj14aChhKSk7ZWMuY3VycmVudD1udWxsO3JldHVybiBifVxuZnVuY3Rpb24gemgoYSxiLGMpe3FoP0EoXCIyNDNcIik6dm9pZCAwO3FoPSEwO2lmKGIhPT1UfHxhIT09cmh8fG51bGw9PT1TKXdoKCkscmg9YSxUPWIsc2g9LTEsUz1BZihyaC5jdXJyZW50LG51bGwsVCksYS5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU9MDt2YXIgZD0hMTt0aD0hY3x8VDw9bWg7ZG97dHJ5e2lmKGMpZm9yKDtudWxsIT09UyYmIUFoKCk7KVM9eWgoUyk7ZWxzZSBmb3IoO251bGwhPT1TOylTPXloKFMpfWNhdGNoKGYpe2lmKG51bGw9PT1TKWQ9ITAsZ2goZik7ZWxzZXtudWxsPT09Uz9BKFwiMjcxXCIpOnZvaWQgMDtjPVM7dmFyIGU9Yy5yZXR1cm47aWYobnVsbD09PWUpe2Q9ITA7Z2goZik7YnJlYWt9amgoYSxlLGMsZix0aCxULG5oKTtTPXhoKGMpfX1icmVha313aGlsZSgxKTtxaD0hMTtpZihkKXJldHVybiBudWxsO2lmKG51bGw9PT1TKXtpZih2aClyZXR1cm4gYS5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU9YixhLmN1cnJlbnQuYWx0ZXJuYXRlO3RoP0EoXCIyNjJcIik6XG52b2lkIDA7MDw9c2gmJnNldFRpbWVvdXQoZnVuY3Rpb24oKXt2YXIgYj1hLmN1cnJlbnQuZXhwaXJhdGlvblRpbWU7MCE9PWImJigwPT09YS5yZW1haW5pbmdFeHBpcmF0aW9uVGltZXx8YS5yZW1haW5pbmdFeHBpcmF0aW9uVGltZTxiKSYmQmgoYSxiKX0sc2gpO0NoKGEuY3VycmVudC5leHBpcmF0aW9uVGltZSl9cmV0dXJuIG51bGx9XG5mdW5jdGlvbiAkZyhhLGIpe3ZhciBjO2E6e3FoJiYhdWg/QShcIjI2M1wiKTp2b2lkIDA7Zm9yKGM9YS5yZXR1cm47bnVsbCE9PWM7KXtzd2l0Y2goYy50YWcpe2Nhc2UgMjp2YXIgZD1jLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21DYXRjaHx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09aWh8fCFpaC5oYXMoZCkpKXthPVlmKGIsYSk7YT1oaChjLGEsMSk7UmYoYyxhLDEpO3BnKGMsMSk7Yz12b2lkIDA7YnJlYWsgYX1icmVhaztjYXNlIDM6YT1ZZihiLGEpO2E9ZmgoYyxhLDEpO1JmKGMsYSwxKTtwZyhjLDEpO2M9dm9pZCAwO2JyZWFrIGF9Yz1jLnJldHVybn0zPT09YS50YWcmJihjPVlmKGIsYSksYz1maChhLGMsMSksUmYoYSxjLDEpLHBnKGEsMSkpO2M9dm9pZCAwfXJldHVybiBjfVxuZnVuY3Rpb24gRGgoKXt2YXIgYT0yKzI1KigoKG5nKCktMis1MDApLzI1fDApKzEpO2E8PW9oJiYoYT1vaCsxKTtyZXR1cm4gb2g9YX1mdW5jdGlvbiBvZyhhLGIpe2E9MCE9PXBoP3BoOnFoP3VoPzE6VDpiLm1vZGUmMT9FaD8yKzEwKigoKGEtMisxNSkvMTB8MCkrMSk6MisyNSooKChhLTIrNTAwKS8yNXwwKSsxKToxO0VoJiYoMD09PUZofHxhPkZoKSYmKEZoPWEpO3JldHVybiBhfVxuZnVuY3Rpb24gcGcoYSxiKXtmb3IoO251bGwhPT1hOyl7aWYoMD09PWEuZXhwaXJhdGlvblRpbWV8fGEuZXhwaXJhdGlvblRpbWU+YilhLmV4cGlyYXRpb25UaW1lPWI7bnVsbCE9PWEuYWx0ZXJuYXRlJiYoMD09PWEuYWx0ZXJuYXRlLmV4cGlyYXRpb25UaW1lfHxhLmFsdGVybmF0ZS5leHBpcmF0aW9uVGltZT5iKSYmKGEuYWx0ZXJuYXRlLmV4cGlyYXRpb25UaW1lPWIpO2lmKG51bGw9PT1hLnJldHVybilpZigzPT09YS50YWcpe3ZhciBjPWEuc3RhdGVOb2RlOyFxaCYmMCE9PVQmJmI8VCYmd2goKTt2YXIgZD1jLmN1cnJlbnQuZXhwaXJhdGlvblRpbWU7cWgmJiF1aCYmcmg9PT1jfHxCaChjLGQpO0doPkhoJiZBKFwiMTg1XCIpfWVsc2UgYnJlYWs7YT1hLnJldHVybn19ZnVuY3Rpb24gbmcoKXtuaD1mZigpLWxoO3JldHVybiBtaD0obmgvMTB8MCkrMn1cbmZ1bmN0aW9uIEloKGEpe3ZhciBiPXBoO3BoPTIrMjUqKCgobmcoKS0yKzUwMCkvMjV8MCkrMSk7dHJ5e3JldHVybiBhKCl9ZmluYWxseXtwaD1ifX1mdW5jdGlvbiBKaChhLGIsYyxkLGUpe3ZhciBmPXBoO3BoPTE7dHJ5e3JldHVybiBhKGIsYyxkLGUpfWZpbmFsbHl7cGg9Zn19dmFyIEtoPW51bGwsVj1udWxsLExoPTAsTWg9dm9pZCAwLFc9ITEsWD1udWxsLFk9MCxGaD0wLE5oPSExLE9oPSExLFBoPW51bGwsUWg9bnVsbCxaPSExLFJoPSExLEVoPSExLFNoPW51bGwsSGg9MUUzLEdoPTAsVGg9MTtmdW5jdGlvbiBVaChhKXtpZigwIT09TGgpe2lmKGE+TGgpcmV0dXJuO251bGwhPT1NaCYmaGYoTWgpfXZhciBiPWZmKCktbGg7TGg9YTtNaD1nZihWaCx7dGltZW91dDoxMCooYS0yKS1ifSl9XG5mdW5jdGlvbiBCaChhLGIpe2lmKG51bGw9PT1hLm5leHRTY2hlZHVsZWRSb290KWEucmVtYWluaW5nRXhwaXJhdGlvblRpbWU9YixudWxsPT09Vj8oS2g9Vj1hLGEubmV4dFNjaGVkdWxlZFJvb3Q9YSk6KFY9Vi5uZXh0U2NoZWR1bGVkUm9vdD1hLFYubmV4dFNjaGVkdWxlZFJvb3Q9S2gpO2Vsc2V7dmFyIGM9YS5yZW1haW5pbmdFeHBpcmF0aW9uVGltZTtpZigwPT09Y3x8YjxjKWEucmVtYWluaW5nRXhwaXJhdGlvblRpbWU9Yn1XfHwoWj9SaCYmKFg9YSxZPTEsV2goYSwxLCExKSk6MT09PWI/WGgoKTpVaChiKSl9XG5mdW5jdGlvbiBZaCgpe3ZhciBhPTAsYj1udWxsO2lmKG51bGwhPT1WKWZvcih2YXIgYz1WLGQ9S2g7bnVsbCE9PWQ7KXt2YXIgZT1kLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lO2lmKDA9PT1lKXtudWxsPT09Y3x8bnVsbD09PVY/QShcIjI0NFwiKTp2b2lkIDA7aWYoZD09PWQubmV4dFNjaGVkdWxlZFJvb3Qpe0toPVY9ZC5uZXh0U2NoZWR1bGVkUm9vdD1udWxsO2JyZWFrfWVsc2UgaWYoZD09PUtoKUtoPWU9ZC5uZXh0U2NoZWR1bGVkUm9vdCxWLm5leHRTY2hlZHVsZWRSb290PWUsZC5uZXh0U2NoZWR1bGVkUm9vdD1udWxsO2Vsc2UgaWYoZD09PVYpe1Y9YztWLm5leHRTY2hlZHVsZWRSb290PUtoO2QubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDticmVha31lbHNlIGMubmV4dFNjaGVkdWxlZFJvb3Q9ZC5uZXh0U2NoZWR1bGVkUm9vdCxkLm5leHRTY2hlZHVsZWRSb290PW51bGw7ZD1jLm5leHRTY2hlZHVsZWRSb290fWVsc2V7aWYoMD09PWF8fGU8YSlhPWUsYj1kO2lmKGQ9PT1WKWJyZWFrO1xuYz1kO2Q9ZC5uZXh0U2NoZWR1bGVkUm9vdH19Yz1YO251bGwhPT1jJiZjPT09YiYmMT09PWE/R2grKzpHaD0wO1g9YjtZPWF9ZnVuY3Rpb24gVmgoYSl7WmgoMCwhMCxhKX1mdW5jdGlvbiBYaCgpe1poKDEsITEsbnVsbCl9ZnVuY3Rpb24gWmgoYSxiLGMpe1FoPWM7WWgoKTtpZihiKWZvcig7bnVsbCE9PVgmJjAhPT1ZJiYoMD09PWF8fGE+PVkpJiYoIU5ofHxuZygpPj1ZKTspbmcoKSxXaChYLFksIU5oKSxZaCgpO2Vsc2UgZm9yKDtudWxsIT09WCYmMCE9PVkmJigwPT09YXx8YT49WSk7KVdoKFgsWSwhMSksWWgoKTtudWxsIT09UWgmJihMaD0wLE1oPW51bGwpOzAhPT1ZJiZVaChZKTtRaD1udWxsO05oPSExOyRoKCl9ZnVuY3Rpb24gYWkoYSxiKXtXP0EoXCIyNTNcIik6dm9pZCAwO1g9YTtZPWI7V2goYSxiLCExKTtYaCgpOyRoKCl9XG5mdW5jdGlvbiAkaCgpe0doPTA7aWYobnVsbCE9PVNoKXt2YXIgYT1TaDtTaD1udWxsO2Zvcih2YXIgYj0wO2I8YS5sZW5ndGg7YisrKXt2YXIgYz1hW2JdO3RyeXtjLl9vbkNvbXBsZXRlKCl9Y2F0Y2goZCl7T2h8fChPaD0hMCxQaD1kKX19fWlmKE9oKXRocm93IGE9UGgsUGg9bnVsbCxPaD0hMSxhO31mdW5jdGlvbiBXaChhLGIsYyl7Vz9BKFwiMjQ1XCIpOnZvaWQgMDtXPSEwO2M/KGM9YS5maW5pc2hlZFdvcmssbnVsbCE9PWM/YmkoYSxjLGIpOihjPXpoKGEsYiwhMCksbnVsbCE9PWMmJihBaCgpP2EuZmluaXNoZWRXb3JrPWM6YmkoYSxjLGIpKSkpOihjPWEuZmluaXNoZWRXb3JrLG51bGwhPT1jP2JpKGEsYyxiKTooYz16aChhLGIsITEpLG51bGwhPT1jJiZiaShhLGMsYikpKTtXPSExfVxuZnVuY3Rpb24gYmkoYSxiLGMpe3ZhciBkPWEuZmlyc3RCYXRjaDtpZihudWxsIT09ZCYmZC5fZXhwaXJhdGlvblRpbWU8PWMmJihudWxsPT09U2g/U2g9W2RdOlNoLnB1c2goZCksZC5fZGVmZXIpKXthLmZpbmlzaGVkV29yaz1iO2EucmVtYWluaW5nRXhwaXJhdGlvblRpbWU9MDtyZXR1cm59YS5maW5pc2hlZFdvcms9bnVsbDt1aD1xaD0hMDtjPWIuc3RhdGVOb2RlO2MuY3VycmVudD09PWI/QShcIjE3N1wiKTp2b2lkIDA7ZD1jLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZTswPT09ZD9BKFwiMjYxXCIpOnZvaWQgMDtjLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZT0wO25nKCk7ZWMuY3VycmVudD1udWxsO2lmKDE8Yi5lZmZlY3RUYWcpaWYobnVsbCE9PWIubGFzdEVmZmVjdCl7Yi5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9Yjt2YXIgZT1iLmZpcnN0RWZmZWN0fWVsc2UgZT1iO2Vsc2UgZT1iLmZpcnN0RWZmZWN0O2JmPUlkO3ZhciBmPWRhKCk7aWYoVmQoZikpe2lmKFwic2VsZWN0aW9uU3RhcnRcImluXG5mKXZhciBnPXtzdGFydDpmLnNlbGVjdGlvblN0YXJ0LGVuZDpmLnNlbGVjdGlvbkVuZH07ZWxzZSBhOnt2YXIgaD13aW5kb3cuZ2V0U2VsZWN0aW9uJiZ3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7aWYoaCYmMCE9PWgucmFuZ2VDb3VudCl7Zz1oLmFuY2hvck5vZGU7dmFyIGs9aC5hbmNob3JPZmZzZXQsbj1oLmZvY3VzTm9kZTtoPWguZm9jdXNPZmZzZXQ7dHJ5e2cubm9kZVR5cGUsbi5ub2RlVHlwZX1jYXRjaChXYSl7Zz1udWxsO2JyZWFrIGF9dmFyIHI9MCx3PS0xLFA9LTEsbmM9MCxKZD0wLEU9Zix0PW51bGw7Yjpmb3IoOzspe2Zvcih2YXIgeDs7KXtFIT09Z3x8MCE9PWsmJjMhPT1FLm5vZGVUeXBlfHwodz1yK2spO0UhPT1ufHwwIT09aCYmMyE9PUUubm9kZVR5cGV8fChQPXIraCk7Mz09PUUubm9kZVR5cGUmJihyKz1FLm5vZGVWYWx1ZS5sZW5ndGgpO2lmKG51bGw9PT0oeD1FLmZpcnN0Q2hpbGQpKWJyZWFrO3Q9RTtFPXh9Zm9yKDs7KXtpZihFPT09ZilicmVhayBiO3Q9PT1nJiZcbisrbmM9PT1rJiYodz1yKTt0PT09biYmKytKZD09PWgmJihQPXIpO2lmKG51bGwhPT0oeD1FLm5leHRTaWJsaW5nKSlicmVhaztFPXQ7dD1FLnBhcmVudE5vZGV9RT14fWc9LTE9PT13fHwtMT09PVA/bnVsbDp7c3RhcnQ6dyxlbmQ6UH19ZWxzZSBnPW51bGx9Zz1nfHx7c3RhcnQ6MCxlbmQ6MH19ZWxzZSBnPW51bGw7Y2Y9e2ZvY3VzZWRFbGVtOmYsc2VsZWN0aW9uUmFuZ2U6Z307S2QoITEpO2ZvcihVPWU7bnVsbCE9PVU7KXtmPSExO2c9dm9pZCAwO3RyeXtmb3IoO251bGwhPT1VOyl7aWYoVS5lZmZlY3RUYWcmMjU2KXt2YXIgdT1VLmFsdGVybmF0ZTtrPVU7c3dpdGNoKGsudGFnKXtjYXNlIDI6aWYoay5lZmZlY3RUYWcmMjU2JiZudWxsIT09dSl7dmFyIHk9dS5tZW1vaXplZFByb3BzLEQ9dS5tZW1vaXplZFN0YXRlLGphPWsuc3RhdGVOb2RlO2phLnByb3BzPWsubWVtb2l6ZWRQcm9wcztqYS5zdGF0ZT1rLm1lbW9pemVkU3RhdGU7dmFyIG5pPWphLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKHksXG5EKTtqYS5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZT1uaX1icmVhaztjYXNlIDM6Y2FzZSA1OmNhc2UgNjpjYXNlIDQ6YnJlYWs7ZGVmYXVsdDpBKFwiMTYzXCIpfX1VPVUubmV4dEVmZmVjdH19Y2F0Y2goV2Epe2Y9ITAsZz1XYX1mJiYobnVsbD09PVU/QShcIjE3OFwiKTp2b2lkIDAsJGcoVSxnKSxudWxsIT09VSYmKFU9VS5uZXh0RWZmZWN0KSl9Zm9yKFU9ZTtudWxsIT09VTspe3U9ITE7eT12b2lkIDA7dHJ5e2Zvcig7bnVsbCE9PVU7KXt2YXIgcT1VLmVmZmVjdFRhZztxJjE2JiZMZShVLnN0YXRlTm9kZSxcIlwiKTtpZihxJjEyOCl7dmFyIHo9VS5hbHRlcm5hdGU7aWYobnVsbCE9PXope3ZhciBsPXoucmVmO251bGwhPT1sJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGw/bChudWxsKTpsLmN1cnJlbnQ9bnVsbCl9fXN3aXRjaChxJjE0KXtjYXNlIDI6ZGgoVSk7VS5lZmZlY3RUYWcmPS0zO2JyZWFrO2Nhc2UgNjpkaChVKTtVLmVmZmVjdFRhZyY9LTM7ZWgoVS5hbHRlcm5hdGUsXG5VKTticmVhaztjYXNlIDQ6ZWgoVS5hbHRlcm5hdGUsVSk7YnJlYWs7Y2FzZSA4OkQ9VSxiaChEKSxELnJldHVybj1udWxsLEQuY2hpbGQ9bnVsbCxELmFsdGVybmF0ZSYmKEQuYWx0ZXJuYXRlLmNoaWxkPW51bGwsRC5hbHRlcm5hdGUucmV0dXJuPW51bGwpfVU9VS5uZXh0RWZmZWN0fX1jYXRjaChXYSl7dT0hMCx5PVdhfXUmJihudWxsPT09VT9BKFwiMTc4XCIpOnZvaWQgMCwkZyhVLHkpLG51bGwhPT1VJiYoVT1VLm5leHRFZmZlY3QpKX1sPWNmO3o9ZGEoKTtxPWwuZm9jdXNlZEVsZW07dT1sLnNlbGVjdGlvblJhbmdlO2lmKHohPT1xJiZmYShkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQscSkpe251bGwhPT11JiZWZChxKSYmKHo9dS5zdGFydCxsPXUuZW5kLHZvaWQgMD09PWwmJihsPXopLFwic2VsZWN0aW9uU3RhcnRcImluIHE/KHEuc2VsZWN0aW9uU3RhcnQ9eixxLnNlbGVjdGlvbkVuZD1NYXRoLm1pbihsLHEudmFsdWUubGVuZ3RoKSk6d2luZG93LmdldFNlbGVjdGlvbiYmKHo9d2luZG93LmdldFNlbGVjdGlvbigpLFxueT1xW2xiKCldLmxlbmd0aCxsPU1hdGgubWluKHUuc3RhcnQseSksdT12b2lkIDA9PT11LmVuZD9sOk1hdGgubWluKHUuZW5kLHkpLCF6LmV4dGVuZCYmbD51JiYoeT11LHU9bCxsPXkpLHk9VWQocSxsKSxEPVVkKHEsdSkseSYmRCYmKDEhPT16LnJhbmdlQ291bnR8fHouYW5jaG9yTm9kZSE9PXkubm9kZXx8ei5hbmNob3JPZmZzZXQhPT15Lm9mZnNldHx8ei5mb2N1c05vZGUhPT1ELm5vZGV8fHouZm9jdXNPZmZzZXQhPT1ELm9mZnNldCkmJihqYT1kb2N1bWVudC5jcmVhdGVSYW5nZSgpLGphLnNldFN0YXJ0KHkubm9kZSx5Lm9mZnNldCksei5yZW1vdmVBbGxSYW5nZXMoKSxsPnU/KHouYWRkUmFuZ2UoamEpLHouZXh0ZW5kKEQubm9kZSxELm9mZnNldCkpOihqYS5zZXRFbmQoRC5ub2RlLEQub2Zmc2V0KSx6LmFkZFJhbmdlKGphKSkpKSk7ej1bXTtmb3IobD1xO2w9bC5wYXJlbnROb2RlOykxPT09bC5ub2RlVHlwZSYmei5wdXNoKHtlbGVtZW50OmwsbGVmdDpsLnNjcm9sbExlZnQsXG50b3A6bC5zY3JvbGxUb3B9KTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgcS5mb2N1cyYmcS5mb2N1cygpO2ZvcihxPTA7cTx6Lmxlbmd0aDtxKyspbD16W3FdLGwuZWxlbWVudC5zY3JvbGxMZWZ0PWwubGVmdCxsLmVsZW1lbnQuc2Nyb2xsVG9wPWwudG9wfWNmPW51bGw7S2QoYmYpO2JmPW51bGw7Yy5jdXJyZW50PWI7Zm9yKFU9ZTtudWxsIT09VTspe2U9ITE7cT12b2lkIDA7dHJ5e2Zvcih6PWQ7bnVsbCE9PVU7KXt2YXIgaWc9VS5lZmZlY3RUYWc7aWYoaWcmMzYpe3ZhciBvYz1VLmFsdGVybmF0ZTtsPVU7dT16O3N3aXRjaChsLnRhZyl7Y2FzZSAyOnZhciBjYT1sLnN0YXRlTm9kZTtpZihsLmVmZmVjdFRhZyY0KWlmKG51bGw9PT1vYyljYS5wcm9wcz1sLm1lbW9pemVkUHJvcHMsY2Euc3RhdGU9bC5tZW1vaXplZFN0YXRlLGNhLmNvbXBvbmVudERpZE1vdW50KCk7ZWxzZXt2YXIgeGk9b2MubWVtb2l6ZWRQcm9wcyx5aT1vYy5tZW1vaXplZFN0YXRlO2NhLnByb3BzPWwubWVtb2l6ZWRQcm9wcztcbmNhLnN0YXRlPWwubWVtb2l6ZWRTdGF0ZTtjYS5jb21wb25lbnREaWRVcGRhdGUoeGkseWksY2EuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUpfXZhciBPZz1sLnVwZGF0ZVF1ZXVlO251bGwhPT1PZyYmKGNhLnByb3BzPWwubWVtb2l6ZWRQcm9wcyxjYS5zdGF0ZT1sLm1lbW9pemVkU3RhdGUsWGYobCxPZyxjYSx1KSk7YnJlYWs7Y2FzZSAzOnZhciBQZz1sLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1QZyl7eT1udWxsO2lmKG51bGwhPT1sLmNoaWxkKXN3aXRjaChsLmNoaWxkLnRhZyl7Y2FzZSA1Onk9bC5jaGlsZC5zdGF0ZU5vZGU7YnJlYWs7Y2FzZSAyOnk9bC5jaGlsZC5zdGF0ZU5vZGV9WGYobCxQZyx5LHUpfWJyZWFrO2Nhc2UgNTp2YXIgemk9bC5zdGF0ZU5vZGU7bnVsbD09PW9jJiZsLmVmZmVjdFRhZyY0JiZkZihsLnR5cGUsbC5tZW1vaXplZFByb3BzKSYmemkuZm9jdXMoKTticmVhaztjYXNlIDY6YnJlYWs7Y2FzZSA0OmJyZWFrO2Nhc2UgMTU6YnJlYWs7Y2FzZSAxNjpicmVhaztcbmRlZmF1bHQ6QShcIjE2M1wiKX19aWYoaWcmMTI4KXtsPXZvaWQgMDt2YXIgeWM9VS5yZWY7aWYobnVsbCE9PXljKXt2YXIgUWc9VS5zdGF0ZU5vZGU7c3dpdGNoKFUudGFnKXtjYXNlIDU6bD1RZzticmVhaztkZWZhdWx0Omw9UWd9XCJmdW5jdGlvblwiPT09dHlwZW9mIHljP3ljKGwpOnljLmN1cnJlbnQ9bH19dmFyIEFpPVUubmV4dEVmZmVjdDtVLm5leHRFZmZlY3Q9bnVsbDtVPUFpfX1jYXRjaChXYSl7ZT0hMCxxPVdhfWUmJihudWxsPT09VT9BKFwiMTc4XCIpOnZvaWQgMCwkZyhVLHEpLG51bGwhPT1VJiYoVT1VLm5leHRFZmZlY3QpKX1xaD11aD0hMTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgS2YmJktmKGIuc3RhdGVOb2RlKTtiPWMuY3VycmVudC5leHBpcmF0aW9uVGltZTswPT09YiYmKGloPW51bGwpO2EucmVtYWluaW5nRXhwaXJhdGlvblRpbWU9Yn1mdW5jdGlvbiBBaCgpe3JldHVybiBudWxsPT09UWh8fFFoLnRpbWVSZW1haW5pbmcoKT5UaD8hMTpOaD0hMH1cbmZ1bmN0aW9uIGdoKGEpe251bGw9PT1YP0EoXCIyNDZcIik6dm9pZCAwO1gucmVtYWluaW5nRXhwaXJhdGlvblRpbWU9MDtPaHx8KE9oPSEwLFBoPWEpfWZ1bmN0aW9uIENoKGEpe251bGw9PT1YP0EoXCIyNDZcIik6dm9pZCAwO1gucmVtYWluaW5nRXhwaXJhdGlvblRpbWU9YX1mdW5jdGlvbiBjaShhLGIpe3ZhciBjPVo7Wj0hMDt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXsoWj1jKXx8V3x8WGgoKX19ZnVuY3Rpb24gZGkoYSxiKXtpZihaJiYhUmgpe1JoPSEwO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e1JoPSExfX1yZXR1cm4gYShiKX1mdW5jdGlvbiBlaShhLGIpe1c/QShcIjE4N1wiKTp2b2lkIDA7dmFyIGM9WjtaPSEwO3RyeXtyZXR1cm4gSmgoYSxiKX1maW5hbGx5e1o9YyxYaCgpfX1cbmZ1bmN0aW9uIGZpKGEsYixjKXtpZihFaClyZXR1cm4gYShiLGMpO1p8fFd8fDA9PT1GaHx8KFpoKEZoLCExLG51bGwpLEZoPTApO3ZhciBkPUVoLGU9WjtaPUVoPSEwO3RyeXtyZXR1cm4gYShiLGMpfWZpbmFsbHl7RWg9ZCwoWj1lKXx8V3x8WGgoKX19ZnVuY3Rpb24gZ2koYSl7dmFyIGI9WjtaPSEwO3RyeXtKaChhKX1maW5hbGx5eyhaPWIpfHxXfHxaaCgxLCExLG51bGwpfX1cbmZ1bmN0aW9uIGhpKGEsYixjLGQsZSl7dmFyIGY9Yi5jdXJyZW50O2lmKGMpe2M9Yy5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBnO2I6ezI9PT1rZChjKSYmMj09PWMudGFnP3ZvaWQgMDpBKFwiMTcwXCIpO2ZvcihnPWM7MyE9PWcudGFnOyl7aWYocmYoZykpe2c9Zy5zdGF0ZU5vZGUuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ7YnJlYWsgYn0oZz1nLnJldHVybik/dm9pZCAwOkEoXCIxNzFcIil9Zz1nLnN0YXRlTm9kZS5jb250ZXh0fWM9cmYoYyk/d2YoYyxnKTpnfWVsc2UgYz1oYTtudWxsPT09Yi5jb250ZXh0P2IuY29udGV4dD1jOmIucGVuZGluZ0NvbnRleHQ9YztiPWU7ZT1QZihkKTtlLnBheWxvYWQ9e2VsZW1lbnQ6YX07Yj12b2lkIDA9PT1iP251bGw6YjtudWxsIT09YiYmKGUuY2FsbGJhY2s9Yik7UmYoZixlLGQpO3BnKGYsZCk7cmV0dXJuIGR9XG5mdW5jdGlvbiBpaShhKXt2YXIgYj1hLl9yZWFjdEludGVybmFsRmliZXI7dm9pZCAwPT09YiYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnJlbmRlcj9BKFwiMTg4XCIpOkEoXCIyNjhcIixPYmplY3Qua2V5cyhhKSkpO2E9bmQoYik7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9ZnVuY3Rpb24gamkoYSxiLGMsZCl7dmFyIGU9Yi5jdXJyZW50LGY9bmcoKTtlPW9nKGYsZSk7cmV0dXJuIGhpKGEsYixjLGUsZCl9ZnVuY3Rpb24ga2koYSl7YT1hLmN1cnJlbnQ7aWYoIWEuY2hpbGQpcmV0dXJuIG51bGw7c3dpdGNoKGEuY2hpbGQudGFnKXtjYXNlIDU6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlO2RlZmF1bHQ6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlfX1cbmZ1bmN0aW9uIGxpKGEpe3ZhciBiPWEuZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U7cmV0dXJuIEpmKHAoe30sYSx7ZmluZEhvc3RJbnN0YW5jZUJ5RmliZXI6ZnVuY3Rpb24oYSl7YT1uZChhKTtyZXR1cm4gbnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZX0sZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6ZnVuY3Rpb24oYSl7cmV0dXJuIGI/YihhKTpudWxsfX0pKX1cbnZhciBtaT17dXBkYXRlQ29udGFpbmVyQXRFeHBpcmF0aW9uVGltZTpoaSxjcmVhdGVDb250YWluZXI6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBGZihhLGIsYyl9LHVwZGF0ZUNvbnRhaW5lcjpqaSxmbHVzaFJvb3Q6YWkscmVxdWVzdFdvcms6QmgsY29tcHV0ZVVuaXF1ZUFzeW5jRXhwaXJhdGlvbjpEaCxiYXRjaGVkVXBkYXRlczpjaSx1bmJhdGNoZWRVcGRhdGVzOmRpLGRlZmVycmVkVXBkYXRlczpJaCxzeW5jVXBkYXRlczpKaCxpbnRlcmFjdGl2ZVVwZGF0ZXM6ZmksZmx1c2hJbnRlcmFjdGl2ZVVwZGF0ZXM6ZnVuY3Rpb24oKXtXfHwwPT09Rmh8fChaaChGaCwhMSxudWxsKSxGaD0wKX0sZmx1c2hDb250cm9sbGVkOmdpLGZsdXNoU3luYzplaSxnZXRQdWJsaWNSb290SW5zdGFuY2U6a2ksZmluZEhvc3RJbnN0YW5jZTppaSxmaW5kSG9zdEluc3RhbmNlV2l0aE5vUG9ydGFsczpmdW5jdGlvbihhKXthPW9kKGEpO3JldHVybiBudWxsPT09YT9udWxsOmEuc3RhdGVOb2RlfSxpbmplY3RJbnRvRGV2VG9vbHM6bGl9O1xuZnVuY3Rpb24gb2koYSxiLGMpe3ZhciBkPTM8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpudWxsO3JldHVybnskJHR5cGVvZjpoYyxrZXk6bnVsbD09ZD9udWxsOlwiXCIrZCxjaGlsZHJlbjphLGNvbnRhaW5lckluZm86YixpbXBsZW1lbnRhdGlvbjpjfX1LYi5pbmplY3RGaWJlckNvbnRyb2xsZWRIb3N0Q29tcG9uZW50KGFmKTtmdW5jdGlvbiBwaShhKXt0aGlzLl9leHBpcmF0aW9uVGltZT1EaCgpO3RoaXMuX3Jvb3Q9YTt0aGlzLl9jYWxsYmFja3M9dGhpcy5fbmV4dD1udWxsO3RoaXMuX2hhc0NoaWxkcmVuPXRoaXMuX2RpZENvbXBsZXRlPSExO3RoaXMuX2NoaWxkcmVuPW51bGw7dGhpcy5fZGVmZXI9ITB9XG5waS5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEpe3RoaXMuX2RlZmVyP3ZvaWQgMDpBKFwiMjUwXCIpO3RoaXMuX2hhc0NoaWxkcmVuPSEwO3RoaXMuX2NoaWxkcmVuPWE7dmFyIGI9dGhpcy5fcm9vdC5faW50ZXJuYWxSb290LGM9dGhpcy5fZXhwaXJhdGlvblRpbWUsZD1uZXcgcWk7aGkoYSxiLG51bGwsYyxkLl9vbkNvbW1pdCk7cmV0dXJuIGR9O3BpLnByb3RvdHlwZS50aGVuPWZ1bmN0aW9uKGEpe2lmKHRoaXMuX2RpZENvbXBsZXRlKWEoKTtlbHNle3ZhciBiPXRoaXMuX2NhbGxiYWNrcztudWxsPT09YiYmKGI9dGhpcy5fY2FsbGJhY2tzPVtdKTtiLnB1c2goYSl9fTtcbnBpLnByb3RvdHlwZS5jb21taXQ9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLl9yb290Ll9pbnRlcm5hbFJvb3QsYj1hLmZpcnN0QmF0Y2g7dGhpcy5fZGVmZXImJm51bGwhPT1iP3ZvaWQgMDpBKFwiMjUxXCIpO2lmKHRoaXMuX2hhc0NoaWxkcmVuKXt2YXIgYz10aGlzLl9leHBpcmF0aW9uVGltZTtpZihiIT09dGhpcyl7dGhpcy5faGFzQ2hpbGRyZW4mJihjPXRoaXMuX2V4cGlyYXRpb25UaW1lPWIuX2V4cGlyYXRpb25UaW1lLHRoaXMucmVuZGVyKHRoaXMuX2NoaWxkcmVuKSk7Zm9yKHZhciBkPW51bGwsZT1iO2UhPT10aGlzOylkPWUsZT1lLl9uZXh0O251bGw9PT1kP0EoXCIyNTFcIik6dm9pZCAwO2QuX25leHQ9ZS5fbmV4dDt0aGlzLl9uZXh0PWI7YS5maXJzdEJhdGNoPXRoaXN9dGhpcy5fZGVmZXI9ITE7YWkoYSxjKTtiPXRoaXMuX25leHQ7dGhpcy5fbmV4dD1udWxsO2I9YS5maXJzdEJhdGNoPWI7bnVsbCE9PWImJmIuX2hhc0NoaWxkcmVuJiZiLnJlbmRlcihiLl9jaGlsZHJlbil9ZWxzZSB0aGlzLl9uZXh0PVxubnVsbCx0aGlzLl9kZWZlcj0hMX07cGkucHJvdG90eXBlLl9vbkNvbXBsZXRlPWZ1bmN0aW9uKCl7aWYoIXRoaXMuX2RpZENvbXBsZXRlKXt0aGlzLl9kaWRDb21wbGV0ZT0hMDt2YXIgYT10aGlzLl9jYWxsYmFja3M7aWYobnVsbCE9PWEpZm9yKHZhciBiPTA7YjxhLmxlbmd0aDtiKyspKDAsYVtiXSkoKX19O2Z1bmN0aW9uIHFpKCl7dGhpcy5fY2FsbGJhY2tzPW51bGw7dGhpcy5fZGlkQ29tbWl0PSExO3RoaXMuX29uQ29tbWl0PXRoaXMuX29uQ29tbWl0LmJpbmQodGhpcyl9cWkucHJvdG90eXBlLnRoZW49ZnVuY3Rpb24oYSl7aWYodGhpcy5fZGlkQ29tbWl0KWEoKTtlbHNle3ZhciBiPXRoaXMuX2NhbGxiYWNrcztudWxsPT09YiYmKGI9dGhpcy5fY2FsbGJhY2tzPVtdKTtiLnB1c2goYSl9fTtcbnFpLnByb3RvdHlwZS5fb25Db21taXQ9ZnVuY3Rpb24oKXtpZighdGhpcy5fZGlkQ29tbWl0KXt0aGlzLl9kaWRDb21taXQ9ITA7dmFyIGE9dGhpcy5fY2FsbGJhY2tzO2lmKG51bGwhPT1hKWZvcih2YXIgYj0wO2I8YS5sZW5ndGg7YisrKXt2YXIgYz1hW2JdO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBjP0EoXCIxOTFcIixjKTp2b2lkIDA7YygpfX19O2Z1bmN0aW9uIHJpKGEsYixjKXt0aGlzLl9pbnRlcm5hbFJvb3Q9RmYoYSxiLGMpfXJpLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzLl9pbnRlcm5hbFJvb3QsZD1uZXcgcWk7Yj12b2lkIDA9PT1iP251bGw6YjtudWxsIT09YiYmZC50aGVuKGIpO2ppKGEsYyxudWxsLGQuX29uQ29tbWl0KTtyZXR1cm4gZH07XG5yaS5wcm90b3R5cGUudW5tb3VudD1mdW5jdGlvbihhKXt2YXIgYj10aGlzLl9pbnRlcm5hbFJvb3QsYz1uZXcgcWk7YT12b2lkIDA9PT1hP251bGw6YTtudWxsIT09YSYmYy50aGVuKGEpO2ppKG51bGwsYixudWxsLGMuX29uQ29tbWl0KTtyZXR1cm4gY307cmkucHJvdG90eXBlLmxlZ2FjeV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcj1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9dGhpcy5faW50ZXJuYWxSb290LGU9bmV3IHFpO2M9dm9pZCAwPT09Yz9udWxsOmM7bnVsbCE9PWMmJmUudGhlbihjKTtqaShiLGQsYSxlLl9vbkNvbW1pdCk7cmV0dXJuIGV9O1xucmkucHJvdG90eXBlLmNyZWF0ZUJhdGNoPWZ1bmN0aW9uKCl7dmFyIGE9bmV3IHBpKHRoaXMpLGI9YS5fZXhwaXJhdGlvblRpbWUsYz10aGlzLl9pbnRlcm5hbFJvb3QsZD1jLmZpcnN0QmF0Y2g7aWYobnVsbD09PWQpYy5maXJzdEJhdGNoPWEsYS5fbmV4dD1udWxsO2Vsc2V7Zm9yKGM9bnVsbDtudWxsIT09ZCYmZC5fZXhwaXJhdGlvblRpbWU8PWI7KWM9ZCxkPWQuX25leHQ7YS5fbmV4dD1kO251bGwhPT1jJiYoYy5fbmV4dD1hKX1yZXR1cm4gYX07ZnVuY3Rpb24gc2koYSl7cmV0dXJuISghYXx8MSE9PWEubm9kZVR5cGUmJjkhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGUmJig4IT09YS5ub2RlVHlwZXx8XCIgcmVhY3QtbW91bnQtcG9pbnQtdW5zdGFibGUgXCIhPT1hLm5vZGVWYWx1ZSkpfVNiPW1pLmJhdGNoZWRVcGRhdGVzO1RiPW1pLmludGVyYWN0aXZlVXBkYXRlcztVYj1taS5mbHVzaEludGVyYWN0aXZlVXBkYXRlcztcbmZ1bmN0aW9uIHRpKGEsYil7Ynx8KGI9YT85PT09YS5ub2RlVHlwZT9hLmRvY3VtZW50RWxlbWVudDphLmZpcnN0Q2hpbGQ6bnVsbCxiPSEoIWJ8fDEhPT1iLm5vZGVUeXBlfHwhYi5oYXNBdHRyaWJ1dGUoXCJkYXRhLXJlYWN0cm9vdFwiKSkpO2lmKCFiKWZvcih2YXIgYztjPWEubGFzdENoaWxkOylhLnJlbW92ZUNoaWxkKGMpO3JldHVybiBuZXcgcmkoYSwhMSxiKX1cbmZ1bmN0aW9uIHVpKGEsYixjLGQsZSl7c2koYyk/dm9pZCAwOkEoXCIyMDBcIik7dmFyIGY9Yy5fcmVhY3RSb290Q29udGFpbmVyO2lmKGYpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgZz1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1raShmLl9pbnRlcm5hbFJvb3QpO2cuY2FsbChhKX19bnVsbCE9YT9mLmxlZ2FjeV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcihhLGIsZSk6Zi5yZW5kZXIoYixlKX1lbHNle2Y9Yy5fcmVhY3RSb290Q29udGFpbmVyPXRpKGMsZCk7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBoPWU7ZT1mdW5jdGlvbigpe3ZhciBhPWtpKGYuX2ludGVybmFsUm9vdCk7aC5jYWxsKGEpfX1kaShmdW5jdGlvbigpe251bGwhPWE/Zi5sZWdhY3lfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIoYSxiLGUpOmYucmVuZGVyKGIsZSl9KX1yZXR1cm4ga2koZi5faW50ZXJuYWxSb290KX1cbmZ1bmN0aW9uIHZpKGEsYil7dmFyIGM9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGw7c2koYik/dm9pZCAwOkEoXCIyMDBcIik7cmV0dXJuIG9pKGEsYixudWxsLGMpfVxudmFyIHdpPXtjcmVhdGVQb3J0YWw6dmksZmluZERPTU5vZGU6ZnVuY3Rpb24oYSl7cmV0dXJuIG51bGw9PWE/bnVsbDoxPT09YS5ub2RlVHlwZT9hOmlpKGEpfSxoeWRyYXRlOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gdWkobnVsbCxhLGIsITAsYyl9LHJlbmRlcjpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIHVpKG51bGwsYSxiLCExLGMpfSx1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcjpmdW5jdGlvbihhLGIsYyxkKXtudWxsPT1hfHx2b2lkIDA9PT1hLl9yZWFjdEludGVybmFsRmliZXI/QShcIjM4XCIpOnZvaWQgMDtyZXR1cm4gdWkoYSxiLGMsITEsZCl9LHVubW91bnRDb21wb25lbnRBdE5vZGU6ZnVuY3Rpb24oYSl7c2koYSk/dm9pZCAwOkEoXCI0MFwiKTtyZXR1cm4gYS5fcmVhY3RSb290Q29udGFpbmVyPyhkaShmdW5jdGlvbigpe3VpKG51bGwsbnVsbCxhLCExLGZ1bmN0aW9uKCl7YS5fcmVhY3RSb290Q29udGFpbmVyPW51bGx9KX0pLCEwKTohMX0sdW5zdGFibGVfY3JlYXRlUG9ydGFsOmZ1bmN0aW9uKCl7cmV0dXJuIHZpLmFwcGx5KHZvaWQgMCxcbmFyZ3VtZW50cyl9LHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzOmNpLHVuc3RhYmxlX2RlZmVycmVkVXBkYXRlczpJaCx1bnN0YWJsZV9pbnRlcmFjdGl2ZVVwZGF0ZXM6ZmksZmx1c2hTeW5jOmVpLHVuc3RhYmxlX2ZsdXNoQ29udHJvbGxlZDpnaSxfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDp7RXZlbnRQbHVnaW5IdWI6S2EsRXZlbnRQbHVnaW5SZWdpc3RyeTp2YSxFdmVudFByb3BhZ2F0b3JzOiRhLFJlYWN0Q29udHJvbGxlZENvbXBvbmVudDpSYixSZWFjdERPTUNvbXBvbmVudFRyZWU6UWEsUmVhY3RET01FdmVudExpc3RlbmVyOk9kfSx1bnN0YWJsZV9jcmVhdGVSb290OmZ1bmN0aW9uKGEsYil7cmV0dXJuIG5ldyByaShhLCEwLG51bGwhPWImJiEwPT09Yi5oeWRyYXRlKX19O2xpKHtmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTpOYSxidW5kbGVUeXBlOjAsdmVyc2lvbjpcIjE2LjQuMlwiLHJlbmRlcmVyUGFja2FnZU5hbWU6XCJyZWFjdC1kb21cIn0pO1xudmFyIEJpPXtkZWZhdWx0OndpfSxDaT1CaSYmd2l8fEJpO21vZHVsZS5leHBvcnRzPUNpLmRlZmF1bHQ/Q2kuZGVmYXVsdDpDaTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGNhblVzZURPTSA9ICEhKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5kb2N1bWVudCAmJiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5cbi8qKlxuICogU2ltcGxlLCBsaWdodHdlaWdodCBtb2R1bGUgYXNzaXN0aW5nIHdpdGggdGhlIGRldGVjdGlvbiBhbmQgY29udGV4dCBvZlxuICogV29ya2VyLiBIZWxwcyBhdm9pZCBjaXJjdWxhciBkZXBlbmRlbmNpZXMgYW5kIGFsbG93cyBjb2RlIHRvIHJlYXNvbiBhYm91dFxuICogd2hldGhlciBvciBub3QgdGhleSBhcmUgaW4gYSBXb3JrZXIsIGV2ZW4gaWYgdGhleSBuZXZlciBpbmNsdWRlIHRoZSBtYWluXG4gKiBgUmVhY3RXb3JrZXJgIGRlcGVuZGVuY3kuXG4gKi9cbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHtcblxuICBjYW5Vc2VET006IGNhblVzZURPTSxcblxuICBjYW5Vc2VXb3JrZXJzOiB0eXBlb2YgV29ya2VyICE9PSAndW5kZWZpbmVkJyxcblxuICBjYW5Vc2VFdmVudExpc3RlbmVyczogY2FuVXNlRE9NICYmICEhKHdpbmRvdy5hZGRFdmVudExpc3RlbmVyIHx8IHdpbmRvdy5hdHRhY2hFdmVudCksXG5cbiAgY2FuVXNlVmlld3BvcnQ6IGNhblVzZURPTSAmJiAhIXdpbmRvdy5zY3JlZW4sXG5cbiAgaXNJbldvcmtlcjogIWNhblVzZURPTSAvLyBGb3Igbm93LCB0aGlzIGlzIHRydWUgLSBtaWdodCBjaGFuZ2UgaW4gdGhlIGZ1dHVyZS5cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFeGVjdXRpb25FbnZpcm9ubWVudDsiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBmYi13d3cvdHlwZW9mLXVuZGVmaW5lZCAqL1xuXG4vKipcbiAqIFNhbWUgYXMgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBidXQgd3JhcHMgaW4gYSB0cnktY2F0Y2ggYmxvY2suIEluIElFIGl0IGlzXG4gKiBub3Qgc2FmZSB0byBjYWxsIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgaWYgdGhlcmUgaXMgbm90aGluZyBmb2N1c2VkLlxuICpcbiAqIFRoZSBhY3RpdmVFbGVtZW50IHdpbGwgYmUgbnVsbCBvbmx5IGlmIHRoZSBkb2N1bWVudCBvciBkb2N1bWVudCBib2R5IGlzIG5vdFxuICogeWV0IGRlZmluZWQuXG4gKlxuICogQHBhcmFtIHs/RE9NRG9jdW1lbnR9IGRvYyBEZWZhdWx0cyB0byBjdXJyZW50IGRvY3VtZW50LlxuICogQHJldHVybiB7P0RPTUVsZW1lbnR9XG4gKi9cbmZ1bmN0aW9uIGdldEFjdGl2ZUVsZW1lbnQoZG9jKSAvKj9ET01FbGVtZW50Ki97XG4gIGRvYyA9IGRvYyB8fCAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyA/IGRvY3VtZW50IDogdW5kZWZpbmVkKTtcbiAgaWYgKHR5cGVvZiBkb2MgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgdHJ5IHtcbiAgICByZXR1cm4gZG9jLmFjdGl2ZUVsZW1lbnQgfHwgZG9jLmJvZHk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZG9jLmJvZHk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRBY3RpdmVFbGVtZW50OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqIFxuICovXG5cbi8qZXNsaW50LWRpc2FibGUgbm8tc2VsZi1jb21wYXJlICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBpbmxpbmVkIE9iamVjdC5pcyBwb2x5ZmlsbCB0byBhdm9pZCByZXF1aXJpbmcgY29uc3VtZXJzIHNoaXAgdGhlaXIgb3duXG4gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvaXNcbiAqL1xuZnVuY3Rpb24gaXMoeCwgeSkge1xuICAvLyBTYW1lVmFsdWUgYWxnb3JpdGhtXG4gIGlmICh4ID09PSB5KSB7XG4gICAgLy8gU3RlcHMgMS01LCA3LTEwXG4gICAgLy8gU3RlcHMgNi5iLTYuZTogKzAgIT0gLTBcbiAgICAvLyBBZGRlZCB0aGUgbm9uemVybyB5IGNoZWNrIHRvIG1ha2UgRmxvdyBoYXBweSwgYnV0IGl0IGlzIHJlZHVuZGFudFxuICAgIHJldHVybiB4ICE9PSAwIHx8IHkgIT09IDAgfHwgMSAvIHggPT09IDEgLyB5O1xuICB9IGVsc2Uge1xuICAgIC8vIFN0ZXAgNi5hOiBOYU4gPT0gTmFOXG4gICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgfVxufVxuXG4vKipcbiAqIFBlcmZvcm1zIGVxdWFsaXR5IGJ5IGl0ZXJhdGluZyB0aHJvdWdoIGtleXMgb24gYW4gb2JqZWN0IGFuZCByZXR1cm5pbmcgZmFsc2VcbiAqIHdoZW4gYW55IGtleSBoYXMgdmFsdWVzIHdoaWNoIGFyZSBub3Qgc3RyaWN0bHkgZXF1YWwgYmV0d2VlbiB0aGUgYXJndW1lbnRzLlxuICogUmV0dXJucyB0cnVlIHdoZW4gdGhlIHZhbHVlcyBvZiBhbGwga2V5cyBhcmUgc3RyaWN0bHkgZXF1YWwuXG4gKi9cbmZ1bmN0aW9uIHNoYWxsb3dFcXVhbChvYmpBLCBvYmpCKSB7XG4gIGlmIChpcyhvYmpBLCBvYmpCKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBvYmpBICE9PSAnb2JqZWN0JyB8fCBvYmpBID09PSBudWxsIHx8IHR5cGVvZiBvYmpCICE9PSAnb2JqZWN0JyB8fCBvYmpCID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGtleXNBID0gT2JqZWN0LmtleXMob2JqQSk7XG4gIHZhciBrZXlzQiA9IE9iamVjdC5rZXlzKG9iakIpO1xuXG4gIGlmIChrZXlzQS5sZW5ndGggIT09IGtleXNCLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIFRlc3QgZm9yIEEncyBrZXlzIGRpZmZlcmVudCBmcm9tIEIuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5c0EubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoIWhhc093blByb3BlcnR5LmNhbGwob2JqQiwga2V5c0FbaV0pIHx8ICFpcyhvYmpBW2tleXNBW2ldXSwgb2JqQltrZXlzQVtpXV0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hhbGxvd0VxdWFsOyIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqL1xuXG52YXIgaXNUZXh0Tm9kZSA9IHJlcXVpcmUoJy4vaXNUZXh0Tm9kZScpO1xuXG4vKmVzbGludC1kaXNhYmxlIG5vLWJpdHdpc2UgKi9cblxuLyoqXG4gKiBDaGVja3MgaWYgYSBnaXZlbiBET00gbm9kZSBjb250YWlucyBvciBpcyBhbm90aGVyIERPTSBub2RlLlxuICovXG5mdW5jdGlvbiBjb250YWluc05vZGUob3V0ZXJOb2RlLCBpbm5lck5vZGUpIHtcbiAgaWYgKCFvdXRlck5vZGUgfHwgIWlubmVyTm9kZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSBlbHNlIGlmIChvdXRlck5vZGUgPT09IGlubmVyTm9kZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2UgaWYgKGlzVGV4dE5vZGUob3V0ZXJOb2RlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSBlbHNlIGlmIChpc1RleHROb2RlKGlubmVyTm9kZSkpIHtcbiAgICByZXR1cm4gY29udGFpbnNOb2RlKG91dGVyTm9kZSwgaW5uZXJOb2RlLnBhcmVudE5vZGUpO1xuICB9IGVsc2UgaWYgKCdjb250YWlucycgaW4gb3V0ZXJOb2RlKSB7XG4gICAgcmV0dXJuIG91dGVyTm9kZS5jb250YWlucyhpbm5lck5vZGUpO1xuICB9IGVsc2UgaWYgKG91dGVyTm9kZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbikge1xuICAgIHJldHVybiAhIShvdXRlck5vZGUuY29tcGFyZURvY3VtZW50UG9zaXRpb24oaW5uZXJOb2RlKSAmIDE2KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjb250YWluc05vZGU7IiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxudmFyIGlzTm9kZSA9IHJlcXVpcmUoJy4vaXNOb2RlJyk7XG5cbi8qKlxuICogQHBhcmFtIHsqfSBvYmplY3QgVGhlIG9iamVjdCB0byBjaGVjay5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgb3Igbm90IHRoZSBvYmplY3QgaXMgYSBET00gdGV4dCBub2RlLlxuICovXG5mdW5jdGlvbiBpc1RleHROb2RlKG9iamVjdCkge1xuICByZXR1cm4gaXNOb2RlKG9iamVjdCkgJiYgb2JqZWN0Lm5vZGVUeXBlID09IDM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNUZXh0Tm9kZTsiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4vKipcbiAqIEBwYXJhbSB7Kn0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY2hlY2suXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIG9yIG5vdCB0aGUgb2JqZWN0IGlzIGEgRE9NIG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGlzTm9kZShvYmplY3QpIHtcbiAgdmFyIGRvYyA9IG9iamVjdCA/IG9iamVjdC5vd25lckRvY3VtZW50IHx8IG9iamVjdCA6IGRvY3VtZW50O1xuICB2YXIgZGVmYXVsdFZpZXcgPSBkb2MuZGVmYXVsdFZpZXcgfHwgd2luZG93O1xuICByZXR1cm4gISEob2JqZWN0ICYmICh0eXBlb2YgZGVmYXVsdFZpZXcuTm9kZSA9PT0gJ2Z1bmN0aW9uJyA/IG9iamVjdCBpbnN0YW5jZW9mIGRlZmF1bHRWaWV3Lk5vZGUgOiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJiB0eXBlb2Ygb2JqZWN0Lm5vZGVUeXBlID09PSAnbnVtYmVyJyAmJiB0eXBlb2Ygb2JqZWN0Lm5vZGVOYW1lID09PSAnc3RyaW5nJykpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzTm9kZTsiLCJleHBvcnQgY29uc3Qgc3R5bGVzID0ge1xyXG4gIGgxOiB7XHJcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICdibHVlJ1xyXG4gIH0sXHJcbiAgZm9ybToge1xyXG4gICAgcGFkZGluZzogMTJcclxuICB9LFxyXG4gIGxvZzoge1xyXG4gICAgYm9yZGVyOiAnMXB4IHNvbGlkIHNpbHZlcidcclxuICB9LFxyXG4gIG5hbWU6IHtcclxuICAgIGJvcmRlcjogJzFweCBzb2xpZCBzaWx2ZXInXHJcbiAgfSxcclxuICBtc2c6IHtcclxuICAgIGJvcmRlcjogJzFweCBzb2xpZCBzaWx2ZXInXHJcbiAgfVxyXG59O1xyXG4iLCJcbi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgdXJsID0gcmVxdWlyZSgnLi91cmwnKTtcbnZhciBwYXJzZXIgPSByZXF1aXJlKCdzb2NrZXQuaW8tcGFyc2VyJyk7XG52YXIgTWFuYWdlciA9IHJlcXVpcmUoJy4vbWFuYWdlcicpO1xudmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnc29ja2V0LmlvLWNsaWVudCcpO1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGxvb2t1cDtcblxuLyoqXG4gKiBNYW5hZ2VycyBjYWNoZS5cbiAqL1xuXG52YXIgY2FjaGUgPSBleHBvcnRzLm1hbmFnZXJzID0ge307XG5cbi8qKlxuICogTG9va3MgdXAgYW4gZXhpc3RpbmcgYE1hbmFnZXJgIGZvciBtdWx0aXBsZXhpbmcuXG4gKiBJZiB0aGUgdXNlciBzdW1tb25zOlxuICpcbiAqICAgYGlvKCdodHRwOi8vbG9jYWxob3N0L2EnKTtgXG4gKiAgIGBpbygnaHR0cDovL2xvY2FsaG9zdC9iJyk7YFxuICpcbiAqIFdlIHJldXNlIHRoZSBleGlzdGluZyBpbnN0YW5jZSBiYXNlZCBvbiBzYW1lIHNjaGVtZS9wb3J0L2hvc3QsXG4gKiBhbmQgd2UgaW5pdGlhbGl6ZSBzb2NrZXRzIGZvciBlYWNoIG5hbWVzcGFjZS5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGxvb2t1cCAodXJpLCBvcHRzKSB7XG4gIGlmICh0eXBlb2YgdXJpID09PSAnb2JqZWN0Jykge1xuICAgIG9wdHMgPSB1cmk7XG4gICAgdXJpID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgb3B0cyA9IG9wdHMgfHwge307XG5cbiAgdmFyIHBhcnNlZCA9IHVybCh1cmkpO1xuICB2YXIgc291cmNlID0gcGFyc2VkLnNvdXJjZTtcbiAgdmFyIGlkID0gcGFyc2VkLmlkO1xuICB2YXIgcGF0aCA9IHBhcnNlZC5wYXRoO1xuICB2YXIgc2FtZU5hbWVzcGFjZSA9IGNhY2hlW2lkXSAmJiBwYXRoIGluIGNhY2hlW2lkXS5uc3BzO1xuICB2YXIgbmV3Q29ubmVjdGlvbiA9IG9wdHMuZm9yY2VOZXcgfHwgb3B0c1snZm9yY2UgbmV3IGNvbm5lY3Rpb24nXSB8fFxuICAgICAgICAgICAgICAgICAgICAgIGZhbHNlID09PSBvcHRzLm11bHRpcGxleCB8fCBzYW1lTmFtZXNwYWNlO1xuXG4gIHZhciBpbztcblxuICBpZiAobmV3Q29ubmVjdGlvbikge1xuICAgIGRlYnVnKCdpZ25vcmluZyBzb2NrZXQgY2FjaGUgZm9yICVzJywgc291cmNlKTtcbiAgICBpbyA9IE1hbmFnZXIoc291cmNlLCBvcHRzKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoIWNhY2hlW2lkXSkge1xuICAgICAgZGVidWcoJ25ldyBpbyBpbnN0YW5jZSBmb3IgJXMnLCBzb3VyY2UpO1xuICAgICAgY2FjaGVbaWRdID0gTWFuYWdlcihzb3VyY2UsIG9wdHMpO1xuICAgIH1cbiAgICBpbyA9IGNhY2hlW2lkXTtcbiAgfVxuICBpZiAocGFyc2VkLnF1ZXJ5ICYmICFvcHRzLnF1ZXJ5KSB7XG4gICAgb3B0cy5xdWVyeSA9IHBhcnNlZC5xdWVyeTtcbiAgfVxuICByZXR1cm4gaW8uc29ja2V0KHBhcnNlZC5wYXRoLCBvcHRzKTtcbn1cblxuLyoqXG4gKiBQcm90b2NvbCB2ZXJzaW9uLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5wcm90b2NvbCA9IHBhcnNlci5wcm90b2NvbDtcblxuLyoqXG4gKiBgY29ubmVjdGAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHVyaVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLmNvbm5lY3QgPSBsb29rdXA7XG5cbi8qKlxuICogRXhwb3NlIGNvbnN0cnVjdG9ycyBmb3Igc3RhbmRhbG9uZSBidWlsZC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuTWFuYWdlciA9IHJlcXVpcmUoJy4vbWFuYWdlcicpO1xuZXhwb3J0cy5Tb2NrZXQgPSByZXF1aXJlKCcuL3NvY2tldCcpO1xuIiwiXG4vKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxudmFyIHBhcnNldXJpID0gcmVxdWlyZSgncGFyc2V1cmknKTtcbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ3NvY2tldC5pby1jbGllbnQ6dXJsJyk7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSB1cmw7XG5cbi8qKlxuICogVVJMIHBhcnNlci5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdXJsXG4gKiBAcGFyYW0ge09iamVjdH0gQW4gb2JqZWN0IG1lYW50IHRvIG1pbWljIHdpbmRvdy5sb2NhdGlvbi5cbiAqICAgICAgICAgICAgICAgICBEZWZhdWx0cyB0byB3aW5kb3cubG9jYXRpb24uXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIHVybCAodXJpLCBsb2MpIHtcbiAgdmFyIG9iaiA9IHVyaTtcblxuICAvLyBkZWZhdWx0IHRvIHdpbmRvdy5sb2NhdGlvblxuICBsb2MgPSBsb2MgfHwgZ2xvYmFsLmxvY2F0aW9uO1xuICBpZiAobnVsbCA9PSB1cmkpIHVyaSA9IGxvYy5wcm90b2NvbCArICcvLycgKyBsb2MuaG9zdDtcblxuICAvLyByZWxhdGl2ZSBwYXRoIHN1cHBvcnRcbiAgaWYgKCdzdHJpbmcnID09PSB0eXBlb2YgdXJpKSB7XG4gICAgaWYgKCcvJyA9PT0gdXJpLmNoYXJBdCgwKSkge1xuICAgICAgaWYgKCcvJyA9PT0gdXJpLmNoYXJBdCgxKSkge1xuICAgICAgICB1cmkgPSBsb2MucHJvdG9jb2wgKyB1cmk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB1cmkgPSBsb2MuaG9zdCArIHVyaTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIS9eKGh0dHBzP3x3c3M/KTpcXC9cXC8vLnRlc3QodXJpKSkge1xuICAgICAgZGVidWcoJ3Byb3RvY29sLWxlc3MgdXJsICVzJywgdXJpKTtcbiAgICAgIGlmICgndW5kZWZpbmVkJyAhPT0gdHlwZW9mIGxvYykge1xuICAgICAgICB1cmkgPSBsb2MucHJvdG9jb2wgKyAnLy8nICsgdXJpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdXJpID0gJ2h0dHBzOi8vJyArIHVyaTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBwYXJzZVxuICAgIGRlYnVnKCdwYXJzZSAlcycsIHVyaSk7XG4gICAgb2JqID0gcGFyc2V1cmkodXJpKTtcbiAgfVxuXG4gIC8vIG1ha2Ugc3VyZSB3ZSB0cmVhdCBgbG9jYWxob3N0OjgwYCBhbmQgYGxvY2FsaG9zdGAgZXF1YWxseVxuICBpZiAoIW9iai5wb3J0KSB7XG4gICAgaWYgKC9eKGh0dHB8d3MpJC8udGVzdChvYmoucHJvdG9jb2wpKSB7XG4gICAgICBvYmoucG9ydCA9ICc4MCc7XG4gICAgfSBlbHNlIGlmICgvXihodHRwfHdzKXMkLy50ZXN0KG9iai5wcm90b2NvbCkpIHtcbiAgICAgIG9iai5wb3J0ID0gJzQ0Myc7XG4gICAgfVxuICB9XG5cbiAgb2JqLnBhdGggPSBvYmoucGF0aCB8fCAnLyc7XG5cbiAgdmFyIGlwdjYgPSBvYmouaG9zdC5pbmRleE9mKCc6JykgIT09IC0xO1xuICB2YXIgaG9zdCA9IGlwdjYgPyAnWycgKyBvYmouaG9zdCArICddJyA6IG9iai5ob3N0O1xuXG4gIC8vIGRlZmluZSB1bmlxdWUgaWRcbiAgb2JqLmlkID0gb2JqLnByb3RvY29sICsgJzovLycgKyBob3N0ICsgJzonICsgb2JqLnBvcnQ7XG4gIC8vIGRlZmluZSBocmVmXG4gIG9iai5ocmVmID0gb2JqLnByb3RvY29sICsgJzovLycgKyBob3N0ICsgKGxvYyAmJiBsb2MucG9ydCA9PT0gb2JqLnBvcnQgPyAnJyA6ICgnOicgKyBvYmoucG9ydCkpO1xuXG4gIHJldHVybiBvYmo7XG59XG4iLCJcbi8qKlxuICogVGhpcyBpcyB0aGUgY29tbW9uIGxvZ2ljIGZvciBib3RoIHRoZSBOb2RlLmpzIGFuZCB3ZWIgYnJvd3NlclxuICogaW1wbGVtZW50YXRpb25zIG9mIGBkZWJ1ZygpYC5cbiAqXG4gKiBFeHBvc2UgYGRlYnVnKClgIGFzIHRoZSBtb2R1bGUuXG4gKi9cblxuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gY3JlYXRlRGVidWcuZGVidWcgPSBjcmVhdGVEZWJ1Z1snZGVmYXVsdCddID0gY3JlYXRlRGVidWc7XG5leHBvcnRzLmNvZXJjZSA9IGNvZXJjZTtcbmV4cG9ydHMuZGlzYWJsZSA9IGRpc2FibGU7XG5leHBvcnRzLmVuYWJsZSA9IGVuYWJsZTtcbmV4cG9ydHMuZW5hYmxlZCA9IGVuYWJsZWQ7XG5leHBvcnRzLmh1bWFuaXplID0gcmVxdWlyZSgnbXMnKTtcblxuLyoqXG4gKiBBY3RpdmUgYGRlYnVnYCBpbnN0YW5jZXMuXG4gKi9cbmV4cG9ydHMuaW5zdGFuY2VzID0gW107XG5cbi8qKlxuICogVGhlIGN1cnJlbnRseSBhY3RpdmUgZGVidWcgbW9kZSBuYW1lcywgYW5kIG5hbWVzIHRvIHNraXAuXG4gKi9cblxuZXhwb3J0cy5uYW1lcyA9IFtdO1xuZXhwb3J0cy5za2lwcyA9IFtdO1xuXG4vKipcbiAqIE1hcCBvZiBzcGVjaWFsIFwiJW5cIiBoYW5kbGluZyBmdW5jdGlvbnMsIGZvciB0aGUgZGVidWcgXCJmb3JtYXRcIiBhcmd1bWVudC5cbiAqXG4gKiBWYWxpZCBrZXkgbmFtZXMgYXJlIGEgc2luZ2xlLCBsb3dlciBvciB1cHBlci1jYXNlIGxldHRlciwgaS5lLiBcIm5cIiBhbmQgXCJOXCIuXG4gKi9cblxuZXhwb3J0cy5mb3JtYXR0ZXJzID0ge307XG5cbi8qKlxuICogU2VsZWN0IGEgY29sb3IuXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlXG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBzZWxlY3RDb2xvcihuYW1lc3BhY2UpIHtcbiAgdmFyIGhhc2ggPSAwLCBpO1xuXG4gIGZvciAoaSBpbiBuYW1lc3BhY2UpIHtcbiAgICBoYXNoICA9ICgoaGFzaCA8PCA1KSAtIGhhc2gpICsgbmFtZXNwYWNlLmNoYXJDb2RlQXQoaSk7XG4gICAgaGFzaCB8PSAwOyAvLyBDb252ZXJ0IHRvIDMyYml0IGludGVnZXJcbiAgfVxuXG4gIHJldHVybiBleHBvcnRzLmNvbG9yc1tNYXRoLmFicyhoYXNoKSAlIGV4cG9ydHMuY29sb3JzLmxlbmd0aF07XG59XG5cbi8qKlxuICogQ3JlYXRlIGEgZGVidWdnZXIgd2l0aCB0aGUgZ2l2ZW4gYG5hbWVzcGFjZWAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZVxuICogQHJldHVybiB7RnVuY3Rpb259XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZURlYnVnKG5hbWVzcGFjZSkge1xuXG4gIHZhciBwcmV2VGltZTtcblxuICBmdW5jdGlvbiBkZWJ1ZygpIHtcbiAgICAvLyBkaXNhYmxlZD9cbiAgICBpZiAoIWRlYnVnLmVuYWJsZWQpIHJldHVybjtcblxuICAgIHZhciBzZWxmID0gZGVidWc7XG5cbiAgICAvLyBzZXQgYGRpZmZgIHRpbWVzdGFtcFxuICAgIHZhciBjdXJyID0gK25ldyBEYXRlKCk7XG4gICAgdmFyIG1zID0gY3VyciAtIChwcmV2VGltZSB8fCBjdXJyKTtcbiAgICBzZWxmLmRpZmYgPSBtcztcbiAgICBzZWxmLnByZXYgPSBwcmV2VGltZTtcbiAgICBzZWxmLmN1cnIgPSBjdXJyO1xuICAgIHByZXZUaW1lID0gY3VycjtcblxuICAgIC8vIHR1cm4gdGhlIGBhcmd1bWVudHNgIGludG8gYSBwcm9wZXIgQXJyYXlcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuXG4gICAgYXJnc1swXSA9IGV4cG9ydHMuY29lcmNlKGFyZ3NbMF0pO1xuXG4gICAgaWYgKCdzdHJpbmcnICE9PSB0eXBlb2YgYXJnc1swXSkge1xuICAgICAgLy8gYW55dGhpbmcgZWxzZSBsZXQncyBpbnNwZWN0IHdpdGggJU9cbiAgICAgIGFyZ3MudW5zaGlmdCgnJU8nKTtcbiAgICB9XG5cbiAgICAvLyBhcHBseSBhbnkgYGZvcm1hdHRlcnNgIHRyYW5zZm9ybWF0aW9uc1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgYXJnc1swXSA9IGFyZ3NbMF0ucmVwbGFjZSgvJShbYS16QS1aJV0pL2csIGZ1bmN0aW9uKG1hdGNoLCBmb3JtYXQpIHtcbiAgICAgIC8vIGlmIHdlIGVuY291bnRlciBhbiBlc2NhcGVkICUgdGhlbiBkb24ndCBpbmNyZWFzZSB0aGUgYXJyYXkgaW5kZXhcbiAgICAgIGlmIChtYXRjaCA9PT0gJyUlJykgcmV0dXJuIG1hdGNoO1xuICAgICAgaW5kZXgrKztcbiAgICAgIHZhciBmb3JtYXR0ZXIgPSBleHBvcnRzLmZvcm1hdHRlcnNbZm9ybWF0XTtcbiAgICAgIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2YgZm9ybWF0dGVyKSB7XG4gICAgICAgIHZhciB2YWwgPSBhcmdzW2luZGV4XTtcbiAgICAgICAgbWF0Y2ggPSBmb3JtYXR0ZXIuY2FsbChzZWxmLCB2YWwpO1xuXG4gICAgICAgIC8vIG5vdyB3ZSBuZWVkIHRvIHJlbW92ZSBgYXJnc1tpbmRleF1gIHNpbmNlIGl0J3MgaW5saW5lZCBpbiB0aGUgYGZvcm1hdGBcbiAgICAgICAgYXJncy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICBpbmRleC0tO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1hdGNoO1xuICAgIH0pO1xuXG4gICAgLy8gYXBwbHkgZW52LXNwZWNpZmljIGZvcm1hdHRpbmcgKGNvbG9ycywgZXRjLilcbiAgICBleHBvcnRzLmZvcm1hdEFyZ3MuY2FsbChzZWxmLCBhcmdzKTtcblxuICAgIHZhciBsb2dGbiA9IGRlYnVnLmxvZyB8fCBleHBvcnRzLmxvZyB8fCBjb25zb2xlLmxvZy5iaW5kKGNvbnNvbGUpO1xuICAgIGxvZ0ZuLmFwcGx5KHNlbGYsIGFyZ3MpO1xuICB9XG5cbiAgZGVidWcubmFtZXNwYWNlID0gbmFtZXNwYWNlO1xuICBkZWJ1Zy5lbmFibGVkID0gZXhwb3J0cy5lbmFibGVkKG5hbWVzcGFjZSk7XG4gIGRlYnVnLnVzZUNvbG9ycyA9IGV4cG9ydHMudXNlQ29sb3JzKCk7XG4gIGRlYnVnLmNvbG9yID0gc2VsZWN0Q29sb3IobmFtZXNwYWNlKTtcbiAgZGVidWcuZGVzdHJveSA9IGRlc3Ryb3k7XG5cbiAgLy8gZW52LXNwZWNpZmljIGluaXRpYWxpemF0aW9uIGxvZ2ljIGZvciBkZWJ1ZyBpbnN0YW5jZXNcbiAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBleHBvcnRzLmluaXQpIHtcbiAgICBleHBvcnRzLmluaXQoZGVidWcpO1xuICB9XG5cbiAgZXhwb3J0cy5pbnN0YW5jZXMucHVzaChkZWJ1Zyk7XG5cbiAgcmV0dXJuIGRlYnVnO1xufVxuXG5mdW5jdGlvbiBkZXN0cm95ICgpIHtcbiAgdmFyIGluZGV4ID0gZXhwb3J0cy5pbnN0YW5jZXMuaW5kZXhPZih0aGlzKTtcbiAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgIGV4cG9ydHMuaW5zdGFuY2VzLnNwbGljZShpbmRleCwgMSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbi8qKlxuICogRW5hYmxlcyBhIGRlYnVnIG1vZGUgYnkgbmFtZXNwYWNlcy4gVGhpcyBjYW4gaW5jbHVkZSBtb2Rlc1xuICogc2VwYXJhdGVkIGJ5IGEgY29sb24gYW5kIHdpbGRjYXJkcy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBlbmFibGUobmFtZXNwYWNlcykge1xuICBleHBvcnRzLnNhdmUobmFtZXNwYWNlcyk7XG5cbiAgZXhwb3J0cy5uYW1lcyA9IFtdO1xuICBleHBvcnRzLnNraXBzID0gW107XG5cbiAgdmFyIGk7XG4gIHZhciBzcGxpdCA9ICh0eXBlb2YgbmFtZXNwYWNlcyA9PT0gJ3N0cmluZycgPyBuYW1lc3BhY2VzIDogJycpLnNwbGl0KC9bXFxzLF0rLyk7XG4gIHZhciBsZW4gPSBzcGxpdC5sZW5ndGg7XG5cbiAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKCFzcGxpdFtpXSkgY29udGludWU7IC8vIGlnbm9yZSBlbXB0eSBzdHJpbmdzXG4gICAgbmFtZXNwYWNlcyA9IHNwbGl0W2ldLnJlcGxhY2UoL1xcKi9nLCAnLio/Jyk7XG4gICAgaWYgKG5hbWVzcGFjZXNbMF0gPT09ICctJykge1xuICAgICAgZXhwb3J0cy5za2lwcy5wdXNoKG5ldyBSZWdFeHAoJ14nICsgbmFtZXNwYWNlcy5zdWJzdHIoMSkgKyAnJCcpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXhwb3J0cy5uYW1lcy5wdXNoKG5ldyBSZWdFeHAoJ14nICsgbmFtZXNwYWNlcyArICckJykpO1xuICAgIH1cbiAgfVxuXG4gIGZvciAoaSA9IDA7IGkgPCBleHBvcnRzLmluc3RhbmNlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpbnN0YW5jZSA9IGV4cG9ydHMuaW5zdGFuY2VzW2ldO1xuICAgIGluc3RhbmNlLmVuYWJsZWQgPSBleHBvcnRzLmVuYWJsZWQoaW5zdGFuY2UubmFtZXNwYWNlKTtcbiAgfVxufVxuXG4vKipcbiAqIERpc2FibGUgZGVidWcgb3V0cHV0LlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZGlzYWJsZSgpIHtcbiAgZXhwb3J0cy5lbmFibGUoJycpO1xufVxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gbW9kZSBuYW1lIGlzIGVuYWJsZWQsIGZhbHNlIG90aGVyd2lzZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZW5hYmxlZChuYW1lKSB7XG4gIGlmIChuYW1lW25hbWUubGVuZ3RoIC0gMV0gPT09ICcqJykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHZhciBpLCBsZW47XG4gIGZvciAoaSA9IDAsIGxlbiA9IGV4cG9ydHMuc2tpcHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoZXhwb3J0cy5za2lwc1tpXS50ZXN0KG5hbWUpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIGZvciAoaSA9IDAsIGxlbiA9IGV4cG9ydHMubmFtZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoZXhwb3J0cy5uYW1lc1tpXS50ZXN0KG5hbWUpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIENvZXJjZSBgdmFsYC5cbiAqXG4gKiBAcGFyYW0ge01peGVkfSB2YWxcbiAqIEByZXR1cm4ge01peGVkfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gY29lcmNlKHZhbCkge1xuICBpZiAodmFsIGluc3RhbmNlb2YgRXJyb3IpIHJldHVybiB2YWwuc3RhY2sgfHwgdmFsLm1lc3NhZ2U7XG4gIHJldHVybiB2YWw7XG59XG4iLCIvKipcbiAqIFRoaXMgaXMgdGhlIHdlYiBicm93c2VyIGltcGxlbWVudGF0aW9uIG9mIGBkZWJ1ZygpYC5cbiAqXG4gKiBFeHBvc2UgYGRlYnVnKClgIGFzIHRoZSBtb2R1bGUuXG4gKi9cblxuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9kZWJ1ZycpO1xuZXhwb3J0cy5sb2cgPSBsb2c7XG5leHBvcnRzLmZvcm1hdEFyZ3MgPSBmb3JtYXRBcmdzO1xuZXhwb3J0cy5zYXZlID0gc2F2ZTtcbmV4cG9ydHMubG9hZCA9IGxvYWQ7XG5leHBvcnRzLnVzZUNvbG9ycyA9IHVzZUNvbG9ycztcbmV4cG9ydHMuc3RvcmFnZSA9ICd1bmRlZmluZWQnICE9IHR5cGVvZiBjaHJvbWVcbiAgICAgICAgICAgICAgICYmICd1bmRlZmluZWQnICE9IHR5cGVvZiBjaHJvbWUuc3RvcmFnZVxuICAgICAgICAgICAgICAgICAgPyBjaHJvbWUuc3RvcmFnZS5sb2NhbFxuICAgICAgICAgICAgICAgICAgOiBsb2NhbHN0b3JhZ2UoKTtcblxuLyoqXG4gKiBDb2xvcnMuXG4gKi9cblxuZXhwb3J0cy5jb2xvcnMgPSBbXG4gICcjMDAwMENDJywgJyMwMDAwRkYnLCAnIzAwMzNDQycsICcjMDAzM0ZGJywgJyMwMDY2Q0MnLCAnIzAwNjZGRicsICcjMDA5OUNDJyxcbiAgJyMwMDk5RkYnLCAnIzAwQ0MwMCcsICcjMDBDQzMzJywgJyMwMENDNjYnLCAnIzAwQ0M5OScsICcjMDBDQ0NDJywgJyMwMENDRkYnLFxuICAnIzMzMDBDQycsICcjMzMwMEZGJywgJyMzMzMzQ0MnLCAnIzMzMzNGRicsICcjMzM2NkNDJywgJyMzMzY2RkYnLCAnIzMzOTlDQycsXG4gICcjMzM5OUZGJywgJyMzM0NDMDAnLCAnIzMzQ0MzMycsICcjMzNDQzY2JywgJyMzM0NDOTknLCAnIzMzQ0NDQycsICcjMzNDQ0ZGJyxcbiAgJyM2NjAwQ0MnLCAnIzY2MDBGRicsICcjNjYzM0NDJywgJyM2NjMzRkYnLCAnIzY2Q0MwMCcsICcjNjZDQzMzJywgJyM5OTAwQ0MnLFxuICAnIzk5MDBGRicsICcjOTkzM0NDJywgJyM5OTMzRkYnLCAnIzk5Q0MwMCcsICcjOTlDQzMzJywgJyNDQzAwMDAnLCAnI0NDMDAzMycsXG4gICcjQ0MwMDY2JywgJyNDQzAwOTknLCAnI0NDMDBDQycsICcjQ0MwMEZGJywgJyNDQzMzMDAnLCAnI0NDMzMzMycsICcjQ0MzMzY2JyxcbiAgJyNDQzMzOTknLCAnI0NDMzNDQycsICcjQ0MzM0ZGJywgJyNDQzY2MDAnLCAnI0NDNjYzMycsICcjQ0M5OTAwJywgJyNDQzk5MzMnLFxuICAnI0NDQ0MwMCcsICcjQ0NDQzMzJywgJyNGRjAwMDAnLCAnI0ZGMDAzMycsICcjRkYwMDY2JywgJyNGRjAwOTknLCAnI0ZGMDBDQycsXG4gICcjRkYwMEZGJywgJyNGRjMzMDAnLCAnI0ZGMzMzMycsICcjRkYzMzY2JywgJyNGRjMzOTknLCAnI0ZGMzNDQycsICcjRkYzM0ZGJyxcbiAgJyNGRjY2MDAnLCAnI0ZGNjYzMycsICcjRkY5OTAwJywgJyNGRjk5MzMnLCAnI0ZGQ0MwMCcsICcjRkZDQzMzJ1xuXTtcblxuLyoqXG4gKiBDdXJyZW50bHkgb25seSBXZWJLaXQtYmFzZWQgV2ViIEluc3BlY3RvcnMsIEZpcmVmb3ggPj0gdjMxLFxuICogYW5kIHRoZSBGaXJlYnVnIGV4dGVuc2lvbiAoYW55IEZpcmVmb3ggdmVyc2lvbikgYXJlIGtub3duXG4gKiB0byBzdXBwb3J0IFwiJWNcIiBDU1MgY3VzdG9taXphdGlvbnMuXG4gKlxuICogVE9ETzogYWRkIGEgYGxvY2FsU3RvcmFnZWAgdmFyaWFibGUgdG8gZXhwbGljaXRseSBlbmFibGUvZGlzYWJsZSBjb2xvcnNcbiAqL1xuXG5mdW5jdGlvbiB1c2VDb2xvcnMoKSB7XG4gIC8vIE5COiBJbiBhbiBFbGVjdHJvbiBwcmVsb2FkIHNjcmlwdCwgZG9jdW1lbnQgd2lsbCBiZSBkZWZpbmVkIGJ1dCBub3QgZnVsbHlcbiAgLy8gaW5pdGlhbGl6ZWQuIFNpbmNlIHdlIGtub3cgd2UncmUgaW4gQ2hyb21lLCB3ZSdsbCBqdXN0IGRldGVjdCB0aGlzIGNhc2VcbiAgLy8gZXhwbGljaXRseVxuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LnByb2Nlc3MgJiYgd2luZG93LnByb2Nlc3MudHlwZSA9PT0gJ3JlbmRlcmVyJykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLy8gSW50ZXJuZXQgRXhwbG9yZXIgYW5kIEVkZ2UgZG8gbm90IHN1cHBvcnQgY29sb3JzLlxuICBpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goLyhlZGdlfHRyaWRlbnQpXFwvKFxcZCspLykpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyBpcyB3ZWJraXQ/IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzE2NDU5NjA2LzM3Njc3M1xuICAvLyBkb2N1bWVudCBpcyB1bmRlZmluZWQgaW4gcmVhY3QtbmF0aXZlOiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QtbmF0aXZlL3B1bGwvMTYzMlxuICByZXR1cm4gKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZSAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUuV2Via2l0QXBwZWFyYW5jZSkgfHxcbiAgICAvLyBpcyBmaXJlYnVnPyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8zOTgxMjAvMzc2NzczXG4gICAgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5jb25zb2xlICYmICh3aW5kb3cuY29uc29sZS5maXJlYnVnIHx8ICh3aW5kb3cuY29uc29sZS5leGNlcHRpb24gJiYgd2luZG93LmNvbnNvbGUudGFibGUpKSkgfHxcbiAgICAvLyBpcyBmaXJlZm94ID49IHYzMT9cbiAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1Rvb2xzL1dlYl9Db25zb2xlI1N0eWxpbmdfbWVzc2FnZXNcbiAgICAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goL2ZpcmVmb3hcXC8oXFxkKykvKSAmJiBwYXJzZUludChSZWdFeHAuJDEsIDEwKSA+PSAzMSkgfHxcbiAgICAvLyBkb3VibGUgY2hlY2sgd2Via2l0IGluIHVzZXJBZ2VudCBqdXN0IGluIGNhc2Ugd2UgYXJlIGluIGEgd29ya2VyXG4gICAgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC9hcHBsZXdlYmtpdFxcLyhcXGQrKS8pKTtcbn1cblxuLyoqXG4gKiBNYXAgJWogdG8gYEpTT04uc3RyaW5naWZ5KClgLCBzaW5jZSBubyBXZWIgSW5zcGVjdG9ycyBkbyB0aGF0IGJ5IGRlZmF1bHQuXG4gKi9cblxuZXhwb3J0cy5mb3JtYXR0ZXJzLmogPSBmdW5jdGlvbih2KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHYpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICByZXR1cm4gJ1tVbmV4cGVjdGVkSlNPTlBhcnNlRXJyb3JdOiAnICsgZXJyLm1lc3NhZ2U7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBDb2xvcml6ZSBsb2cgYXJndW1lbnRzIGlmIGVuYWJsZWQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBmb3JtYXRBcmdzKGFyZ3MpIHtcbiAgdmFyIHVzZUNvbG9ycyA9IHRoaXMudXNlQ29sb3JzO1xuXG4gIGFyZ3NbMF0gPSAodXNlQ29sb3JzID8gJyVjJyA6ICcnKVxuICAgICsgdGhpcy5uYW1lc3BhY2VcbiAgICArICh1c2VDb2xvcnMgPyAnICVjJyA6ICcgJylcbiAgICArIGFyZ3NbMF1cbiAgICArICh1c2VDb2xvcnMgPyAnJWMgJyA6ICcgJylcbiAgICArICcrJyArIGV4cG9ydHMuaHVtYW5pemUodGhpcy5kaWZmKTtcblxuICBpZiAoIXVzZUNvbG9ycykgcmV0dXJuO1xuXG4gIHZhciBjID0gJ2NvbG9yOiAnICsgdGhpcy5jb2xvcjtcbiAgYXJncy5zcGxpY2UoMSwgMCwgYywgJ2NvbG9yOiBpbmhlcml0JylcblxuICAvLyB0aGUgZmluYWwgXCIlY1wiIGlzIHNvbWV3aGF0IHRyaWNreSwgYmVjYXVzZSB0aGVyZSBjb3VsZCBiZSBvdGhlclxuICAvLyBhcmd1bWVudHMgcGFzc2VkIGVpdGhlciBiZWZvcmUgb3IgYWZ0ZXIgdGhlICVjLCBzbyB3ZSBuZWVkIHRvXG4gIC8vIGZpZ3VyZSBvdXQgdGhlIGNvcnJlY3QgaW5kZXggdG8gaW5zZXJ0IHRoZSBDU1MgaW50b1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGFzdEMgPSAwO1xuICBhcmdzWzBdLnJlcGxhY2UoLyVbYS16QS1aJV0vZywgZnVuY3Rpb24obWF0Y2gpIHtcbiAgICBpZiAoJyUlJyA9PT0gbWF0Y2gpIHJldHVybjtcbiAgICBpbmRleCsrO1xuICAgIGlmICgnJWMnID09PSBtYXRjaCkge1xuICAgICAgLy8gd2Ugb25seSBhcmUgaW50ZXJlc3RlZCBpbiB0aGUgKmxhc3QqICVjXG4gICAgICAvLyAodGhlIHVzZXIgbWF5IGhhdmUgcHJvdmlkZWQgdGhlaXIgb3duKVxuICAgICAgbGFzdEMgPSBpbmRleDtcbiAgICB9XG4gIH0pO1xuXG4gIGFyZ3Muc3BsaWNlKGxhc3RDLCAwLCBjKTtcbn1cblxuLyoqXG4gKiBJbnZva2VzIGBjb25zb2xlLmxvZygpYCB3aGVuIGF2YWlsYWJsZS5cbiAqIE5vLW9wIHdoZW4gYGNvbnNvbGUubG9nYCBpcyBub3QgYSBcImZ1bmN0aW9uXCIuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBsb2coKSB7XG4gIC8vIHRoaXMgaGFja2VyeSBpcyByZXF1aXJlZCBmb3IgSUU4LzksIHdoZXJlXG4gIC8vIHRoZSBgY29uc29sZS5sb2dgIGZ1bmN0aW9uIGRvZXNuJ3QgaGF2ZSAnYXBwbHknXG4gIHJldHVybiAnb2JqZWN0JyA9PT0gdHlwZW9mIGNvbnNvbGVcbiAgICAmJiBjb25zb2xlLmxvZ1xuICAgICYmIEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseS5jYWxsKGNvbnNvbGUubG9nLCBjb25zb2xlLCBhcmd1bWVudHMpO1xufVxuXG4vKipcbiAqIFNhdmUgYG5hbWVzcGFjZXNgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBzYXZlKG5hbWVzcGFjZXMpIHtcbiAgdHJ5IHtcbiAgICBpZiAobnVsbCA9PSBuYW1lc3BhY2VzKSB7XG4gICAgICBleHBvcnRzLnN0b3JhZ2UucmVtb3ZlSXRlbSgnZGVidWcnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXhwb3J0cy5zdG9yYWdlLmRlYnVnID0gbmFtZXNwYWNlcztcbiAgICB9XG4gIH0gY2F0Y2goZSkge31cbn1cblxuLyoqXG4gKiBMb2FkIGBuYW1lc3BhY2VzYC5cbiAqXG4gKiBAcmV0dXJuIHtTdHJpbmd9IHJldHVybnMgdGhlIHByZXZpb3VzbHkgcGVyc2lzdGVkIGRlYnVnIG1vZGVzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBsb2FkKCkge1xuICB2YXIgcjtcbiAgdHJ5IHtcbiAgICByID0gZXhwb3J0cy5zdG9yYWdlLmRlYnVnO1xuICB9IGNhdGNoKGUpIHt9XG5cbiAgLy8gSWYgZGVidWcgaXNuJ3Qgc2V0IGluIExTLCBhbmQgd2UncmUgaW4gRWxlY3Ryb24sIHRyeSB0byBsb2FkICRERUJVR1xuICBpZiAoIXIgJiYgdHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmICdlbnYnIGluIHByb2Nlc3MpIHtcbiAgICByID0gcHJvY2Vzcy5lbnYuREVCVUc7XG4gIH1cblxuICByZXR1cm4gcjtcbn1cblxuLyoqXG4gKiBFbmFibGUgbmFtZXNwYWNlcyBsaXN0ZWQgaW4gYGxvY2FsU3RvcmFnZS5kZWJ1Z2AgaW5pdGlhbGx5LlxuICovXG5cbmV4cG9ydHMuZW5hYmxlKGxvYWQoKSk7XG5cbi8qKlxuICogTG9jYWxzdG9yYWdlIGF0dGVtcHRzIHRvIHJldHVybiB0aGUgbG9jYWxzdG9yYWdlLlxuICpcbiAqIFRoaXMgaXMgbmVjZXNzYXJ5IGJlY2F1c2Ugc2FmYXJpIHRocm93c1xuICogd2hlbiBhIHVzZXIgZGlzYWJsZXMgY29va2llcy9sb2NhbHN0b3JhZ2VcbiAqIGFuZCB5b3UgYXR0ZW1wdCB0byBhY2Nlc3MgaXQuXG4gKlxuICogQHJldHVybiB7TG9jYWxTdG9yYWdlfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gbG9jYWxzdG9yYWdlKCkge1xuICB0cnkge1xuICAgIHJldHVybiB3aW5kb3cubG9jYWxTdG9yYWdlO1xuICB9IGNhdGNoIChlKSB7fVxufVxuIiwiXG4vKipcbiAqIFRoaXMgaXMgdGhlIGNvbW1vbiBsb2dpYyBmb3IgYm90aCB0aGUgTm9kZS5qcyBhbmQgd2ViIGJyb3dzZXJcbiAqIGltcGxlbWVudGF0aW9ucyBvZiBgZGVidWcoKWAuXG4gKlxuICogRXhwb3NlIGBkZWJ1ZygpYCBhcyB0aGUgbW9kdWxlLlxuICovXG5cbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZURlYnVnLmRlYnVnID0gY3JlYXRlRGVidWdbJ2RlZmF1bHQnXSA9IGNyZWF0ZURlYnVnO1xuZXhwb3J0cy5jb2VyY2UgPSBjb2VyY2U7XG5leHBvcnRzLmRpc2FibGUgPSBkaXNhYmxlO1xuZXhwb3J0cy5lbmFibGUgPSBlbmFibGU7XG5leHBvcnRzLmVuYWJsZWQgPSBlbmFibGVkO1xuZXhwb3J0cy5odW1hbml6ZSA9IHJlcXVpcmUoJ21zJyk7XG5cbi8qKlxuICogQWN0aXZlIGBkZWJ1Z2AgaW5zdGFuY2VzLlxuICovXG5leHBvcnRzLmluc3RhbmNlcyA9IFtdO1xuXG4vKipcbiAqIFRoZSBjdXJyZW50bHkgYWN0aXZlIGRlYnVnIG1vZGUgbmFtZXMsIGFuZCBuYW1lcyB0byBza2lwLlxuICovXG5cbmV4cG9ydHMubmFtZXMgPSBbXTtcbmV4cG9ydHMuc2tpcHMgPSBbXTtcblxuLyoqXG4gKiBNYXAgb2Ygc3BlY2lhbCBcIiVuXCIgaGFuZGxpbmcgZnVuY3Rpb25zLCBmb3IgdGhlIGRlYnVnIFwiZm9ybWF0XCIgYXJndW1lbnQuXG4gKlxuICogVmFsaWQga2V5IG5hbWVzIGFyZSBhIHNpbmdsZSwgbG93ZXIgb3IgdXBwZXItY2FzZSBsZXR0ZXIsIGkuZS4gXCJuXCIgYW5kIFwiTlwiLlxuICovXG5cbmV4cG9ydHMuZm9ybWF0dGVycyA9IHt9O1xuXG4vKipcbiAqIFNlbGVjdCBhIGNvbG9yLlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZVxuICogQHJldHVybiB7TnVtYmVyfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gc2VsZWN0Q29sb3IobmFtZXNwYWNlKSB7XG4gIHZhciBoYXNoID0gMCwgaTtcblxuICBmb3IgKGkgaW4gbmFtZXNwYWNlKSB7XG4gICAgaGFzaCAgPSAoKGhhc2ggPDwgNSkgLSBoYXNoKSArIG5hbWVzcGFjZS5jaGFyQ29kZUF0KGkpO1xuICAgIGhhc2ggfD0gMDsgLy8gQ29udmVydCB0byAzMmJpdCBpbnRlZ2VyXG4gIH1cblxuICByZXR1cm4gZXhwb3J0cy5jb2xvcnNbTWF0aC5hYnMoaGFzaCkgJSBleHBvcnRzLmNvbG9ycy5sZW5ndGhdO1xufVxuXG4vKipcbiAqIENyZWF0ZSBhIGRlYnVnZ2VyIHdpdGggdGhlIGdpdmVuIGBuYW1lc3BhY2VgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VcbiAqIEByZXR1cm4ge0Z1bmN0aW9ufVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVEZWJ1ZyhuYW1lc3BhY2UpIHtcblxuICB2YXIgcHJldlRpbWU7XG5cbiAgZnVuY3Rpb24gZGVidWcoKSB7XG4gICAgLy8gZGlzYWJsZWQ/XG4gICAgaWYgKCFkZWJ1Zy5lbmFibGVkKSByZXR1cm47XG5cbiAgICB2YXIgc2VsZiA9IGRlYnVnO1xuXG4gICAgLy8gc2V0IGBkaWZmYCB0aW1lc3RhbXBcbiAgICB2YXIgY3VyciA9ICtuZXcgRGF0ZSgpO1xuICAgIHZhciBtcyA9IGN1cnIgLSAocHJldlRpbWUgfHwgY3Vycik7XG4gICAgc2VsZi5kaWZmID0gbXM7XG4gICAgc2VsZi5wcmV2ID0gcHJldlRpbWU7XG4gICAgc2VsZi5jdXJyID0gY3VycjtcbiAgICBwcmV2VGltZSA9IGN1cnI7XG5cbiAgICAvLyB0dXJuIHRoZSBgYXJndW1lbnRzYCBpbnRvIGEgcHJvcGVyIEFycmF5XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2ldO1xuICAgIH1cblxuICAgIGFyZ3NbMF0gPSBleHBvcnRzLmNvZXJjZShhcmdzWzBdKTtcblxuICAgIGlmICgnc3RyaW5nJyAhPT0gdHlwZW9mIGFyZ3NbMF0pIHtcbiAgICAgIC8vIGFueXRoaW5nIGVsc2UgbGV0J3MgaW5zcGVjdCB3aXRoICVPXG4gICAgICBhcmdzLnVuc2hpZnQoJyVPJyk7XG4gICAgfVxuXG4gICAgLy8gYXBwbHkgYW55IGBmb3JtYXR0ZXJzYCB0cmFuc2Zvcm1hdGlvbnNcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIGFyZ3NbMF0gPSBhcmdzWzBdLnJlcGxhY2UoLyUoW2EtekEtWiVdKS9nLCBmdW5jdGlvbihtYXRjaCwgZm9ybWF0KSB7XG4gICAgICAvLyBpZiB3ZSBlbmNvdW50ZXIgYW4gZXNjYXBlZCAlIHRoZW4gZG9uJ3QgaW5jcmVhc2UgdGhlIGFycmF5IGluZGV4XG4gICAgICBpZiAobWF0Y2ggPT09ICclJScpIHJldHVybiBtYXRjaDtcbiAgICAgIGluZGV4Kys7XG4gICAgICB2YXIgZm9ybWF0dGVyID0gZXhwb3J0cy5mb3JtYXR0ZXJzW2Zvcm1hdF07XG4gICAgICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGZvcm1hdHRlcikge1xuICAgICAgICB2YXIgdmFsID0gYXJnc1tpbmRleF07XG4gICAgICAgIG1hdGNoID0gZm9ybWF0dGVyLmNhbGwoc2VsZiwgdmFsKTtcblxuICAgICAgICAvLyBub3cgd2UgbmVlZCB0byByZW1vdmUgYGFyZ3NbaW5kZXhdYCBzaW5jZSBpdCdzIGlubGluZWQgaW4gdGhlIGBmb3JtYXRgXG4gICAgICAgIGFyZ3Muc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgaW5kZXgtLTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBtYXRjaDtcbiAgICB9KTtcblxuICAgIC8vIGFwcGx5IGVudi1zcGVjaWZpYyBmb3JtYXR0aW5nIChjb2xvcnMsIGV0Yy4pXG4gICAgZXhwb3J0cy5mb3JtYXRBcmdzLmNhbGwoc2VsZiwgYXJncyk7XG5cbiAgICB2YXIgbG9nRm4gPSBkZWJ1Zy5sb2cgfHwgZXhwb3J0cy5sb2cgfHwgY29uc29sZS5sb2cuYmluZChjb25zb2xlKTtcbiAgICBsb2dGbi5hcHBseShzZWxmLCBhcmdzKTtcbiAgfVxuXG4gIGRlYnVnLm5hbWVzcGFjZSA9IG5hbWVzcGFjZTtcbiAgZGVidWcuZW5hYmxlZCA9IGV4cG9ydHMuZW5hYmxlZChuYW1lc3BhY2UpO1xuICBkZWJ1Zy51c2VDb2xvcnMgPSBleHBvcnRzLnVzZUNvbG9ycygpO1xuICBkZWJ1Zy5jb2xvciA9IHNlbGVjdENvbG9yKG5hbWVzcGFjZSk7XG4gIGRlYnVnLmRlc3Ryb3kgPSBkZXN0cm95O1xuXG4gIC8vIGVudi1zcGVjaWZpYyBpbml0aWFsaXphdGlvbiBsb2dpYyBmb3IgZGVidWcgaW5zdGFuY2VzXG4gIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2YgZXhwb3J0cy5pbml0KSB7XG4gICAgZXhwb3J0cy5pbml0KGRlYnVnKTtcbiAgfVxuXG4gIGV4cG9ydHMuaW5zdGFuY2VzLnB1c2goZGVidWcpO1xuXG4gIHJldHVybiBkZWJ1Zztcbn1cblxuZnVuY3Rpb24gZGVzdHJveSAoKSB7XG4gIHZhciBpbmRleCA9IGV4cG9ydHMuaW5zdGFuY2VzLmluZGV4T2YodGhpcyk7XG4gIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICBleHBvcnRzLmluc3RhbmNlcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG4vKipcbiAqIEVuYWJsZXMgYSBkZWJ1ZyBtb2RlIGJ5IG5hbWVzcGFjZXMuIFRoaXMgY2FuIGluY2x1ZGUgbW9kZXNcbiAqIHNlcGFyYXRlZCBieSBhIGNvbG9uIGFuZCB3aWxkY2FyZHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZXNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZW5hYmxlKG5hbWVzcGFjZXMpIHtcbiAgZXhwb3J0cy5zYXZlKG5hbWVzcGFjZXMpO1xuXG4gIGV4cG9ydHMubmFtZXMgPSBbXTtcbiAgZXhwb3J0cy5za2lwcyA9IFtdO1xuXG4gIHZhciBpO1xuICB2YXIgc3BsaXQgPSAodHlwZW9mIG5hbWVzcGFjZXMgPT09ICdzdHJpbmcnID8gbmFtZXNwYWNlcyA6ICcnKS5zcGxpdCgvW1xccyxdKy8pO1xuICB2YXIgbGVuID0gc3BsaXQubGVuZ3RoO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIGlmICghc3BsaXRbaV0pIGNvbnRpbnVlOyAvLyBpZ25vcmUgZW1wdHkgc3RyaW5nc1xuICAgIG5hbWVzcGFjZXMgPSBzcGxpdFtpXS5yZXBsYWNlKC9cXCovZywgJy4qPycpO1xuICAgIGlmIChuYW1lc3BhY2VzWzBdID09PSAnLScpIHtcbiAgICAgIGV4cG9ydHMuc2tpcHMucHVzaChuZXcgUmVnRXhwKCdeJyArIG5hbWVzcGFjZXMuc3Vic3RyKDEpICsgJyQnKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4cG9ydHMubmFtZXMucHVzaChuZXcgUmVnRXhwKCdeJyArIG5hbWVzcGFjZXMgKyAnJCcpKTtcbiAgICB9XG4gIH1cblxuICBmb3IgKGkgPSAwOyBpIDwgZXhwb3J0cy5pbnN0YW5jZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaW5zdGFuY2UgPSBleHBvcnRzLmluc3RhbmNlc1tpXTtcbiAgICBpbnN0YW5jZS5lbmFibGVkID0gZXhwb3J0cy5lbmFibGVkKGluc3RhbmNlLm5hbWVzcGFjZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBEaXNhYmxlIGRlYnVnIG91dHB1dC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGRpc2FibGUoKSB7XG4gIGV4cG9ydHMuZW5hYmxlKCcnKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIG1vZGUgbmFtZSBpcyBlbmFibGVkLCBmYWxzZSBvdGhlcndpc2UuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGVuYWJsZWQobmFtZSkge1xuICBpZiAobmFtZVtuYW1lLmxlbmd0aCAtIDFdID09PSAnKicpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICB2YXIgaSwgbGVuO1xuICBmb3IgKGkgPSAwLCBsZW4gPSBleHBvcnRzLnNraXBzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKGV4cG9ydHMuc2tpcHNbaV0udGVzdChuYW1lKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICBmb3IgKGkgPSAwLCBsZW4gPSBleHBvcnRzLm5hbWVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKGV4cG9ydHMubmFtZXNbaV0udGVzdChuYW1lKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBDb2VyY2UgYHZhbGAuXG4gKlxuICogQHBhcmFtIHtNaXhlZH0gdmFsXG4gKiBAcmV0dXJuIHtNaXhlZH1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGNvZXJjZSh2YWwpIHtcbiAgaWYgKHZhbCBpbnN0YW5jZW9mIEVycm9yKSByZXR1cm4gdmFsLnN0YWNrIHx8IHZhbC5tZXNzYWdlO1xuICByZXR1cm4gdmFsO1xufVxuIiwiLypnbG9iYWwgQmxvYixGaWxlKi9cblxuLyoqXG4gKiBNb2R1bGUgcmVxdWlyZW1lbnRzXG4gKi9cblxudmFyIGlzQXJyYXkgPSByZXF1aXJlKCdpc2FycmF5Jyk7XG52YXIgaXNCdWYgPSByZXF1aXJlKCcuL2lzLWJ1ZmZlcicpO1xudmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbnZhciB3aXRoTmF0aXZlQmxvYiA9IHR5cGVvZiBnbG9iYWwuQmxvYiA9PT0gJ2Z1bmN0aW9uJyB8fCB0b1N0cmluZy5jYWxsKGdsb2JhbC5CbG9iKSA9PT0gJ1tvYmplY3QgQmxvYkNvbnN0cnVjdG9yXSc7XG52YXIgd2l0aE5hdGl2ZUZpbGUgPSB0eXBlb2YgZ2xvYmFsLkZpbGUgPT09ICdmdW5jdGlvbicgfHwgdG9TdHJpbmcuY2FsbChnbG9iYWwuRmlsZSkgPT09ICdbb2JqZWN0IEZpbGVDb25zdHJ1Y3Rvcl0nO1xuXG4vKipcbiAqIFJlcGxhY2VzIGV2ZXJ5IEJ1ZmZlciB8IEFycmF5QnVmZmVyIGluIHBhY2tldCB3aXRoIGEgbnVtYmVyZWQgcGxhY2Vob2xkZXIuXG4gKiBBbnl0aGluZyB3aXRoIGJsb2JzIG9yIGZpbGVzIHNob3VsZCBiZSBmZWQgdGhyb3VnaCByZW1vdmVCbG9icyBiZWZvcmUgY29taW5nXG4gKiBoZXJlLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXQgLSBzb2NrZXQuaW8gZXZlbnQgcGFja2V0XG4gKiBAcmV0dXJuIHtPYmplY3R9IHdpdGggZGVjb25zdHJ1Y3RlZCBwYWNrZXQgYW5kIGxpc3Qgb2YgYnVmZmVyc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLmRlY29uc3RydWN0UGFja2V0ID0gZnVuY3Rpb24ocGFja2V0KSB7XG4gIHZhciBidWZmZXJzID0gW107XG4gIHZhciBwYWNrZXREYXRhID0gcGFja2V0LmRhdGE7XG4gIHZhciBwYWNrID0gcGFja2V0O1xuICBwYWNrLmRhdGEgPSBfZGVjb25zdHJ1Y3RQYWNrZXQocGFja2V0RGF0YSwgYnVmZmVycyk7XG4gIHBhY2suYXR0YWNobWVudHMgPSBidWZmZXJzLmxlbmd0aDsgLy8gbnVtYmVyIG9mIGJpbmFyeSAnYXR0YWNobWVudHMnXG4gIHJldHVybiB7cGFja2V0OiBwYWNrLCBidWZmZXJzOiBidWZmZXJzfTtcbn07XG5cbmZ1bmN0aW9uIF9kZWNvbnN0cnVjdFBhY2tldChkYXRhLCBidWZmZXJzKSB7XG4gIGlmICghZGF0YSkgcmV0dXJuIGRhdGE7XG5cbiAgaWYgKGlzQnVmKGRhdGEpKSB7XG4gICAgdmFyIHBsYWNlaG9sZGVyID0geyBfcGxhY2Vob2xkZXI6IHRydWUsIG51bTogYnVmZmVycy5sZW5ndGggfTtcbiAgICBidWZmZXJzLnB1c2goZGF0YSk7XG4gICAgcmV0dXJuIHBsYWNlaG9sZGVyO1xuICB9IGVsc2UgaWYgKGlzQXJyYXkoZGF0YSkpIHtcbiAgICB2YXIgbmV3RGF0YSA9IG5ldyBBcnJheShkYXRhLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICBuZXdEYXRhW2ldID0gX2RlY29uc3RydWN0UGFja2V0KGRhdGFbaV0sIGJ1ZmZlcnMpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3RGF0YTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZGF0YSA9PT0gJ29iamVjdCcgJiYgIShkYXRhIGluc3RhbmNlb2YgRGF0ZSkpIHtcbiAgICB2YXIgbmV3RGF0YSA9IHt9O1xuICAgIGZvciAodmFyIGtleSBpbiBkYXRhKSB7XG4gICAgICBuZXdEYXRhW2tleV0gPSBfZGVjb25zdHJ1Y3RQYWNrZXQoZGF0YVtrZXldLCBidWZmZXJzKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ld0RhdGE7XG4gIH1cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogUmVjb25zdHJ1Y3RzIGEgYmluYXJ5IHBhY2tldCBmcm9tIGl0cyBwbGFjZWhvbGRlciBwYWNrZXQgYW5kIGJ1ZmZlcnNcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGFja2V0IC0gZXZlbnQgcGFja2V0IHdpdGggcGxhY2Vob2xkZXJzXG4gKiBAcGFyYW0ge0FycmF5fSBidWZmZXJzIC0gYmluYXJ5IGJ1ZmZlcnMgdG8gcHV0IGluIHBsYWNlaG9sZGVyIHBvc2l0aW9uc1xuICogQHJldHVybiB7T2JqZWN0fSByZWNvbnN0cnVjdGVkIHBhY2tldFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLnJlY29uc3RydWN0UGFja2V0ID0gZnVuY3Rpb24ocGFja2V0LCBidWZmZXJzKSB7XG4gIHBhY2tldC5kYXRhID0gX3JlY29uc3RydWN0UGFja2V0KHBhY2tldC5kYXRhLCBidWZmZXJzKTtcbiAgcGFja2V0LmF0dGFjaG1lbnRzID0gdW5kZWZpbmVkOyAvLyBubyBsb25nZXIgdXNlZnVsXG4gIHJldHVybiBwYWNrZXQ7XG59O1xuXG5mdW5jdGlvbiBfcmVjb25zdHJ1Y3RQYWNrZXQoZGF0YSwgYnVmZmVycykge1xuICBpZiAoIWRhdGEpIHJldHVybiBkYXRhO1xuXG4gIGlmIChkYXRhICYmIGRhdGEuX3BsYWNlaG9sZGVyKSB7XG4gICAgcmV0dXJuIGJ1ZmZlcnNbZGF0YS5udW1dOyAvLyBhcHByb3ByaWF0ZSBidWZmZXIgKHNob3VsZCBiZSBuYXR1cmFsIG9yZGVyIGFueXdheSlcbiAgfSBlbHNlIGlmIChpc0FycmF5KGRhdGEpKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICBkYXRhW2ldID0gX3JlY29uc3RydWN0UGFja2V0KGRhdGFbaV0sIGJ1ZmZlcnMpO1xuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgZGF0YSA9PT0gJ29iamVjdCcpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gZGF0YSkge1xuICAgICAgZGF0YVtrZXldID0gX3JlY29uc3RydWN0UGFja2V0KGRhdGFba2V5XSwgYnVmZmVycyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogQXN5bmNocm9ub3VzbHkgcmVtb3ZlcyBCbG9icyBvciBGaWxlcyBmcm9tIGRhdGEgdmlhXG4gKiBGaWxlUmVhZGVyJ3MgcmVhZEFzQXJyYXlCdWZmZXIgbWV0aG9kLiBVc2VkIGJlZm9yZSBlbmNvZGluZ1xuICogZGF0YSBhcyBtc2dwYWNrLiBDYWxscyBjYWxsYmFjayB3aXRoIHRoZSBibG9ibGVzcyBkYXRhLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZXhwb3J0cy5yZW1vdmVCbG9icyA9IGZ1bmN0aW9uKGRhdGEsIGNhbGxiYWNrKSB7XG4gIGZ1bmN0aW9uIF9yZW1vdmVCbG9icyhvYmosIGN1cktleSwgY29udGFpbmluZ09iamVjdCkge1xuICAgIGlmICghb2JqKSByZXR1cm4gb2JqO1xuXG4gICAgLy8gY29udmVydCBhbnkgYmxvYlxuICAgIGlmICgod2l0aE5hdGl2ZUJsb2IgJiYgb2JqIGluc3RhbmNlb2YgQmxvYikgfHxcbiAgICAgICAgKHdpdGhOYXRpdmVGaWxlICYmIG9iaiBpbnN0YW5jZW9mIEZpbGUpKSB7XG4gICAgICBwZW5kaW5nQmxvYnMrKztcblxuICAgICAgLy8gYXN5bmMgZmlsZXJlYWRlclxuICAgICAgdmFyIGZpbGVSZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICAgICAgZmlsZVJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbigpIHsgLy8gdGhpcy5yZXN1bHQgPT0gYXJyYXlidWZmZXJcbiAgICAgICAgaWYgKGNvbnRhaW5pbmdPYmplY3QpIHtcbiAgICAgICAgICBjb250YWluaW5nT2JqZWN0W2N1cktleV0gPSB0aGlzLnJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBibG9ibGVzc0RhdGEgPSB0aGlzLnJlc3VsdDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGlmIG5vdGhpbmcgcGVuZGluZyBpdHMgY2FsbGJhY2sgdGltZVxuICAgICAgICBpZighIC0tcGVuZGluZ0Jsb2JzKSB7XG4gICAgICAgICAgY2FsbGJhY2soYmxvYmxlc3NEYXRhKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgZmlsZVJlYWRlci5yZWFkQXNBcnJheUJ1ZmZlcihvYmopOyAvLyBibG9iIC0+IGFycmF5YnVmZmVyXG4gICAgfSBlbHNlIGlmIChpc0FycmF5KG9iaikpIHsgLy8gaGFuZGxlIGFycmF5XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9iai5sZW5ndGg7IGkrKykge1xuICAgICAgICBfcmVtb3ZlQmxvYnMob2JqW2ldLCBpLCBvYmopO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgJiYgIWlzQnVmKG9iaikpIHsgLy8gYW5kIG9iamVjdFxuICAgICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgICBfcmVtb3ZlQmxvYnMob2JqW2tleV0sIGtleSwgb2JqKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB2YXIgcGVuZGluZ0Jsb2JzID0gMDtcbiAgdmFyIGJsb2JsZXNzRGF0YSA9IGRhdGE7XG4gIF9yZW1vdmVCbG9icyhibG9ibGVzc0RhdGEpO1xuICBpZiAoIXBlbmRpbmdCbG9icykge1xuICAgIGNhbGxiYWNrKGJsb2JsZXNzRGF0YSk7XG4gIH1cbn07XG4iLCJcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9zb2NrZXQnKTtcblxuLyoqXG4gKiBFeHBvcnRzIHBhcnNlclxuICpcbiAqIEBhcGkgcHVibGljXG4gKlxuICovXG5tb2R1bGUuZXhwb3J0cy5wYXJzZXIgPSByZXF1aXJlKCdlbmdpbmUuaW8tcGFyc2VyJyk7XG4iLCIvKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxudmFyIHRyYW5zcG9ydHMgPSByZXF1aXJlKCcuL3RyYW5zcG9ydHMvaW5kZXgnKTtcbnZhciBFbWl0dGVyID0gcmVxdWlyZSgnY29tcG9uZW50LWVtaXR0ZXInKTtcbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ2VuZ2luZS5pby1jbGllbnQ6c29ja2V0Jyk7XG52YXIgaW5kZXggPSByZXF1aXJlKCdpbmRleG9mJyk7XG52YXIgcGFyc2VyID0gcmVxdWlyZSgnZW5naW5lLmlvLXBhcnNlcicpO1xudmFyIHBhcnNldXJpID0gcmVxdWlyZSgncGFyc2V1cmknKTtcbnZhciBwYXJzZXFzID0gcmVxdWlyZSgncGFyc2VxcycpO1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gU29ja2V0O1xuXG4vKipcbiAqIFNvY2tldCBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xPYmplY3R9IHVyaSBvciBvcHRpb25zXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBTb2NrZXQgKHVyaSwgb3B0cykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgU29ja2V0KSkgcmV0dXJuIG5ldyBTb2NrZXQodXJpLCBvcHRzKTtcblxuICBvcHRzID0gb3B0cyB8fCB7fTtcblxuICBpZiAodXJpICYmICdvYmplY3QnID09PSB0eXBlb2YgdXJpKSB7XG4gICAgb3B0cyA9IHVyaTtcbiAgICB1cmkgPSBudWxsO1xuICB9XG5cbiAgaWYgKHVyaSkge1xuICAgIHVyaSA9IHBhcnNldXJpKHVyaSk7XG4gICAgb3B0cy5ob3N0bmFtZSA9IHVyaS5ob3N0O1xuICAgIG9wdHMuc2VjdXJlID0gdXJpLnByb3RvY29sID09PSAnaHR0cHMnIHx8IHVyaS5wcm90b2NvbCA9PT0gJ3dzcyc7XG4gICAgb3B0cy5wb3J0ID0gdXJpLnBvcnQ7XG4gICAgaWYgKHVyaS5xdWVyeSkgb3B0cy5xdWVyeSA9IHVyaS5xdWVyeTtcbiAgfSBlbHNlIGlmIChvcHRzLmhvc3QpIHtcbiAgICBvcHRzLmhvc3RuYW1lID0gcGFyc2V1cmkob3B0cy5ob3N0KS5ob3N0O1xuICB9XG5cbiAgdGhpcy5zZWN1cmUgPSBudWxsICE9IG9wdHMuc2VjdXJlID8gb3B0cy5zZWN1cmVcbiAgICA6IChnbG9iYWwubG9jYXRpb24gJiYgJ2h0dHBzOicgPT09IGxvY2F0aW9uLnByb3RvY29sKTtcblxuICBpZiAob3B0cy5ob3N0bmFtZSAmJiAhb3B0cy5wb3J0KSB7XG4gICAgLy8gaWYgbm8gcG9ydCBpcyBzcGVjaWZpZWQgbWFudWFsbHksIHVzZSB0aGUgcHJvdG9jb2wgZGVmYXVsdFxuICAgIG9wdHMucG9ydCA9IHRoaXMuc2VjdXJlID8gJzQ0MycgOiAnODAnO1xuICB9XG5cbiAgdGhpcy5hZ2VudCA9IG9wdHMuYWdlbnQgfHwgZmFsc2U7XG4gIHRoaXMuaG9zdG5hbWUgPSBvcHRzLmhvc3RuYW1lIHx8XG4gICAgKGdsb2JhbC5sb2NhdGlvbiA/IGxvY2F0aW9uLmhvc3RuYW1lIDogJ2xvY2FsaG9zdCcpO1xuICB0aGlzLnBvcnQgPSBvcHRzLnBvcnQgfHwgKGdsb2JhbC5sb2NhdGlvbiAmJiBsb2NhdGlvbi5wb3J0XG4gICAgICA/IGxvY2F0aW9uLnBvcnRcbiAgICAgIDogKHRoaXMuc2VjdXJlID8gNDQzIDogODApKTtcbiAgdGhpcy5xdWVyeSA9IG9wdHMucXVlcnkgfHwge307XG4gIGlmICgnc3RyaW5nJyA9PT0gdHlwZW9mIHRoaXMucXVlcnkpIHRoaXMucXVlcnkgPSBwYXJzZXFzLmRlY29kZSh0aGlzLnF1ZXJ5KTtcbiAgdGhpcy51cGdyYWRlID0gZmFsc2UgIT09IG9wdHMudXBncmFkZTtcbiAgdGhpcy5wYXRoID0gKG9wdHMucGF0aCB8fCAnL2VuZ2luZS5pbycpLnJlcGxhY2UoL1xcLyQvLCAnJykgKyAnLyc7XG4gIHRoaXMuZm9yY2VKU09OUCA9ICEhb3B0cy5mb3JjZUpTT05QO1xuICB0aGlzLmpzb25wID0gZmFsc2UgIT09IG9wdHMuanNvbnA7XG4gIHRoaXMuZm9yY2VCYXNlNjQgPSAhIW9wdHMuZm9yY2VCYXNlNjQ7XG4gIHRoaXMuZW5hYmxlc1hEUiA9ICEhb3B0cy5lbmFibGVzWERSO1xuICB0aGlzLnRpbWVzdGFtcFBhcmFtID0gb3B0cy50aW1lc3RhbXBQYXJhbSB8fCAndCc7XG4gIHRoaXMudGltZXN0YW1wUmVxdWVzdHMgPSBvcHRzLnRpbWVzdGFtcFJlcXVlc3RzO1xuICB0aGlzLnRyYW5zcG9ydHMgPSBvcHRzLnRyYW5zcG9ydHMgfHwgWydwb2xsaW5nJywgJ3dlYnNvY2tldCddO1xuICB0aGlzLnRyYW5zcG9ydE9wdGlvbnMgPSBvcHRzLnRyYW5zcG9ydE9wdGlvbnMgfHwge307XG4gIHRoaXMucmVhZHlTdGF0ZSA9ICcnO1xuICB0aGlzLndyaXRlQnVmZmVyID0gW107XG4gIHRoaXMucHJldkJ1ZmZlckxlbiA9IDA7XG4gIHRoaXMucG9saWN5UG9ydCA9IG9wdHMucG9saWN5UG9ydCB8fCA4NDM7XG4gIHRoaXMucmVtZW1iZXJVcGdyYWRlID0gb3B0cy5yZW1lbWJlclVwZ3JhZGUgfHwgZmFsc2U7XG4gIHRoaXMuYmluYXJ5VHlwZSA9IG51bGw7XG4gIHRoaXMub25seUJpbmFyeVVwZ3JhZGVzID0gb3B0cy5vbmx5QmluYXJ5VXBncmFkZXM7XG4gIHRoaXMucGVyTWVzc2FnZURlZmxhdGUgPSBmYWxzZSAhPT0gb3B0cy5wZXJNZXNzYWdlRGVmbGF0ZSA/IChvcHRzLnBlck1lc3NhZ2VEZWZsYXRlIHx8IHt9KSA6IGZhbHNlO1xuXG4gIGlmICh0cnVlID09PSB0aGlzLnBlck1lc3NhZ2VEZWZsYXRlKSB0aGlzLnBlck1lc3NhZ2VEZWZsYXRlID0ge307XG4gIGlmICh0aGlzLnBlck1lc3NhZ2VEZWZsYXRlICYmIG51bGwgPT0gdGhpcy5wZXJNZXNzYWdlRGVmbGF0ZS50aHJlc2hvbGQpIHtcbiAgICB0aGlzLnBlck1lc3NhZ2VEZWZsYXRlLnRocmVzaG9sZCA9IDEwMjQ7XG4gIH1cblxuICAvLyBTU0wgb3B0aW9ucyBmb3IgTm9kZS5qcyBjbGllbnRcbiAgdGhpcy5wZnggPSBvcHRzLnBmeCB8fCBudWxsO1xuICB0aGlzLmtleSA9IG9wdHMua2V5IHx8IG51bGw7XG4gIHRoaXMucGFzc3BocmFzZSA9IG9wdHMucGFzc3BocmFzZSB8fCBudWxsO1xuICB0aGlzLmNlcnQgPSBvcHRzLmNlcnQgfHwgbnVsbDtcbiAgdGhpcy5jYSA9IG9wdHMuY2EgfHwgbnVsbDtcbiAgdGhpcy5jaXBoZXJzID0gb3B0cy5jaXBoZXJzIHx8IG51bGw7XG4gIHRoaXMucmVqZWN0VW5hdXRob3JpemVkID0gb3B0cy5yZWplY3RVbmF1dGhvcml6ZWQgPT09IHVuZGVmaW5lZCA/IHRydWUgOiBvcHRzLnJlamVjdFVuYXV0aG9yaXplZDtcbiAgdGhpcy5mb3JjZU5vZGUgPSAhIW9wdHMuZm9yY2VOb2RlO1xuXG4gIC8vIG90aGVyIG9wdGlvbnMgZm9yIE5vZGUuanMgY2xpZW50XG4gIHZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGdsb2JhbCA9PT0gJ29iamVjdCcgJiYgZ2xvYmFsO1xuICBpZiAoZnJlZUdsb2JhbC5nbG9iYWwgPT09IGZyZWVHbG9iYWwpIHtcbiAgICBpZiAob3B0cy5leHRyYUhlYWRlcnMgJiYgT2JqZWN0LmtleXMob3B0cy5leHRyYUhlYWRlcnMpLmxlbmd0aCA+IDApIHtcbiAgICAgIHRoaXMuZXh0cmFIZWFkZXJzID0gb3B0cy5leHRyYUhlYWRlcnM7XG4gICAgfVxuXG4gICAgaWYgKG9wdHMubG9jYWxBZGRyZXNzKSB7XG4gICAgICB0aGlzLmxvY2FsQWRkcmVzcyA9IG9wdHMubG9jYWxBZGRyZXNzO1xuICAgIH1cbiAgfVxuXG4gIC8vIHNldCBvbiBoYW5kc2hha2VcbiAgdGhpcy5pZCA9IG51bGw7XG4gIHRoaXMudXBncmFkZXMgPSBudWxsO1xuICB0aGlzLnBpbmdJbnRlcnZhbCA9IG51bGw7XG4gIHRoaXMucGluZ1RpbWVvdXQgPSBudWxsO1xuXG4gIC8vIHNldCBvbiBoZWFydGJlYXRcbiAgdGhpcy5waW5nSW50ZXJ2YWxUaW1lciA9IG51bGw7XG4gIHRoaXMucGluZ1RpbWVvdXRUaW1lciA9IG51bGw7XG5cbiAgdGhpcy5vcGVuKCk7XG59XG5cblNvY2tldC5wcmlvcldlYnNvY2tldFN1Y2Nlc3MgPSBmYWxzZTtcblxuLyoqXG4gKiBNaXggaW4gYEVtaXR0ZXJgLlxuICovXG5cbkVtaXR0ZXIoU29ja2V0LnByb3RvdHlwZSk7XG5cbi8qKlxuICogUHJvdG9jb2wgdmVyc2lvbi5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblNvY2tldC5wcm90b2NvbCA9IHBhcnNlci5wcm90b2NvbDsgLy8gdGhpcyBpcyBhbiBpbnRcblxuLyoqXG4gKiBFeHBvc2UgZGVwcyBmb3IgbGVnYWN5IGNvbXBhdGliaWxpdHlcbiAqIGFuZCBzdGFuZGFsb25lIGJyb3dzZXIgYWNjZXNzLlxuICovXG5cblNvY2tldC5Tb2NrZXQgPSBTb2NrZXQ7XG5Tb2NrZXQuVHJhbnNwb3J0ID0gcmVxdWlyZSgnLi90cmFuc3BvcnQnKTtcblNvY2tldC50cmFuc3BvcnRzID0gcmVxdWlyZSgnLi90cmFuc3BvcnRzL2luZGV4Jyk7XG5Tb2NrZXQucGFyc2VyID0gcmVxdWlyZSgnZW5naW5lLmlvLXBhcnNlcicpO1xuXG4vKipcbiAqIENyZWF0ZXMgdHJhbnNwb3J0IG9mIHRoZSBnaXZlbiB0eXBlLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSB0cmFuc3BvcnQgbmFtZVxuICogQHJldHVybiB7VHJhbnNwb3J0fVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5jcmVhdGVUcmFuc3BvcnQgPSBmdW5jdGlvbiAobmFtZSkge1xuICBkZWJ1ZygnY3JlYXRpbmcgdHJhbnNwb3J0IFwiJXNcIicsIG5hbWUpO1xuICB2YXIgcXVlcnkgPSBjbG9uZSh0aGlzLnF1ZXJ5KTtcblxuICAvLyBhcHBlbmQgZW5naW5lLmlvIHByb3RvY29sIGlkZW50aWZpZXJcbiAgcXVlcnkuRUlPID0gcGFyc2VyLnByb3RvY29sO1xuXG4gIC8vIHRyYW5zcG9ydCBuYW1lXG4gIHF1ZXJ5LnRyYW5zcG9ydCA9IG5hbWU7XG5cbiAgLy8gcGVyLXRyYW5zcG9ydCBvcHRpb25zXG4gIHZhciBvcHRpb25zID0gdGhpcy50cmFuc3BvcnRPcHRpb25zW25hbWVdIHx8IHt9O1xuXG4gIC8vIHNlc3Npb24gaWQgaWYgd2UgYWxyZWFkeSBoYXZlIG9uZVxuICBpZiAodGhpcy5pZCkgcXVlcnkuc2lkID0gdGhpcy5pZDtcblxuICB2YXIgdHJhbnNwb3J0ID0gbmV3IHRyYW5zcG9ydHNbbmFtZV0oe1xuICAgIHF1ZXJ5OiBxdWVyeSxcbiAgICBzb2NrZXQ6IHRoaXMsXG4gICAgYWdlbnQ6IG9wdGlvbnMuYWdlbnQgfHwgdGhpcy5hZ2VudCxcbiAgICBob3N0bmFtZTogb3B0aW9ucy5ob3N0bmFtZSB8fCB0aGlzLmhvc3RuYW1lLFxuICAgIHBvcnQ6IG9wdGlvbnMucG9ydCB8fCB0aGlzLnBvcnQsXG4gICAgc2VjdXJlOiBvcHRpb25zLnNlY3VyZSB8fCB0aGlzLnNlY3VyZSxcbiAgICBwYXRoOiBvcHRpb25zLnBhdGggfHwgdGhpcy5wYXRoLFxuICAgIGZvcmNlSlNPTlA6IG9wdGlvbnMuZm9yY2VKU09OUCB8fCB0aGlzLmZvcmNlSlNPTlAsXG4gICAganNvbnA6IG9wdGlvbnMuanNvbnAgfHwgdGhpcy5qc29ucCxcbiAgICBmb3JjZUJhc2U2NDogb3B0aW9ucy5mb3JjZUJhc2U2NCB8fCB0aGlzLmZvcmNlQmFzZTY0LFxuICAgIGVuYWJsZXNYRFI6IG9wdGlvbnMuZW5hYmxlc1hEUiB8fCB0aGlzLmVuYWJsZXNYRFIsXG4gICAgdGltZXN0YW1wUmVxdWVzdHM6IG9wdGlvbnMudGltZXN0YW1wUmVxdWVzdHMgfHwgdGhpcy50aW1lc3RhbXBSZXF1ZXN0cyxcbiAgICB0aW1lc3RhbXBQYXJhbTogb3B0aW9ucy50aW1lc3RhbXBQYXJhbSB8fCB0aGlzLnRpbWVzdGFtcFBhcmFtLFxuICAgIHBvbGljeVBvcnQ6IG9wdGlvbnMucG9saWN5UG9ydCB8fCB0aGlzLnBvbGljeVBvcnQsXG4gICAgcGZ4OiBvcHRpb25zLnBmeCB8fCB0aGlzLnBmeCxcbiAgICBrZXk6IG9wdGlvbnMua2V5IHx8IHRoaXMua2V5LFxuICAgIHBhc3NwaHJhc2U6IG9wdGlvbnMucGFzc3BocmFzZSB8fCB0aGlzLnBhc3NwaHJhc2UsXG4gICAgY2VydDogb3B0aW9ucy5jZXJ0IHx8IHRoaXMuY2VydCxcbiAgICBjYTogb3B0aW9ucy5jYSB8fCB0aGlzLmNhLFxuICAgIGNpcGhlcnM6IG9wdGlvbnMuY2lwaGVycyB8fCB0aGlzLmNpcGhlcnMsXG4gICAgcmVqZWN0VW5hdXRob3JpemVkOiBvcHRpb25zLnJlamVjdFVuYXV0aG9yaXplZCB8fCB0aGlzLnJlamVjdFVuYXV0aG9yaXplZCxcbiAgICBwZXJNZXNzYWdlRGVmbGF0ZTogb3B0aW9ucy5wZXJNZXNzYWdlRGVmbGF0ZSB8fCB0aGlzLnBlck1lc3NhZ2VEZWZsYXRlLFxuICAgIGV4dHJhSGVhZGVyczogb3B0aW9ucy5leHRyYUhlYWRlcnMgfHwgdGhpcy5leHRyYUhlYWRlcnMsXG4gICAgZm9yY2VOb2RlOiBvcHRpb25zLmZvcmNlTm9kZSB8fCB0aGlzLmZvcmNlTm9kZSxcbiAgICBsb2NhbEFkZHJlc3M6IG9wdGlvbnMubG9jYWxBZGRyZXNzIHx8IHRoaXMubG9jYWxBZGRyZXNzLFxuICAgIHJlcXVlc3RUaW1lb3V0OiBvcHRpb25zLnJlcXVlc3RUaW1lb3V0IHx8IHRoaXMucmVxdWVzdFRpbWVvdXQsXG4gICAgcHJvdG9jb2xzOiBvcHRpb25zLnByb3RvY29scyB8fCB2b2lkICgwKVxuICB9KTtcblxuICByZXR1cm4gdHJhbnNwb3J0O1xufTtcblxuZnVuY3Rpb24gY2xvbmUgKG9iaikge1xuICB2YXIgbyA9IHt9O1xuICBmb3IgKHZhciBpIGluIG9iaikge1xuICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgIG9baV0gPSBvYmpbaV07XG4gICAgfVxuICB9XG4gIHJldHVybiBvO1xufVxuXG4vKipcbiAqIEluaXRpYWxpemVzIHRyYW5zcG9ydCB0byB1c2UgYW5kIHN0YXJ0cyBwcm9iZS5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuU29ja2V0LnByb3RvdHlwZS5vcGVuID0gZnVuY3Rpb24gKCkge1xuICB2YXIgdHJhbnNwb3J0O1xuICBpZiAodGhpcy5yZW1lbWJlclVwZ3JhZGUgJiYgU29ja2V0LnByaW9yV2Vic29ja2V0U3VjY2VzcyAmJiB0aGlzLnRyYW5zcG9ydHMuaW5kZXhPZignd2Vic29ja2V0JykgIT09IC0xKSB7XG4gICAgdHJhbnNwb3J0ID0gJ3dlYnNvY2tldCc7XG4gIH0gZWxzZSBpZiAoMCA9PT0gdGhpcy50cmFuc3BvcnRzLmxlbmd0aCkge1xuICAgIC8vIEVtaXQgZXJyb3Igb24gbmV4dCB0aWNrIHNvIGl0IGNhbiBiZSBsaXN0ZW5lZCB0b1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHNlbGYuZW1pdCgnZXJyb3InLCAnTm8gdHJhbnNwb3J0cyBhdmFpbGFibGUnKTtcbiAgICB9LCAwKTtcbiAgICByZXR1cm47XG4gIH0gZWxzZSB7XG4gICAgdHJhbnNwb3J0ID0gdGhpcy50cmFuc3BvcnRzWzBdO1xuICB9XG4gIHRoaXMucmVhZHlTdGF0ZSA9ICdvcGVuaW5nJztcblxuICAvLyBSZXRyeSB3aXRoIHRoZSBuZXh0IHRyYW5zcG9ydCBpZiB0aGUgdHJhbnNwb3J0IGlzIGRpc2FibGVkIChqc29ucDogZmFsc2UpXG4gIHRyeSB7XG4gICAgdHJhbnNwb3J0ID0gdGhpcy5jcmVhdGVUcmFuc3BvcnQodHJhbnNwb3J0KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRoaXMudHJhbnNwb3J0cy5zaGlmdCgpO1xuICAgIHRoaXMub3BlbigpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRyYW5zcG9ydC5vcGVuKCk7XG4gIHRoaXMuc2V0VHJhbnNwb3J0KHRyYW5zcG9ydCk7XG59O1xuXG4vKipcbiAqIFNldHMgdGhlIGN1cnJlbnQgdHJhbnNwb3J0LiBEaXNhYmxlcyB0aGUgZXhpc3Rpbmcgb25lIChpZiBhbnkpLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUuc2V0VHJhbnNwb3J0ID0gZnVuY3Rpb24gKHRyYW5zcG9ydCkge1xuICBkZWJ1Zygnc2V0dGluZyB0cmFuc3BvcnQgJXMnLCB0cmFuc3BvcnQubmFtZSk7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICBpZiAodGhpcy50cmFuc3BvcnQpIHtcbiAgICBkZWJ1ZygnY2xlYXJpbmcgZXhpc3RpbmcgdHJhbnNwb3J0ICVzJywgdGhpcy50cmFuc3BvcnQubmFtZSk7XG4gICAgdGhpcy50cmFuc3BvcnQucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG4gIH1cblxuICAvLyBzZXQgdXAgdHJhbnNwb3J0XG4gIHRoaXMudHJhbnNwb3J0ID0gdHJhbnNwb3J0O1xuXG4gIC8vIHNldCB1cCB0cmFuc3BvcnQgbGlzdGVuZXJzXG4gIHRyYW5zcG9ydFxuICAub24oJ2RyYWluJywgZnVuY3Rpb24gKCkge1xuICAgIHNlbGYub25EcmFpbigpO1xuICB9KVxuICAub24oJ3BhY2tldCcsIGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgICBzZWxmLm9uUGFja2V0KHBhY2tldCk7XG4gIH0pXG4gIC5vbignZXJyb3InLCBmdW5jdGlvbiAoZSkge1xuICAgIHNlbGYub25FcnJvcihlKTtcbiAgfSlcbiAgLm9uKCdjbG9zZScsIGZ1bmN0aW9uICgpIHtcbiAgICBzZWxmLm9uQ2xvc2UoJ3RyYW5zcG9ydCBjbG9zZScpO1xuICB9KTtcbn07XG5cbi8qKlxuICogUHJvYmVzIGEgdHJhbnNwb3J0LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSB0cmFuc3BvcnQgbmFtZVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5wcm9iZSA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIGRlYnVnKCdwcm9iaW5nIHRyYW5zcG9ydCBcIiVzXCInLCBuYW1lKTtcbiAgdmFyIHRyYW5zcG9ydCA9IHRoaXMuY3JlYXRlVHJhbnNwb3J0KG5hbWUsIHsgcHJvYmU6IDEgfSk7XG4gIHZhciBmYWlsZWQgPSBmYWxzZTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIFNvY2tldC5wcmlvcldlYnNvY2tldFN1Y2Nlc3MgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBvblRyYW5zcG9ydE9wZW4gKCkge1xuICAgIGlmIChzZWxmLm9ubHlCaW5hcnlVcGdyYWRlcykge1xuICAgICAgdmFyIHVwZ3JhZGVMb3Nlc0JpbmFyeSA9ICF0aGlzLnN1cHBvcnRzQmluYXJ5ICYmIHNlbGYudHJhbnNwb3J0LnN1cHBvcnRzQmluYXJ5O1xuICAgICAgZmFpbGVkID0gZmFpbGVkIHx8IHVwZ3JhZGVMb3Nlc0JpbmFyeTtcbiAgICB9XG4gICAgaWYgKGZhaWxlZCkgcmV0dXJuO1xuXG4gICAgZGVidWcoJ3Byb2JlIHRyYW5zcG9ydCBcIiVzXCIgb3BlbmVkJywgbmFtZSk7XG4gICAgdHJhbnNwb3J0LnNlbmQoW3sgdHlwZTogJ3BpbmcnLCBkYXRhOiAncHJvYmUnIH1dKTtcbiAgICB0cmFuc3BvcnQub25jZSgncGFja2V0JywgZnVuY3Rpb24gKG1zZykge1xuICAgICAgaWYgKGZhaWxlZCkgcmV0dXJuO1xuICAgICAgaWYgKCdwb25nJyA9PT0gbXNnLnR5cGUgJiYgJ3Byb2JlJyA9PT0gbXNnLmRhdGEpIHtcbiAgICAgICAgZGVidWcoJ3Byb2JlIHRyYW5zcG9ydCBcIiVzXCIgcG9uZycsIG5hbWUpO1xuICAgICAgICBzZWxmLnVwZ3JhZGluZyA9IHRydWU7XG4gICAgICAgIHNlbGYuZW1pdCgndXBncmFkaW5nJywgdHJhbnNwb3J0KTtcbiAgICAgICAgaWYgKCF0cmFuc3BvcnQpIHJldHVybjtcbiAgICAgICAgU29ja2V0LnByaW9yV2Vic29ja2V0U3VjY2VzcyA9ICd3ZWJzb2NrZXQnID09PSB0cmFuc3BvcnQubmFtZTtcblxuICAgICAgICBkZWJ1ZygncGF1c2luZyBjdXJyZW50IHRyYW5zcG9ydCBcIiVzXCInLCBzZWxmLnRyYW5zcG9ydC5uYW1lKTtcbiAgICAgICAgc2VsZi50cmFuc3BvcnQucGF1c2UoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmIChmYWlsZWQpIHJldHVybjtcbiAgICAgICAgICBpZiAoJ2Nsb3NlZCcgPT09IHNlbGYucmVhZHlTdGF0ZSkgcmV0dXJuO1xuICAgICAgICAgIGRlYnVnKCdjaGFuZ2luZyB0cmFuc3BvcnQgYW5kIHNlbmRpbmcgdXBncmFkZSBwYWNrZXQnKTtcblxuICAgICAgICAgIGNsZWFudXAoKTtcblxuICAgICAgICAgIHNlbGYuc2V0VHJhbnNwb3J0KHRyYW5zcG9ydCk7XG4gICAgICAgICAgdHJhbnNwb3J0LnNlbmQoW3sgdHlwZTogJ3VwZ3JhZGUnIH1dKTtcbiAgICAgICAgICBzZWxmLmVtaXQoJ3VwZ3JhZGUnLCB0cmFuc3BvcnQpO1xuICAgICAgICAgIHRyYW5zcG9ydCA9IG51bGw7XG4gICAgICAgICAgc2VsZi51cGdyYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgICBzZWxmLmZsdXNoKCk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVidWcoJ3Byb2JlIHRyYW5zcG9ydCBcIiVzXCIgZmFpbGVkJywgbmFtZSk7XG4gICAgICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoJ3Byb2JlIGVycm9yJyk7XG4gICAgICAgIGVyci50cmFuc3BvcnQgPSB0cmFuc3BvcnQubmFtZTtcbiAgICAgICAgc2VsZi5lbWl0KCd1cGdyYWRlRXJyb3InLCBlcnIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZnJlZXplVHJhbnNwb3J0ICgpIHtcbiAgICBpZiAoZmFpbGVkKSByZXR1cm47XG5cbiAgICAvLyBBbnkgY2FsbGJhY2sgY2FsbGVkIGJ5IHRyYW5zcG9ydCBzaG91bGQgYmUgaWdub3JlZCBzaW5jZSBub3dcbiAgICBmYWlsZWQgPSB0cnVlO1xuXG4gICAgY2xlYW51cCgpO1xuXG4gICAgdHJhbnNwb3J0LmNsb3NlKCk7XG4gICAgdHJhbnNwb3J0ID0gbnVsbDtcbiAgfVxuXG4gIC8vIEhhbmRsZSBhbnkgZXJyb3IgdGhhdCBoYXBwZW5zIHdoaWxlIHByb2JpbmdcbiAgZnVuY3Rpb24gb25lcnJvciAoZXJyKSB7XG4gICAgdmFyIGVycm9yID0gbmV3IEVycm9yKCdwcm9iZSBlcnJvcjogJyArIGVycik7XG4gICAgZXJyb3IudHJhbnNwb3J0ID0gdHJhbnNwb3J0Lm5hbWU7XG5cbiAgICBmcmVlemVUcmFuc3BvcnQoKTtcblxuICAgIGRlYnVnKCdwcm9iZSB0cmFuc3BvcnQgXCIlc1wiIGZhaWxlZCBiZWNhdXNlIG9mIGVycm9yOiAlcycsIG5hbWUsIGVycik7XG5cbiAgICBzZWxmLmVtaXQoJ3VwZ3JhZGVFcnJvcicsIGVycm9yKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uVHJhbnNwb3J0Q2xvc2UgKCkge1xuICAgIG9uZXJyb3IoJ3RyYW5zcG9ydCBjbG9zZWQnKTtcbiAgfVxuXG4gIC8vIFdoZW4gdGhlIHNvY2tldCBpcyBjbG9zZWQgd2hpbGUgd2UncmUgcHJvYmluZ1xuICBmdW5jdGlvbiBvbmNsb3NlICgpIHtcbiAgICBvbmVycm9yKCdzb2NrZXQgY2xvc2VkJyk7XG4gIH1cblxuICAvLyBXaGVuIHRoZSBzb2NrZXQgaXMgdXBncmFkZWQgd2hpbGUgd2UncmUgcHJvYmluZ1xuICBmdW5jdGlvbiBvbnVwZ3JhZGUgKHRvKSB7XG4gICAgaWYgKHRyYW5zcG9ydCAmJiB0by5uYW1lICE9PSB0cmFuc3BvcnQubmFtZSkge1xuICAgICAgZGVidWcoJ1wiJXNcIiB3b3JrcyAtIGFib3J0aW5nIFwiJXNcIicsIHRvLm5hbWUsIHRyYW5zcG9ydC5uYW1lKTtcbiAgICAgIGZyZWV6ZVRyYW5zcG9ydCgpO1xuICAgIH1cbiAgfVxuXG4gIC8vIFJlbW92ZSBhbGwgbGlzdGVuZXJzIG9uIHRoZSB0cmFuc3BvcnQgYW5kIG9uIHNlbGZcbiAgZnVuY3Rpb24gY2xlYW51cCAoKSB7XG4gICAgdHJhbnNwb3J0LnJlbW92ZUxpc3RlbmVyKCdvcGVuJywgb25UcmFuc3BvcnRPcGVuKTtcbiAgICB0cmFuc3BvcnQucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgb25lcnJvcik7XG4gICAgdHJhbnNwb3J0LnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIG9uVHJhbnNwb3J0Q2xvc2UpO1xuICAgIHNlbGYucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgb25jbG9zZSk7XG4gICAgc2VsZi5yZW1vdmVMaXN0ZW5lcigndXBncmFkaW5nJywgb251cGdyYWRlKTtcbiAgfVxuXG4gIHRyYW5zcG9ydC5vbmNlKCdvcGVuJywgb25UcmFuc3BvcnRPcGVuKTtcbiAgdHJhbnNwb3J0Lm9uY2UoJ2Vycm9yJywgb25lcnJvcik7XG4gIHRyYW5zcG9ydC5vbmNlKCdjbG9zZScsIG9uVHJhbnNwb3J0Q2xvc2UpO1xuXG4gIHRoaXMub25jZSgnY2xvc2UnLCBvbmNsb3NlKTtcbiAgdGhpcy5vbmNlKCd1cGdyYWRpbmcnLCBvbnVwZ3JhZGUpO1xuXG4gIHRyYW5zcG9ydC5vcGVuKCk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB3aGVuIGNvbm5lY3Rpb24gaXMgZGVlbWVkIG9wZW4uXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9uT3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgZGVidWcoJ3NvY2tldCBvcGVuJyk7XG4gIHRoaXMucmVhZHlTdGF0ZSA9ICdvcGVuJztcbiAgU29ja2V0LnByaW9yV2Vic29ja2V0U3VjY2VzcyA9ICd3ZWJzb2NrZXQnID09PSB0aGlzLnRyYW5zcG9ydC5uYW1lO1xuICB0aGlzLmVtaXQoJ29wZW4nKTtcbiAgdGhpcy5mbHVzaCgpO1xuXG4gIC8vIHdlIGNoZWNrIGZvciBgcmVhZHlTdGF0ZWAgaW4gY2FzZSBhbiBgb3BlbmBcbiAgLy8gbGlzdGVuZXIgYWxyZWFkeSBjbG9zZWQgdGhlIHNvY2tldFxuICBpZiAoJ29wZW4nID09PSB0aGlzLnJlYWR5U3RhdGUgJiYgdGhpcy51cGdyYWRlICYmIHRoaXMudHJhbnNwb3J0LnBhdXNlKSB7XG4gICAgZGVidWcoJ3N0YXJ0aW5nIHVwZ3JhZGUgcHJvYmVzJyk7XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSB0aGlzLnVwZ3JhZGVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgdGhpcy5wcm9iZSh0aGlzLnVwZ3JhZGVzW2ldKTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogSGFuZGxlcyBhIHBhY2tldC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9uUGFja2V0ID0gZnVuY3Rpb24gKHBhY2tldCkge1xuICBpZiAoJ29wZW5pbmcnID09PSB0aGlzLnJlYWR5U3RhdGUgfHwgJ29wZW4nID09PSB0aGlzLnJlYWR5U3RhdGUgfHxcbiAgICAgICdjbG9zaW5nJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgZGVidWcoJ3NvY2tldCByZWNlaXZlOiB0eXBlIFwiJXNcIiwgZGF0YSBcIiVzXCInLCBwYWNrZXQudHlwZSwgcGFja2V0LmRhdGEpO1xuXG4gICAgdGhpcy5lbWl0KCdwYWNrZXQnLCBwYWNrZXQpO1xuXG4gICAgLy8gU29ja2V0IGlzIGxpdmUgLSBhbnkgcGFja2V0IGNvdW50c1xuICAgIHRoaXMuZW1pdCgnaGVhcnRiZWF0Jyk7XG5cbiAgICBzd2l0Y2ggKHBhY2tldC50eXBlKSB7XG4gICAgICBjYXNlICdvcGVuJzpcbiAgICAgICAgdGhpcy5vbkhhbmRzaGFrZShKU09OLnBhcnNlKHBhY2tldC5kYXRhKSk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdwb25nJzpcbiAgICAgICAgdGhpcy5zZXRQaW5nKCk7XG4gICAgICAgIHRoaXMuZW1pdCgncG9uZycpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnZXJyb3InOlxuICAgICAgICB2YXIgZXJyID0gbmV3IEVycm9yKCdzZXJ2ZXIgZXJyb3InKTtcbiAgICAgICAgZXJyLmNvZGUgPSBwYWNrZXQuZGF0YTtcbiAgICAgICAgdGhpcy5vbkVycm9yKGVycik7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdtZXNzYWdlJzpcbiAgICAgICAgdGhpcy5lbWl0KCdkYXRhJywgcGFja2V0LmRhdGEpO1xuICAgICAgICB0aGlzLmVtaXQoJ21lc3NhZ2UnLCBwYWNrZXQuZGF0YSk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBkZWJ1ZygncGFja2V0IHJlY2VpdmVkIHdpdGggc29ja2V0IHJlYWR5U3RhdGUgXCIlc1wiJywgdGhpcy5yZWFkeVN0YXRlKTtcbiAgfVxufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBoYW5kc2hha2UgY29tcGxldGlvbi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gaGFuZHNoYWtlIG9ialxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vbkhhbmRzaGFrZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHRoaXMuZW1pdCgnaGFuZHNoYWtlJywgZGF0YSk7XG4gIHRoaXMuaWQgPSBkYXRhLnNpZDtcbiAgdGhpcy50cmFuc3BvcnQucXVlcnkuc2lkID0gZGF0YS5zaWQ7XG4gIHRoaXMudXBncmFkZXMgPSB0aGlzLmZpbHRlclVwZ3JhZGVzKGRhdGEudXBncmFkZXMpO1xuICB0aGlzLnBpbmdJbnRlcnZhbCA9IGRhdGEucGluZ0ludGVydmFsO1xuICB0aGlzLnBpbmdUaW1lb3V0ID0gZGF0YS5waW5nVGltZW91dDtcbiAgdGhpcy5vbk9wZW4oKTtcbiAgLy8gSW4gY2FzZSBvcGVuIGhhbmRsZXIgY2xvc2VzIHNvY2tldFxuICBpZiAoJ2Nsb3NlZCcgPT09IHRoaXMucmVhZHlTdGF0ZSkgcmV0dXJuO1xuICB0aGlzLnNldFBpbmcoKTtcblxuICAvLyBQcm9sb25nIGxpdmVuZXNzIG9mIHNvY2tldCBvbiBoZWFydGJlYXRcbiAgdGhpcy5yZW1vdmVMaXN0ZW5lcignaGVhcnRiZWF0JywgdGhpcy5vbkhlYXJ0YmVhdCk7XG4gIHRoaXMub24oJ2hlYXJ0YmVhdCcsIHRoaXMub25IZWFydGJlYXQpO1xufTtcblxuLyoqXG4gKiBSZXNldHMgcGluZyB0aW1lb3V0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25IZWFydGJlYXQgPSBmdW5jdGlvbiAodGltZW91dCkge1xuICBjbGVhclRpbWVvdXQodGhpcy5waW5nVGltZW91dFRpbWVyKTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBzZWxmLnBpbmdUaW1lb3V0VGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoJ2Nsb3NlZCcgPT09IHNlbGYucmVhZHlTdGF0ZSkgcmV0dXJuO1xuICAgIHNlbGYub25DbG9zZSgncGluZyB0aW1lb3V0Jyk7XG4gIH0sIHRpbWVvdXQgfHwgKHNlbGYucGluZ0ludGVydmFsICsgc2VsZi5waW5nVGltZW91dCkpO1xufTtcblxuLyoqXG4gKiBQaW5ncyBzZXJ2ZXIgZXZlcnkgYHRoaXMucGluZ0ludGVydmFsYCBhbmQgZXhwZWN0cyByZXNwb25zZVxuICogd2l0aGluIGB0aGlzLnBpbmdUaW1lb3V0YCBvciBjbG9zZXMgY29ubmVjdGlvbi5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLnNldFBpbmcgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgY2xlYXJUaW1lb3V0KHNlbGYucGluZ0ludGVydmFsVGltZXIpO1xuICBzZWxmLnBpbmdJbnRlcnZhbFRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgZGVidWcoJ3dyaXRpbmcgcGluZyBwYWNrZXQgLSBleHBlY3RpbmcgcG9uZyB3aXRoaW4gJXNtcycsIHNlbGYucGluZ1RpbWVvdXQpO1xuICAgIHNlbGYucGluZygpO1xuICAgIHNlbGYub25IZWFydGJlYXQoc2VsZi5waW5nVGltZW91dCk7XG4gIH0sIHNlbGYucGluZ0ludGVydmFsKTtcbn07XG5cbi8qKlxuKiBTZW5kcyBhIHBpbmcgcGFja2V0LlxuKlxuKiBAYXBpIHByaXZhdGVcbiovXG5cblNvY2tldC5wcm90b3R5cGUucGluZyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB0aGlzLnNlbmRQYWNrZXQoJ3BpbmcnLCBmdW5jdGlvbiAoKSB7XG4gICAgc2VsZi5lbWl0KCdwaW5nJyk7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgb24gYGRyYWluYCBldmVudFxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25EcmFpbiA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy53cml0ZUJ1ZmZlci5zcGxpY2UoMCwgdGhpcy5wcmV2QnVmZmVyTGVuKTtcblxuICAvLyBzZXR0aW5nIHByZXZCdWZmZXJMZW4gPSAwIGlzIHZlcnkgaW1wb3J0YW50XG4gIC8vIGZvciBleGFtcGxlLCB3aGVuIHVwZ3JhZGluZywgdXBncmFkZSBwYWNrZXQgaXMgc2VudCBvdmVyLFxuICAvLyBhbmQgYSBub256ZXJvIHByZXZCdWZmZXJMZW4gY291bGQgY2F1c2UgcHJvYmxlbXMgb24gYGRyYWluYFxuICB0aGlzLnByZXZCdWZmZXJMZW4gPSAwO1xuXG4gIGlmICgwID09PSB0aGlzLndyaXRlQnVmZmVyLmxlbmd0aCkge1xuICAgIHRoaXMuZW1pdCgnZHJhaW4nKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmZsdXNoKCk7XG4gIH1cbn07XG5cbi8qKlxuICogRmx1c2ggd3JpdGUgYnVmZmVycy5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLmZsdXNoID0gZnVuY3Rpb24gKCkge1xuICBpZiAoJ2Nsb3NlZCcgIT09IHRoaXMucmVhZHlTdGF0ZSAmJiB0aGlzLnRyYW5zcG9ydC53cml0YWJsZSAmJlxuICAgICF0aGlzLnVwZ3JhZGluZyAmJiB0aGlzLndyaXRlQnVmZmVyLmxlbmd0aCkge1xuICAgIGRlYnVnKCdmbHVzaGluZyAlZCBwYWNrZXRzIGluIHNvY2tldCcsIHRoaXMud3JpdGVCdWZmZXIubGVuZ3RoKTtcbiAgICB0aGlzLnRyYW5zcG9ydC5zZW5kKHRoaXMud3JpdGVCdWZmZXIpO1xuICAgIC8vIGtlZXAgdHJhY2sgb2YgY3VycmVudCBsZW5ndGggb2Ygd3JpdGVCdWZmZXJcbiAgICAvLyBzcGxpY2Ugd3JpdGVCdWZmZXIgYW5kIGNhbGxiYWNrQnVmZmVyIG9uIGBkcmFpbmBcbiAgICB0aGlzLnByZXZCdWZmZXJMZW4gPSB0aGlzLndyaXRlQnVmZmVyLmxlbmd0aDtcbiAgICB0aGlzLmVtaXQoJ2ZsdXNoJyk7XG4gIH1cbn07XG5cbi8qKlxuICogU2VuZHMgYSBtZXNzYWdlLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucy5cbiAqIEByZXR1cm4ge1NvY2tldH0gZm9yIGNoYWluaW5nLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLndyaXRlID1cblNvY2tldC5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uIChtc2csIG9wdGlvbnMsIGZuKSB7XG4gIHRoaXMuc2VuZFBhY2tldCgnbWVzc2FnZScsIG1zZywgb3B0aW9ucywgZm4pO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2VuZHMgYSBwYWNrZXQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHBhY2tldCB0eXBlLlxuICogQHBhcmFtIHtTdHJpbmd9IGRhdGEuXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIGZ1bmN0aW9uLlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5zZW5kUGFja2V0ID0gZnVuY3Rpb24gKHR5cGUsIGRhdGEsIG9wdGlvbnMsIGZuKSB7XG4gIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2YgZGF0YSkge1xuICAgIGZuID0gZGF0YTtcbiAgICBkYXRhID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBvcHRpb25zKSB7XG4gICAgZm4gPSBvcHRpb25zO1xuICAgIG9wdGlvbnMgPSBudWxsO1xuICB9XG5cbiAgaWYgKCdjbG9zaW5nJyA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8ICdjbG9zZWQnID09PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgb3B0aW9ucy5jb21wcmVzcyA9IGZhbHNlICE9PSBvcHRpb25zLmNvbXByZXNzO1xuXG4gIHZhciBwYWNrZXQgPSB7XG4gICAgdHlwZTogdHlwZSxcbiAgICBkYXRhOiBkYXRhLFxuICAgIG9wdGlvbnM6IG9wdGlvbnNcbiAgfTtcbiAgdGhpcy5lbWl0KCdwYWNrZXRDcmVhdGUnLCBwYWNrZXQpO1xuICB0aGlzLndyaXRlQnVmZmVyLnB1c2gocGFja2V0KTtcbiAgaWYgKGZuKSB0aGlzLm9uY2UoJ2ZsdXNoJywgZm4pO1xuICB0aGlzLmZsdXNoKCk7XG59O1xuXG4vKipcbiAqIENsb3NlcyB0aGUgY29ubmVjdGlvbi5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gKCkge1xuICBpZiAoJ29wZW5pbmcnID09PSB0aGlzLnJlYWR5U3RhdGUgfHwgJ29wZW4nID09PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICB0aGlzLnJlYWR5U3RhdGUgPSAnY2xvc2luZyc7XG5cbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICBpZiAodGhpcy53cml0ZUJ1ZmZlci5sZW5ndGgpIHtcbiAgICAgIHRoaXMub25jZSgnZHJhaW4nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLnVwZ3JhZGluZykge1xuICAgICAgICAgIHdhaXRGb3JVcGdyYWRlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2xvc2UoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICh0aGlzLnVwZ3JhZGluZykge1xuICAgICAgd2FpdEZvclVwZ3JhZGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2xvc2UoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjbG9zZSAoKSB7XG4gICAgc2VsZi5vbkNsb3NlKCdmb3JjZWQgY2xvc2UnKTtcbiAgICBkZWJ1Zygnc29ja2V0IGNsb3NpbmcgLSB0ZWxsaW5nIHRyYW5zcG9ydCB0byBjbG9zZScpO1xuICAgIHNlbGYudHJhbnNwb3J0LmNsb3NlKCk7XG4gIH1cblxuICBmdW5jdGlvbiBjbGVhbnVwQW5kQ2xvc2UgKCkge1xuICAgIHNlbGYucmVtb3ZlTGlzdGVuZXIoJ3VwZ3JhZGUnLCBjbGVhbnVwQW5kQ2xvc2UpO1xuICAgIHNlbGYucmVtb3ZlTGlzdGVuZXIoJ3VwZ3JhZGVFcnJvcicsIGNsZWFudXBBbmRDbG9zZSk7XG4gICAgY2xvc2UoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHdhaXRGb3JVcGdyYWRlICgpIHtcbiAgICAvLyB3YWl0IGZvciB1cGdyYWRlIHRvIGZpbmlzaCBzaW5jZSB3ZSBjYW4ndCBzZW5kIHBhY2tldHMgd2hpbGUgcGF1c2luZyBhIHRyYW5zcG9ydFxuICAgIHNlbGYub25jZSgndXBncmFkZScsIGNsZWFudXBBbmRDbG9zZSk7XG4gICAgc2VsZi5vbmNlKCd1cGdyYWRlRXJyb3InLCBjbGVhbnVwQW5kQ2xvc2UpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIHRyYW5zcG9ydCBlcnJvclxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25FcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgZGVidWcoJ3NvY2tldCBlcnJvciAlaicsIGVycik7XG4gIFNvY2tldC5wcmlvcldlYnNvY2tldFN1Y2Nlc3MgPSBmYWxzZTtcbiAgdGhpcy5lbWl0KCdlcnJvcicsIGVycik7XG4gIHRoaXMub25DbG9zZSgndHJhbnNwb3J0IGVycm9yJywgZXJyKTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gdHJhbnNwb3J0IGNsb3NlLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25DbG9zZSA9IGZ1bmN0aW9uIChyZWFzb24sIGRlc2MpIHtcbiAgaWYgKCdvcGVuaW5nJyA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8ICdvcGVuJyA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8ICdjbG9zaW5nJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgZGVidWcoJ3NvY2tldCBjbG9zZSB3aXRoIHJlYXNvbjogXCIlc1wiJywgcmVhc29uKTtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAvLyBjbGVhciB0aW1lcnNcbiAgICBjbGVhclRpbWVvdXQodGhpcy5waW5nSW50ZXJ2YWxUaW1lcik7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMucGluZ1RpbWVvdXRUaW1lcik7XG5cbiAgICAvLyBzdG9wIGV2ZW50IGZyb20gZmlyaW5nIGFnYWluIGZvciB0cmFuc3BvcnRcbiAgICB0aGlzLnRyYW5zcG9ydC5yZW1vdmVBbGxMaXN0ZW5lcnMoJ2Nsb3NlJyk7XG5cbiAgICAvLyBlbnN1cmUgdHJhbnNwb3J0IHdvbid0IHN0YXkgb3BlblxuICAgIHRoaXMudHJhbnNwb3J0LmNsb3NlKCk7XG5cbiAgICAvLyBpZ25vcmUgZnVydGhlciB0cmFuc3BvcnQgY29tbXVuaWNhdGlvblxuICAgIHRoaXMudHJhbnNwb3J0LnJlbW92ZUFsbExpc3RlbmVycygpO1xuXG4gICAgLy8gc2V0IHJlYWR5IHN0YXRlXG4gICAgdGhpcy5yZWFkeVN0YXRlID0gJ2Nsb3NlZCc7XG5cbiAgICAvLyBjbGVhciBzZXNzaW9uIGlkXG4gICAgdGhpcy5pZCA9IG51bGw7XG5cbiAgICAvLyBlbWl0IGNsb3NlIGV2ZW50XG4gICAgdGhpcy5lbWl0KCdjbG9zZScsIHJlYXNvbiwgZGVzYyk7XG5cbiAgICAvLyBjbGVhbiBidWZmZXJzIGFmdGVyLCBzbyB1c2VycyBjYW4gc3RpbGxcbiAgICAvLyBncmFiIHRoZSBidWZmZXJzIG9uIGBjbG9zZWAgZXZlbnRcbiAgICBzZWxmLndyaXRlQnVmZmVyID0gW107XG4gICAgc2VsZi5wcmV2QnVmZmVyTGVuID0gMDtcbiAgfVxufTtcblxuLyoqXG4gKiBGaWx0ZXJzIHVwZ3JhZGVzLCByZXR1cm5pbmcgb25seSB0aG9zZSBtYXRjaGluZyBjbGllbnQgdHJhbnNwb3J0cy5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBzZXJ2ZXIgdXBncmFkZXNcbiAqIEBhcGkgcHJpdmF0ZVxuICpcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLmZpbHRlclVwZ3JhZGVzID0gZnVuY3Rpb24gKHVwZ3JhZGVzKSB7XG4gIHZhciBmaWx0ZXJlZFVwZ3JhZGVzID0gW107XG4gIGZvciAodmFyIGkgPSAwLCBqID0gdXBncmFkZXMubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgaWYgKH5pbmRleCh0aGlzLnRyYW5zcG9ydHMsIHVwZ3JhZGVzW2ldKSkgZmlsdGVyZWRVcGdyYWRlcy5wdXNoKHVwZ3JhZGVzW2ldKTtcbiAgfVxuICByZXR1cm4gZmlsdGVyZWRVcGdyYWRlcztcbn07XG4iLCJcbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKlxuICogTG9naWMgYm9ycm93ZWQgZnJvbSBNb2Rlcm5penI6XG4gKlxuICogICAtIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL2ZlYXR1cmUtZGV0ZWN0cy9jb3JzLmpzXG4gKi9cblxudHJ5IHtcbiAgbW9kdWxlLmV4cG9ydHMgPSB0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09ICd1bmRlZmluZWQnICYmXG4gICAgJ3dpdGhDcmVkZW50aWFscycgaW4gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG59IGNhdGNoIChlcnIpIHtcbiAgLy8gaWYgWE1MSHR0cCBzdXBwb3J0IGlzIGRpc2FibGVkIGluIElFIHRoZW4gaXQgd2lsbCB0aHJvd1xuICAvLyB3aGVuIHRyeWluZyB0byBjcmVhdGVcbiAgbW9kdWxlLmV4cG9ydHMgPSBmYWxzZTtcbn1cbiIsIi8qKlxuICogTW9kdWxlIHJlcXVpcmVtZW50cy5cbiAqL1xuXG52YXIgWE1MSHR0cFJlcXVlc3QgPSByZXF1aXJlKCd4bWxodHRwcmVxdWVzdC1zc2wnKTtcbnZhciBQb2xsaW5nID0gcmVxdWlyZSgnLi9wb2xsaW5nJyk7XG52YXIgRW1pdHRlciA9IHJlcXVpcmUoJ2NvbXBvbmVudC1lbWl0dGVyJyk7XG52YXIgaW5oZXJpdCA9IHJlcXVpcmUoJ2NvbXBvbmVudC1pbmhlcml0Jyk7XG52YXIgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdlbmdpbmUuaW8tY2xpZW50OnBvbGxpbmcteGhyJyk7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBYSFI7XG5tb2R1bGUuZXhwb3J0cy5SZXF1ZXN0ID0gUmVxdWVzdDtcblxuLyoqXG4gKiBFbXB0eSBmdW5jdGlvblxuICovXG5cbmZ1bmN0aW9uIGVtcHR5ICgpIHt9XG5cbi8qKlxuICogWEhSIFBvbGxpbmcgY29uc3RydWN0b3IuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdHNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gWEhSIChvcHRzKSB7XG4gIFBvbGxpbmcuY2FsbCh0aGlzLCBvcHRzKTtcbiAgdGhpcy5yZXF1ZXN0VGltZW91dCA9IG9wdHMucmVxdWVzdFRpbWVvdXQ7XG4gIHRoaXMuZXh0cmFIZWFkZXJzID0gb3B0cy5leHRyYUhlYWRlcnM7XG5cbiAgaWYgKGdsb2JhbC5sb2NhdGlvbikge1xuICAgIHZhciBpc1NTTCA9ICdodHRwczonID09PSBsb2NhdGlvbi5wcm90b2NvbDtcbiAgICB2YXIgcG9ydCA9IGxvY2F0aW9uLnBvcnQ7XG5cbiAgICAvLyBzb21lIHVzZXIgYWdlbnRzIGhhdmUgZW1wdHkgYGxvY2F0aW9uLnBvcnRgXG4gICAgaWYgKCFwb3J0KSB7XG4gICAgICBwb3J0ID0gaXNTU0wgPyA0NDMgOiA4MDtcbiAgICB9XG5cbiAgICB0aGlzLnhkID0gb3B0cy5ob3N0bmFtZSAhPT0gZ2xvYmFsLmxvY2F0aW9uLmhvc3RuYW1lIHx8XG4gICAgICBwb3J0ICE9PSBvcHRzLnBvcnQ7XG4gICAgdGhpcy54cyA9IG9wdHMuc2VjdXJlICE9PSBpc1NTTDtcbiAgfVxufVxuXG4vKipcbiAqIEluaGVyaXRzIGZyb20gUG9sbGluZy5cbiAqL1xuXG5pbmhlcml0KFhIUiwgUG9sbGluZyk7XG5cbi8qKlxuICogWEhSIHN1cHBvcnRzIGJpbmFyeVxuICovXG5cblhIUi5wcm90b3R5cGUuc3VwcG9ydHNCaW5hcnkgPSB0cnVlO1xuXG4vKipcbiAqIENyZWF0ZXMgYSByZXF1ZXN0LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBtZXRob2RcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblhIUi5wcm90b3R5cGUucmVxdWVzdCA9IGZ1bmN0aW9uIChvcHRzKSB7XG4gIG9wdHMgPSBvcHRzIHx8IHt9O1xuICBvcHRzLnVyaSA9IHRoaXMudXJpKCk7XG4gIG9wdHMueGQgPSB0aGlzLnhkO1xuICBvcHRzLnhzID0gdGhpcy54cztcbiAgb3B0cy5hZ2VudCA9IHRoaXMuYWdlbnQgfHwgZmFsc2U7XG4gIG9wdHMuc3VwcG9ydHNCaW5hcnkgPSB0aGlzLnN1cHBvcnRzQmluYXJ5O1xuICBvcHRzLmVuYWJsZXNYRFIgPSB0aGlzLmVuYWJsZXNYRFI7XG5cbiAgLy8gU1NMIG9wdGlvbnMgZm9yIE5vZGUuanMgY2xpZW50XG4gIG9wdHMucGZ4ID0gdGhpcy5wZng7XG4gIG9wdHMua2V5ID0gdGhpcy5rZXk7XG4gIG9wdHMucGFzc3BocmFzZSA9IHRoaXMucGFzc3BocmFzZTtcbiAgb3B0cy5jZXJ0ID0gdGhpcy5jZXJ0O1xuICBvcHRzLmNhID0gdGhpcy5jYTtcbiAgb3B0cy5jaXBoZXJzID0gdGhpcy5jaXBoZXJzO1xuICBvcHRzLnJlamVjdFVuYXV0aG9yaXplZCA9IHRoaXMucmVqZWN0VW5hdXRob3JpemVkO1xuICBvcHRzLnJlcXVlc3RUaW1lb3V0ID0gdGhpcy5yZXF1ZXN0VGltZW91dDtcblxuICAvLyBvdGhlciBvcHRpb25zIGZvciBOb2RlLmpzIGNsaWVudFxuICBvcHRzLmV4dHJhSGVhZGVycyA9IHRoaXMuZXh0cmFIZWFkZXJzO1xuXG4gIHJldHVybiBuZXcgUmVxdWVzdChvcHRzKTtcbn07XG5cbi8qKlxuICogU2VuZHMgZGF0YS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZGF0YSB0byBzZW5kLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGVkIHVwb24gZmx1c2guXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5YSFIucHJvdG90eXBlLmRvV3JpdGUgPSBmdW5jdGlvbiAoZGF0YSwgZm4pIHtcbiAgdmFyIGlzQmluYXJ5ID0gdHlwZW9mIGRhdGEgIT09ICdzdHJpbmcnICYmIGRhdGEgIT09IHVuZGVmaW5lZDtcbiAgdmFyIHJlcSA9IHRoaXMucmVxdWVzdCh7IG1ldGhvZDogJ1BPU1QnLCBkYXRhOiBkYXRhLCBpc0JpbmFyeTogaXNCaW5hcnkgfSk7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgcmVxLm9uKCdzdWNjZXNzJywgZm4pO1xuICByZXEub24oJ2Vycm9yJywgZnVuY3Rpb24gKGVycikge1xuICAgIHNlbGYub25FcnJvcigneGhyIHBvc3QgZXJyb3InLCBlcnIpO1xuICB9KTtcbiAgdGhpcy5zZW5kWGhyID0gcmVxO1xufTtcblxuLyoqXG4gKiBTdGFydHMgYSBwb2xsIGN5Y2xlLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblhIUi5wcm90b3R5cGUuZG9Qb2xsID0gZnVuY3Rpb24gKCkge1xuICBkZWJ1ZygneGhyIHBvbGwnKTtcbiAgdmFyIHJlcSA9IHRoaXMucmVxdWVzdCgpO1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHJlcS5vbignZGF0YScsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgc2VsZi5vbkRhdGEoZGF0YSk7XG4gIH0pO1xuICByZXEub24oJ2Vycm9yJywgZnVuY3Rpb24gKGVycikge1xuICAgIHNlbGYub25FcnJvcigneGhyIHBvbGwgZXJyb3InLCBlcnIpO1xuICB9KTtcbiAgdGhpcy5wb2xsWGhyID0gcmVxO1xufTtcblxuLyoqXG4gKiBSZXF1ZXN0IGNvbnN0cnVjdG9yXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gUmVxdWVzdCAob3B0cykge1xuICB0aGlzLm1ldGhvZCA9IG9wdHMubWV0aG9kIHx8ICdHRVQnO1xuICB0aGlzLnVyaSA9IG9wdHMudXJpO1xuICB0aGlzLnhkID0gISFvcHRzLnhkO1xuICB0aGlzLnhzID0gISFvcHRzLnhzO1xuICB0aGlzLmFzeW5jID0gZmFsc2UgIT09IG9wdHMuYXN5bmM7XG4gIHRoaXMuZGF0YSA9IHVuZGVmaW5lZCAhPT0gb3B0cy5kYXRhID8gb3B0cy5kYXRhIDogbnVsbDtcbiAgdGhpcy5hZ2VudCA9IG9wdHMuYWdlbnQ7XG4gIHRoaXMuaXNCaW5hcnkgPSBvcHRzLmlzQmluYXJ5O1xuICB0aGlzLnN1cHBvcnRzQmluYXJ5ID0gb3B0cy5zdXBwb3J0c0JpbmFyeTtcbiAgdGhpcy5lbmFibGVzWERSID0gb3B0cy5lbmFibGVzWERSO1xuICB0aGlzLnJlcXVlc3RUaW1lb3V0ID0gb3B0cy5yZXF1ZXN0VGltZW91dDtcblxuICAvLyBTU0wgb3B0aW9ucyBmb3IgTm9kZS5qcyBjbGllbnRcbiAgdGhpcy5wZnggPSBvcHRzLnBmeDtcbiAgdGhpcy5rZXkgPSBvcHRzLmtleTtcbiAgdGhpcy5wYXNzcGhyYXNlID0gb3B0cy5wYXNzcGhyYXNlO1xuICB0aGlzLmNlcnQgPSBvcHRzLmNlcnQ7XG4gIHRoaXMuY2EgPSBvcHRzLmNhO1xuICB0aGlzLmNpcGhlcnMgPSBvcHRzLmNpcGhlcnM7XG4gIHRoaXMucmVqZWN0VW5hdXRob3JpemVkID0gb3B0cy5yZWplY3RVbmF1dGhvcml6ZWQ7XG5cbiAgLy8gb3RoZXIgb3B0aW9ucyBmb3IgTm9kZS5qcyBjbGllbnRcbiAgdGhpcy5leHRyYUhlYWRlcnMgPSBvcHRzLmV4dHJhSGVhZGVycztcblxuICB0aGlzLmNyZWF0ZSgpO1xufVxuXG4vKipcbiAqIE1peCBpbiBgRW1pdHRlcmAuXG4gKi9cblxuRW1pdHRlcihSZXF1ZXN0LnByb3RvdHlwZSk7XG5cbi8qKlxuICogQ3JlYXRlcyB0aGUgWEhSIG9iamVjdCBhbmQgc2VuZHMgdGhlIHJlcXVlc3QuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUuY3JlYXRlID0gZnVuY3Rpb24gKCkge1xuICB2YXIgb3B0cyA9IHsgYWdlbnQ6IHRoaXMuYWdlbnQsIHhkb21haW46IHRoaXMueGQsIHhzY2hlbWU6IHRoaXMueHMsIGVuYWJsZXNYRFI6IHRoaXMuZW5hYmxlc1hEUiB9O1xuXG4gIC8vIFNTTCBvcHRpb25zIGZvciBOb2RlLmpzIGNsaWVudFxuICBvcHRzLnBmeCA9IHRoaXMucGZ4O1xuICBvcHRzLmtleSA9IHRoaXMua2V5O1xuICBvcHRzLnBhc3NwaHJhc2UgPSB0aGlzLnBhc3NwaHJhc2U7XG4gIG9wdHMuY2VydCA9IHRoaXMuY2VydDtcbiAgb3B0cy5jYSA9IHRoaXMuY2E7XG4gIG9wdHMuY2lwaGVycyA9IHRoaXMuY2lwaGVycztcbiAgb3B0cy5yZWplY3RVbmF1dGhvcml6ZWQgPSB0aGlzLnJlamVjdFVuYXV0aG9yaXplZDtcblxuICB2YXIgeGhyID0gdGhpcy54aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3Qob3B0cyk7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICB0cnkge1xuICAgIGRlYnVnKCd4aHIgb3BlbiAlczogJXMnLCB0aGlzLm1ldGhvZCwgdGhpcy51cmkpO1xuICAgIHhoci5vcGVuKHRoaXMubWV0aG9kLCB0aGlzLnVyaSwgdGhpcy5hc3luYyk7XG4gICAgdHJ5IHtcbiAgICAgIGlmICh0aGlzLmV4dHJhSGVhZGVycykge1xuICAgICAgICB4aHIuc2V0RGlzYWJsZUhlYWRlckNoZWNrICYmIHhoci5zZXREaXNhYmxlSGVhZGVyQ2hlY2sodHJ1ZSk7XG4gICAgICAgIGZvciAodmFyIGkgaW4gdGhpcy5leHRyYUhlYWRlcnMpIHtcbiAgICAgICAgICBpZiAodGhpcy5leHRyYUhlYWRlcnMuaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKGksIHRoaXMuZXh0cmFIZWFkZXJzW2ldKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7fVxuXG4gICAgaWYgKCdQT1NUJyA9PT0gdGhpcy5tZXRob2QpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmICh0aGlzLmlzQmluYXJ5KSB7XG4gICAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoJ0NvbnRlbnQtdHlwZScsICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignQ29udGVudC10eXBlJywgJ3RleHQvcGxhaW47Y2hhcnNldD1VVEYtOCcpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlKSB7fVxuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignQWNjZXB0JywgJyovKicpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG5cbiAgICAvLyBpZTYgY2hlY2tcbiAgICBpZiAoJ3dpdGhDcmVkZW50aWFscycgaW4geGhyKSB7XG4gICAgICB4aHIud2l0aENyZWRlbnRpYWxzID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5yZXF1ZXN0VGltZW91dCkge1xuICAgICAgeGhyLnRpbWVvdXQgPSB0aGlzLnJlcXVlc3RUaW1lb3V0O1xuICAgIH1cblxuICAgIGlmICh0aGlzLmhhc1hEUigpKSB7XG4gICAgICB4aHIub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBzZWxmLm9uTG9hZCgpO1xuICAgICAgfTtcbiAgICAgIHhoci5vbmVycm9yID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBzZWxmLm9uRXJyb3IoeGhyLnJlc3BvbnNlVGV4dCk7XG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPT09IDIpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIGNvbnRlbnRUeXBlID0geGhyLmdldFJlc3BvbnNlSGVhZGVyKCdDb250ZW50LVR5cGUnKTtcbiAgICAgICAgICAgIGlmIChzZWxmLnN1cHBvcnRzQmluYXJ5ICYmIGNvbnRlbnRUeXBlID09PSAnYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtJykge1xuICAgICAgICAgICAgICB4aHIucmVzcG9uc2VUeXBlID0gJ2FycmF5YnVmZmVyJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICB9XG4gICAgICAgIGlmICg0ICE9PSB4aHIucmVhZHlTdGF0ZSkgcmV0dXJuO1xuICAgICAgICBpZiAoMjAwID09PSB4aHIuc3RhdHVzIHx8IDEyMjMgPT09IHhoci5zdGF0dXMpIHtcbiAgICAgICAgICBzZWxmLm9uTG9hZCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIG1ha2Ugc3VyZSB0aGUgYGVycm9yYCBldmVudCBoYW5kbGVyIHRoYXQncyB1c2VyLXNldFxuICAgICAgICAgIC8vIGRvZXMgbm90IHRocm93IGluIHRoZSBzYW1lIHRpY2sgYW5kIGdldHMgY2F1Z2h0IGhlcmVcbiAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHNlbGYub25FcnJvcih4aHIuc3RhdHVzKTtcbiAgICAgICAgICB9LCAwKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBkZWJ1ZygneGhyIGRhdGEgJXMnLCB0aGlzLmRhdGEpO1xuICAgIHhoci5zZW5kKHRoaXMuZGF0YSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBOZWVkIHRvIGRlZmVyIHNpbmNlIC5jcmVhdGUoKSBpcyBjYWxsZWQgZGlyZWN0bHkgZmhyb20gdGhlIGNvbnN0cnVjdG9yXG4gICAgLy8gYW5kIHRodXMgdGhlICdlcnJvcicgZXZlbnQgY2FuIG9ubHkgYmUgb25seSBib3VuZCAqYWZ0ZXIqIHRoaXMgZXhjZXB0aW9uXG4gICAgLy8gb2NjdXJzLiAgVGhlcmVmb3JlLCBhbHNvLCB3ZSBjYW5ub3QgdGhyb3cgaGVyZSBhdCBhbGwuXG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBzZWxmLm9uRXJyb3IoZSk7XG4gICAgfSwgMCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGdsb2JhbC5kb2N1bWVudCkge1xuICAgIHRoaXMuaW5kZXggPSBSZXF1ZXN0LnJlcXVlc3RzQ291bnQrKztcbiAgICBSZXF1ZXN0LnJlcXVlc3RzW3RoaXMuaW5kZXhdID0gdGhpcztcbiAgfVxufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBzdWNjZXNzZnVsIHJlc3BvbnNlLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblJlcXVlc3QucHJvdG90eXBlLm9uU3VjY2VzcyA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5lbWl0KCdzdWNjZXNzJyk7XG4gIHRoaXMuY2xlYW51cCgpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgaWYgd2UgaGF2ZSBkYXRhLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblJlcXVlc3QucHJvdG90eXBlLm9uRGF0YSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHRoaXMuZW1pdCgnZGF0YScsIGRhdGEpO1xuICB0aGlzLm9uU3VjY2VzcygpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBlcnJvci5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5SZXF1ZXN0LnByb3RvdHlwZS5vbkVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICB0aGlzLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgdGhpcy5jbGVhbnVwKHRydWUpO1xufTtcblxuLyoqXG4gKiBDbGVhbnMgdXAgaG91c2UuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUuY2xlYW51cCA9IGZ1bmN0aW9uIChmcm9tRXJyb3IpIHtcbiAgaWYgKCd1bmRlZmluZWQnID09PSB0eXBlb2YgdGhpcy54aHIgfHwgbnVsbCA9PT0gdGhpcy54aHIpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8geG1saHR0cHJlcXVlc3RcbiAgaWYgKHRoaXMuaGFzWERSKCkpIHtcbiAgICB0aGlzLnhoci5vbmxvYWQgPSB0aGlzLnhoci5vbmVycm9yID0gZW1wdHk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy54aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZW1wdHk7XG4gIH1cblxuICBpZiAoZnJvbUVycm9yKSB7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMueGhyLmFib3J0KCk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfVxuXG4gIGlmIChnbG9iYWwuZG9jdW1lbnQpIHtcbiAgICBkZWxldGUgUmVxdWVzdC5yZXF1ZXN0c1t0aGlzLmluZGV4XTtcbiAgfVxuXG4gIHRoaXMueGhyID0gbnVsbDtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gbG9hZC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5SZXF1ZXN0LnByb3RvdHlwZS5vbkxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBkYXRhO1xuICB0cnkge1xuICAgIHZhciBjb250ZW50VHlwZTtcbiAgICB0cnkge1xuICAgICAgY29udGVudFR5cGUgPSB0aGlzLnhoci5nZXRSZXNwb25zZUhlYWRlcignQ29udGVudC1UeXBlJyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgICBpZiAoY29udGVudFR5cGUgPT09ICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nKSB7XG4gICAgICBkYXRhID0gdGhpcy54aHIucmVzcG9uc2UgfHwgdGhpcy54aHIucmVzcG9uc2VUZXh0O1xuICAgIH0gZWxzZSB7XG4gICAgICBkYXRhID0gdGhpcy54aHIucmVzcG9uc2VUZXh0O1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIHRoaXMub25FcnJvcihlKTtcbiAgfVxuICBpZiAobnVsbCAhPSBkYXRhKSB7XG4gICAgdGhpcy5vbkRhdGEoZGF0YSk7XG4gIH1cbn07XG5cbi8qKlxuICogQ2hlY2sgaWYgaXQgaGFzIFhEb21haW5SZXF1ZXN0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblJlcXVlc3QucHJvdG90eXBlLmhhc1hEUiA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICd1bmRlZmluZWQnICE9PSB0eXBlb2YgZ2xvYmFsLlhEb21haW5SZXF1ZXN0ICYmICF0aGlzLnhzICYmIHRoaXMuZW5hYmxlc1hEUjtcbn07XG5cbi8qKlxuICogQWJvcnRzIHRoZSByZXF1ZXN0LlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUuYWJvcnQgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuY2xlYW51cCgpO1xufTtcblxuLyoqXG4gKiBBYm9ydHMgcGVuZGluZyByZXF1ZXN0cyB3aGVuIHVubG9hZGluZyB0aGUgd2luZG93LiBUaGlzIGlzIG5lZWRlZCB0byBwcmV2ZW50XG4gKiBtZW1vcnkgbGVha3MgKGUuZy4gd2hlbiB1c2luZyBJRSkgYW5kIHRvIGVuc3VyZSB0aGF0IG5vIHNwdXJpb3VzIGVycm9yIGlzXG4gKiBlbWl0dGVkLlxuICovXG5cblJlcXVlc3QucmVxdWVzdHNDb3VudCA9IDA7XG5SZXF1ZXN0LnJlcXVlc3RzID0ge307XG5cbmlmIChnbG9iYWwuZG9jdW1lbnQpIHtcbiAgaWYgKGdsb2JhbC5hdHRhY2hFdmVudCkge1xuICAgIGdsb2JhbC5hdHRhY2hFdmVudCgnb251bmxvYWQnLCB1bmxvYWRIYW5kbGVyKTtcbiAgfSBlbHNlIGlmIChnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKCdiZWZvcmV1bmxvYWQnLCB1bmxvYWRIYW5kbGVyLCBmYWxzZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdW5sb2FkSGFuZGxlciAoKSB7XG4gIGZvciAodmFyIGkgaW4gUmVxdWVzdC5yZXF1ZXN0cykge1xuICAgIGlmIChSZXF1ZXN0LnJlcXVlc3RzLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICBSZXF1ZXN0LnJlcXVlc3RzW2ldLmFib3J0KCk7XG4gICAgfVxuICB9XG59XG4iLCJcbi8qKlxuICogR2V0cyB0aGUga2V5cyBmb3IgYW4gb2JqZWN0LlxuICpcbiAqIEByZXR1cm4ge0FycmF5fSBrZXlzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIGtleXMgKG9iail7XG4gIHZhciBhcnIgPSBbXTtcbiAgdmFyIGhhcyA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbiAgZm9yICh2YXIgaSBpbiBvYmopIHtcbiAgICBpZiAoaGFzLmNhbGwob2JqLCBpKSkge1xuICAgICAgYXJyLnB1c2goaSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBhcnI7XG59O1xuIiwiLyohXG4gKiBUaGUgYnVmZmVyIG1vZHVsZSBmcm9tIG5vZGUuanMsIGZvciB0aGUgYnJvd3Nlci5cbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8ZmVyb3NzQGZlcm9zcy5vcmc+IDxodHRwOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbnZhciBiYXNlNjQgPSByZXF1aXJlKCdiYXNlNjQtanMnKVxudmFyIGllZWU3NTQgPSByZXF1aXJlKCdpZWVlNzU0JylcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpXG5cbmV4cG9ydHMuQnVmZmVyID0gQnVmZmVyXG5leHBvcnRzLlNsb3dCdWZmZXIgPSBTbG93QnVmZmVyXG5leHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTID0gNTBcblxuLyoqXG4gKiBJZiBgQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRgOlxuICogICA9PT0gdHJ1ZSAgICBVc2UgVWludDhBcnJheSBpbXBsZW1lbnRhdGlvbiAoZmFzdGVzdClcbiAqICAgPT09IGZhbHNlICAgVXNlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiAobW9zdCBjb21wYXRpYmxlLCBldmVuIElFNilcbiAqXG4gKiBCcm93c2VycyB0aGF0IHN1cHBvcnQgdHlwZWQgYXJyYXlzIGFyZSBJRSAxMCssIEZpcmVmb3ggNCssIENocm9tZSA3KywgU2FmYXJpIDUuMSssXG4gKiBPcGVyYSAxMS42KywgaU9TIDQuMisuXG4gKlxuICogRHVlIHRvIHZhcmlvdXMgYnJvd3NlciBidWdzLCBzb21ldGltZXMgdGhlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiB3aWxsIGJlIHVzZWQgZXZlblxuICogd2hlbiB0aGUgYnJvd3NlciBzdXBwb3J0cyB0eXBlZCBhcnJheXMuXG4gKlxuICogTm90ZTpcbiAqXG4gKiAgIC0gRmlyZWZveCA0LTI5IGxhY2tzIHN1cHBvcnQgZm9yIGFkZGluZyBuZXcgcHJvcGVydGllcyB0byBgVWludDhBcnJheWAgaW5zdGFuY2VzLFxuICogICAgIFNlZTogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njk1NDM4LlxuICpcbiAqICAgLSBDaHJvbWUgOS0xMCBpcyBtaXNzaW5nIHRoZSBgVHlwZWRBcnJheS5wcm90b3R5cGUuc3ViYXJyYXlgIGZ1bmN0aW9uLlxuICpcbiAqICAgLSBJRTEwIGhhcyBhIGJyb2tlbiBgVHlwZWRBcnJheS5wcm90b3R5cGUuc3ViYXJyYXlgIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYXJyYXlzIG9mXG4gKiAgICAgaW5jb3JyZWN0IGxlbmd0aCBpbiBzb21lIHNpdHVhdGlvbnMuXG5cbiAqIFdlIGRldGVjdCB0aGVzZSBidWdneSBicm93c2VycyBhbmQgc2V0IGBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVGAgdG8gYGZhbHNlYCBzbyB0aGV5XG4gKiBnZXQgdGhlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiwgd2hpY2ggaXMgc2xvd2VyIGJ1dCBiZWhhdmVzIGNvcnJlY3RseS5cbiAqL1xuQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgPSBnbG9iYWwuVFlQRURfQVJSQVlfU1VQUE9SVCAhPT0gdW5kZWZpbmVkXG4gID8gZ2xvYmFsLlRZUEVEX0FSUkFZX1NVUFBPUlRcbiAgOiB0eXBlZEFycmF5U3VwcG9ydCgpXG5cbi8qXG4gKiBFeHBvcnQga01heExlbmd0aCBhZnRlciB0eXBlZCBhcnJheSBzdXBwb3J0IGlzIGRldGVybWluZWQuXG4gKi9cbmV4cG9ydHMua01heExlbmd0aCA9IGtNYXhMZW5ndGgoKVxuXG5mdW5jdGlvbiB0eXBlZEFycmF5U3VwcG9ydCAoKSB7XG4gIHRyeSB7XG4gICAgdmFyIGFyciA9IG5ldyBVaW50OEFycmF5KDEpXG4gICAgYXJyLl9fcHJvdG9fXyA9IHtfX3Byb3RvX186IFVpbnQ4QXJyYXkucHJvdG90eXBlLCBmb286IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDQyIH19XG4gICAgcmV0dXJuIGFyci5mb28oKSA9PT0gNDIgJiYgLy8gdHlwZWQgYXJyYXkgaW5zdGFuY2VzIGNhbiBiZSBhdWdtZW50ZWRcbiAgICAgICAgdHlwZW9mIGFyci5zdWJhcnJheSA9PT0gJ2Z1bmN0aW9uJyAmJiAvLyBjaHJvbWUgOS0xMCBsYWNrIGBzdWJhcnJheWBcbiAgICAgICAgYXJyLnN1YmFycmF5KDEsIDEpLmJ5dGVMZW5ndGggPT09IDAgLy8gaWUxMCBoYXMgYnJva2VuIGBzdWJhcnJheWBcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbmZ1bmN0aW9uIGtNYXhMZW5ndGggKCkge1xuICByZXR1cm4gQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRcbiAgICA/IDB4N2ZmZmZmZmZcbiAgICA6IDB4M2ZmZmZmZmZcbn1cblxuZnVuY3Rpb24gY3JlYXRlQnVmZmVyICh0aGF0LCBsZW5ndGgpIHtcbiAgaWYgKGtNYXhMZW5ndGgoKSA8IGxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIHR5cGVkIGFycmF5IGxlbmd0aCcpXG4gIH1cbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UsIGZvciBiZXN0IHBlcmZvcm1hbmNlXG4gICAgdGhhdCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aClcbiAgICB0aGF0Ll9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICAvLyBGYWxsYmFjazogUmV0dXJuIGFuIG9iamVjdCBpbnN0YW5jZSBvZiB0aGUgQnVmZmVyIGNsYXNzXG4gICAgaWYgKHRoYXQgPT09IG51bGwpIHtcbiAgICAgIHRoYXQgPSBuZXcgQnVmZmVyKGxlbmd0aClcbiAgICB9XG4gICAgdGhhdC5sZW5ndGggPSBsZW5ndGhcbiAgfVxuXG4gIHJldHVybiB0aGF0XG59XG5cbi8qKlxuICogVGhlIEJ1ZmZlciBjb25zdHJ1Y3RvciByZXR1cm5zIGluc3RhbmNlcyBvZiBgVWludDhBcnJheWAgdGhhdCBoYXZlIHRoZWlyXG4gKiBwcm90b3R5cGUgY2hhbmdlZCB0byBgQnVmZmVyLnByb3RvdHlwZWAuIEZ1cnRoZXJtb3JlLCBgQnVmZmVyYCBpcyBhIHN1YmNsYXNzIG9mXG4gKiBgVWludDhBcnJheWAsIHNvIHRoZSByZXR1cm5lZCBpbnN0YW5jZXMgd2lsbCBoYXZlIGFsbCB0aGUgbm9kZSBgQnVmZmVyYCBtZXRob2RzXG4gKiBhbmQgdGhlIGBVaW50OEFycmF5YCBtZXRob2RzLiBTcXVhcmUgYnJhY2tldCBub3RhdGlvbiB3b3JrcyBhcyBleHBlY3RlZCAtLSBpdFxuICogcmV0dXJucyBhIHNpbmdsZSBvY3RldC5cbiAqXG4gKiBUaGUgYFVpbnQ4QXJyYXlgIHByb3RvdHlwZSByZW1haW5zIHVubW9kaWZpZWQuXG4gKi9cblxuZnVuY3Rpb24gQnVmZmVyIChhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUICYmICEodGhpcyBpbnN0YW5jZW9mIEJ1ZmZlcikpIHtcbiAgICByZXR1cm4gbmV3IEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIC8vIENvbW1vbiBjYXNlLlxuICBpZiAodHlwZW9mIGFyZyA9PT0gJ251bWJlcicpIHtcbiAgICBpZiAodHlwZW9mIGVuY29kaW5nT3JPZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdJZiBlbmNvZGluZyBpcyBzcGVjaWZpZWQgdGhlbiB0aGUgZmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZydcbiAgICAgIClcbiAgICB9XG4gICAgcmV0dXJuIGFsbG9jVW5zYWZlKHRoaXMsIGFyZylcbiAgfVxuICByZXR1cm4gZnJvbSh0aGlzLCBhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnBvb2xTaXplID0gODE5MiAvLyBub3QgdXNlZCBieSB0aGlzIGltcGxlbWVudGF0aW9uXG5cbi8vIFRPRE86IExlZ2FjeSwgbm90IG5lZWRlZCBhbnltb3JlLiBSZW1vdmUgaW4gbmV4dCBtYWpvciB2ZXJzaW9uLlxuQnVmZmVyLl9hdWdtZW50ID0gZnVuY3Rpb24gKGFycikge1xuICBhcnIuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICByZXR1cm4gYXJyXG59XG5cbmZ1bmN0aW9uIGZyb20gKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInZhbHVlXCIgYXJndW1lbnQgbXVzdCBub3QgYmUgYSBudW1iZXInKVxuICB9XG5cbiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsdWUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgIHJldHVybiBmcm9tQXJyYXlCdWZmZXIodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGZyb21TdHJpbmcodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQpXG4gIH1cblxuICByZXR1cm4gZnJvbU9iamVjdCh0aGF0LCB2YWx1ZSlcbn1cblxuLyoqXG4gKiBGdW5jdGlvbmFsbHkgZXF1aXZhbGVudCB0byBCdWZmZXIoYXJnLCBlbmNvZGluZykgYnV0IHRocm93cyBhIFR5cGVFcnJvclxuICogaWYgdmFsdWUgaXMgYSBudW1iZXIuXG4gKiBCdWZmZXIuZnJvbShzdHJbLCBlbmNvZGluZ10pXG4gKiBCdWZmZXIuZnJvbShhcnJheSlcbiAqIEJ1ZmZlci5mcm9tKGJ1ZmZlcilcbiAqIEJ1ZmZlci5mcm9tKGFycmF5QnVmZmVyWywgYnl0ZU9mZnNldFssIGxlbmd0aF1dKVxuICoqL1xuQnVmZmVyLmZyb20gPSBmdW5jdGlvbiAodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gZnJvbShudWxsLCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5pZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgQnVmZmVyLnByb3RvdHlwZS5fX3Byb3RvX18gPSBVaW50OEFycmF5LnByb3RvdHlwZVxuICBCdWZmZXIuX19wcm90b19fID0gVWludDhBcnJheVxuICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnNwZWNpZXMgJiZcbiAgICAgIEJ1ZmZlcltTeW1ib2wuc3BlY2llc10gPT09IEJ1ZmZlcikge1xuICAgIC8vIEZpeCBzdWJhcnJheSgpIGluIEVTMjAxNi4gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9wdWxsLzk3XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEJ1ZmZlciwgU3ltYm9sLnNwZWNpZXMsIHtcbiAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSlcbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnRTaXplIChzaXplKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfSBlbHNlIGlmIChzaXplIDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBuZWdhdGl2ZScpXG4gIH1cbn1cblxuZnVuY3Rpb24gYWxsb2MgKHRoYXQsIHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIGFzc2VydFNpemUoc2l6ZSlcbiAgaWYgKHNpemUgPD0gMCkge1xuICAgIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSlcbiAgfVxuICBpZiAoZmlsbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gT25seSBwYXkgYXR0ZW50aW9uIHRvIGVuY29kaW5nIGlmIGl0J3MgYSBzdHJpbmcuIFRoaXNcbiAgICAvLyBwcmV2ZW50cyBhY2NpZGVudGFsbHkgc2VuZGluZyBpbiBhIG51bWJlciB0aGF0IHdvdWxkXG4gICAgLy8gYmUgaW50ZXJwcmV0dGVkIGFzIGEgc3RhcnQgb2Zmc2V0LlxuICAgIHJldHVybiB0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnXG4gICAgICA/IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKS5maWxsKGZpbGwsIGVuY29kaW5nKVxuICAgICAgOiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSkuZmlsbChmaWxsKVxuICB9XG4gIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSlcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKiBhbGxvYyhzaXplWywgZmlsbFssIGVuY29kaW5nXV0pXG4gKiovXG5CdWZmZXIuYWxsb2MgPSBmdW5jdGlvbiAoc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGFsbG9jKG51bGwsIHNpemUsIGZpbGwsIGVuY29kaW5nKVxufVxuXG5mdW5jdGlvbiBhbGxvY1Vuc2FmZSAodGhhdCwgc2l6ZSkge1xuICBhc3NlcnRTaXplKHNpemUpXG4gIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSA8IDAgPyAwIDogY2hlY2tlZChzaXplKSB8IDApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNpemU7ICsraSkge1xuICAgICAgdGhhdFtpXSA9IDBcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIEJ1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICogKi9cbkJ1ZmZlci5hbGxvY1Vuc2FmZSA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShudWxsLCBzaXplKVxufVxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIFNsb3dCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqL1xuQnVmZmVyLmFsbG9jVW5zYWZlU2xvdyA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShudWxsLCBzaXplKVxufVxuXG5mdW5jdGlvbiBmcm9tU3RyaW5nICh0aGF0LCBzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnIHx8IGVuY29kaW5nID09PSAnJykge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gIH1cblxuICBpZiAoIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiZW5jb2RpbmdcIiBtdXN0IGJlIGEgdmFsaWQgc3RyaW5nIGVuY29kaW5nJylcbiAgfVxuXG4gIHZhciBsZW5ndGggPSBieXRlTGVuZ3RoKHN0cmluZywgZW5jb2RpbmcpIHwgMFxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbmd0aClcblxuICB2YXIgYWN0dWFsID0gdGhhdC53cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuXG4gIGlmIChhY3R1YWwgIT09IGxlbmd0aCkge1xuICAgIC8vIFdyaXRpbmcgYSBoZXggc3RyaW5nLCBmb3IgZXhhbXBsZSwgdGhhdCBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlcnMgd2lsbFxuICAgIC8vIGNhdXNlIGV2ZXJ5dGhpbmcgYWZ0ZXIgdGhlIGZpcnN0IGludmFsaWQgY2hhcmFjdGVyIHRvIGJlIGlnbm9yZWQuIChlLmcuXG4gICAgLy8gJ2FieHhjZCcgd2lsbCBiZSB0cmVhdGVkIGFzICdhYicpXG4gICAgdGhhdCA9IHRoYXQuc2xpY2UoMCwgYWN0dWFsKVxuICB9XG5cbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5TGlrZSAodGhhdCwgYXJyYXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCA8IDAgPyAwIDogY2hlY2tlZChhcnJheS5sZW5ndGgpIHwgMFxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbmd0aClcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMSkge1xuICAgIHRoYXRbaV0gPSBhcnJheVtpXSAmIDI1NVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUJ1ZmZlciAodGhhdCwgYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICBhcnJheS5ieXRlTGVuZ3RoIC8vIHRoaXMgdGhyb3dzIGlmIGBhcnJheWAgaXMgbm90IGEgdmFsaWQgQXJyYXlCdWZmZXJcblxuICBpZiAoYnl0ZU9mZnNldCA8IDAgfHwgYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXFwnb2Zmc2V0XFwnIGlzIG91dCBvZiBib3VuZHMnKVxuICB9XG5cbiAgaWYgKGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0ICsgKGxlbmd0aCB8fCAwKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcXCdsZW5ndGhcXCcgaXMgb3V0IG9mIGJvdW5kcycpXG4gIH1cblxuICBpZiAoYnl0ZU9mZnNldCA9PT0gdW5kZWZpbmVkICYmIGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSlcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQpXG4gIH0gZWxzZSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UsIGZvciBiZXN0IHBlcmZvcm1hbmNlXG4gICAgdGhhdCA9IGFycmF5XG4gICAgdGhhdC5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIH0gZWxzZSB7XG4gICAgLy8gRmFsbGJhY2s6IFJldHVybiBhbiBvYmplY3QgaW5zdGFuY2Ugb2YgdGhlIEJ1ZmZlciBjbGFzc1xuICAgIHRoYXQgPSBmcm9tQXJyYXlMaWtlKHRoYXQsIGFycmF5KVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21PYmplY3QgKHRoYXQsIG9iaikge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKG9iaikpIHtcbiAgICB2YXIgbGVuID0gY2hlY2tlZChvYmoubGVuZ3RoKSB8IDBcbiAgICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbilcblxuICAgIGlmICh0aGF0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRoYXRcbiAgICB9XG5cbiAgICBvYmouY29weSh0aGF0LCAwLCAwLCBsZW4pXG4gICAgcmV0dXJuIHRoYXRcbiAgfVxuXG4gIGlmIChvYmopIHtcbiAgICBpZiAoKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgb2JqLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB8fCAnbGVuZ3RoJyBpbiBvYmopIHtcbiAgICAgIGlmICh0eXBlb2Ygb2JqLmxlbmd0aCAhPT0gJ251bWJlcicgfHwgaXNuYW4ob2JqLmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCAwKVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZyb21BcnJheUxpa2UodGhhdCwgb2JqKVxuICAgIH1cblxuICAgIGlmIChvYmoudHlwZSA9PT0gJ0J1ZmZlcicgJiYgaXNBcnJheShvYmouZGF0YSkpIHtcbiAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKHRoYXQsIG9iai5kYXRhKVxuICAgIH1cbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcsIEJ1ZmZlciwgQXJyYXlCdWZmZXIsIEFycmF5LCBvciBhcnJheS1saWtlIG9iamVjdC4nKVxufVxuXG5mdW5jdGlvbiBjaGVja2VkIChsZW5ndGgpIHtcbiAgLy8gTm90ZTogY2Fubm90IHVzZSBgbGVuZ3RoIDwga01heExlbmd0aCgpYCBoZXJlIGJlY2F1c2UgdGhhdCBmYWlscyB3aGVuXG4gIC8vIGxlbmd0aCBpcyBOYU4gKHdoaWNoIGlzIG90aGVyd2lzZSBjb2VyY2VkIHRvIHplcm8uKVxuICBpZiAobGVuZ3RoID49IGtNYXhMZW5ndGgoKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIGFsbG9jYXRlIEJ1ZmZlciBsYXJnZXIgdGhhbiBtYXhpbXVtICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICdzaXplOiAweCcgKyBrTWF4TGVuZ3RoKCkudG9TdHJpbmcoMTYpICsgJyBieXRlcycpXG4gIH1cbiAgcmV0dXJuIGxlbmd0aCB8IDBcbn1cblxuZnVuY3Rpb24gU2xvd0J1ZmZlciAobGVuZ3RoKSB7XG4gIGlmICgrbGVuZ3RoICE9IGxlbmd0aCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGVxZXFlcVxuICAgIGxlbmd0aCA9IDBcbiAgfVxuICByZXR1cm4gQnVmZmVyLmFsbG9jKCtsZW5ndGgpXG59XG5cbkJ1ZmZlci5pc0J1ZmZlciA9IGZ1bmN0aW9uIGlzQnVmZmVyIChiKSB7XG4gIHJldHVybiAhIShiICE9IG51bGwgJiYgYi5faXNCdWZmZXIpXG59XG5cbkJ1ZmZlci5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAoYSwgYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihhKSB8fCAhQnVmZmVyLmlzQnVmZmVyKGIpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnRzIG11c3QgYmUgQnVmZmVycycpXG4gIH1cblxuICBpZiAoYSA9PT0gYikgcmV0dXJuIDBcblxuICB2YXIgeCA9IGEubGVuZ3RoXG4gIHZhciB5ID0gYi5sZW5ndGhcblxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gTWF0aC5taW4oeCwgeSk7IGkgPCBsZW47ICsraSkge1xuICAgIGlmIChhW2ldICE9PSBiW2ldKSB7XG4gICAgICB4ID0gYVtpXVxuICAgICAgeSA9IGJbaV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG5CdWZmZXIuaXNFbmNvZGluZyA9IGZ1bmN0aW9uIGlzRW5jb2RpbmcgKGVuY29kaW5nKSB7XG4gIHN3aXRjaCAoU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgY2FzZSAnaGV4JzpcbiAgICBjYXNlICd1dGY4JzpcbiAgICBjYXNlICd1dGYtOCc6XG4gICAgY2FzZSAnYXNjaWknOlxuICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgY2FzZSAnYmluYXJ5JzpcbiAgICBjYXNlICdiYXNlNjQnOlxuICAgIGNhc2UgJ3VjczInOlxuICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICBjYXNlICd1dGYxNmxlJzpcbiAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5CdWZmZXIuY29uY2F0ID0gZnVuY3Rpb24gY29uY2F0IChsaXN0LCBsZW5ndGgpIHtcbiAgaWYgKCFpc0FycmF5KGxpc3QpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJylcbiAgfVxuXG4gIGlmIChsaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBCdWZmZXIuYWxsb2MoMClcbiAgfVxuXG4gIHZhciBpXG4gIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGxlbmd0aCA9IDBcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgICAgbGVuZ3RoICs9IGxpc3RbaV0ubGVuZ3RoXG4gICAgfVxuICB9XG5cbiAgdmFyIGJ1ZmZlciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShsZW5ndGgpXG4gIHZhciBwb3MgPSAwXG4gIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgdmFyIGJ1ZiA9IGxpc3RbaV1cbiAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKVxuICAgIH1cbiAgICBidWYuY29weShidWZmZXIsIHBvcylcbiAgICBwb3MgKz0gYnVmLmxlbmd0aFxuICB9XG4gIHJldHVybiBidWZmZXJcbn1cblxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHN0cmluZykpIHtcbiAgICByZXR1cm4gc3RyaW5nLmxlbmd0aFxuICB9XG4gIGlmICh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBBcnJheUJ1ZmZlci5pc1ZpZXcgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgIChBcnJheUJ1ZmZlci5pc1ZpZXcoc3RyaW5nKSB8fCBzdHJpbmcgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikpIHtcbiAgICByZXR1cm4gc3RyaW5nLmJ5dGVMZW5ndGhcbiAgfVxuICBpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHtcbiAgICBzdHJpbmcgPSAnJyArIHN0cmluZ1xuICB9XG5cbiAgdmFyIGxlbiA9IHN0cmluZy5sZW5ndGhcbiAgaWYgKGxlbiA9PT0gMCkgcmV0dXJuIDBcblxuICAvLyBVc2UgYSBmb3IgbG9vcCB0byBhdm9pZCByZWN1cnNpb25cbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcbiAgZm9yICg7Oykge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGVuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgIGNhc2UgdW5kZWZpbmVkOlxuICAgICAgICByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGhcbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiBsZW4gKiAyXG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gbGVuID4+PiAxXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICByZXR1cm4gYmFzZTY0VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGggLy8gYXNzdW1lIHV0ZjhcbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cbkJ1ZmZlci5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuXG5mdW5jdGlvbiBzbG93VG9TdHJpbmcgKGVuY29kaW5nLCBzdGFydCwgZW5kKSB7XG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG5cbiAgLy8gTm8gbmVlZCB0byB2ZXJpZnkgdGhhdCBcInRoaXMubGVuZ3RoIDw9IE1BWF9VSU5UMzJcIiBzaW5jZSBpdCdzIGEgcmVhZC1vbmx5XG4gIC8vIHByb3BlcnR5IG9mIGEgdHlwZWQgYXJyYXkuXG5cbiAgLy8gVGhpcyBiZWhhdmVzIG5laXRoZXIgbGlrZSBTdHJpbmcgbm9yIFVpbnQ4QXJyYXkgaW4gdGhhdCB3ZSBzZXQgc3RhcnQvZW5kXG4gIC8vIHRvIHRoZWlyIHVwcGVyL2xvd2VyIGJvdW5kcyBpZiB0aGUgdmFsdWUgcGFzc2VkIGlzIG91dCBvZiByYW5nZS5cbiAgLy8gdW5kZWZpbmVkIGlzIGhhbmRsZWQgc3BlY2lhbGx5IGFzIHBlciBFQ01BLTI2MiA2dGggRWRpdGlvbixcbiAgLy8gU2VjdGlvbiAxMy4zLjMuNyBSdW50aW1lIFNlbWFudGljczogS2V5ZWRCaW5kaW5nSW5pdGlhbGl6YXRpb24uXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkIHx8IHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ID0gMFxuICB9XG4gIC8vIFJldHVybiBlYXJseSBpZiBzdGFydCA+IHRoaXMubGVuZ3RoLiBEb25lIGhlcmUgdG8gcHJldmVudCBwb3RlbnRpYWwgdWludDMyXG4gIC8vIGNvZXJjaW9uIGZhaWwgYmVsb3cuXG4gIGlmIChzdGFydCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICBpZiAoZW5kID09PSB1bmRlZmluZWQgfHwgZW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICB9XG5cbiAgaWYgKGVuZCA8PSAwKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICAvLyBGb3JjZSBjb2Vyc2lvbiB0byB1aW50MzIuIFRoaXMgd2lsbCBhbHNvIGNvZXJjZSBmYWxzZXkvTmFOIHZhbHVlcyB0byAwLlxuICBlbmQgPj4+PSAwXG4gIHN0YXJ0ID4+Pj0gMFxuXG4gIGlmIChlbmQgPD0gc3RhcnQpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnXG5cbiAgd2hpbGUgKHRydWUpIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgICByZXR1cm4gYXNjaWlTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxhdGluMVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdXRmMTZsZVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9IChlbmNvZGluZyArICcnKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG4vLyBUaGUgcHJvcGVydHkgaXMgdXNlZCBieSBgQnVmZmVyLmlzQnVmZmVyYCBhbmQgYGlzLWJ1ZmZlcmAgKGluIFNhZmFyaSA1LTcpIHRvIGRldGVjdFxuLy8gQnVmZmVyIGluc3RhbmNlcy5cbkJ1ZmZlci5wcm90b3R5cGUuX2lzQnVmZmVyID0gdHJ1ZVxuXG5mdW5jdGlvbiBzd2FwIChiLCBuLCBtKSB7XG4gIHZhciBpID0gYltuXVxuICBiW25dID0gYlttXVxuICBiW21dID0gaVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXAxNiA9IGZ1bmN0aW9uIHN3YXAxNiAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgMiAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMTYtYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gMikge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDEpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMzIgPSBmdW5jdGlvbiBzd2FwMzIgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDQgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDMyLWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyAzKVxuICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyAyKVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDY0ID0gZnVuY3Rpb24gc3dhcDY0ICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSA4ICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA2NC1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA4KSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgNylcbiAgICBzd2FwKHRoaXMsIGkgKyAxLCBpICsgNilcbiAgICBzd2FwKHRoaXMsIGkgKyAyLCBpICsgNSlcbiAgICBzd2FwKHRoaXMsIGkgKyAzLCBpICsgNClcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcgKCkge1xuICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGggfCAwXG4gIGlmIChsZW5ndGggPT09IDApIHJldHVybiAnJ1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCAwLCBsZW5ndGgpXG4gIHJldHVybiBzbG93VG9TdHJpbmcuYXBwbHkodGhpcywgYXJndW1lbnRzKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIGVxdWFscyAoYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihiKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpXG4gIGlmICh0aGlzID09PSBiKSByZXR1cm4gdHJ1ZVxuICByZXR1cm4gQnVmZmVyLmNvbXBhcmUodGhpcywgYikgPT09IDBcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCAoKSB7XG4gIHZhciBzdHIgPSAnJ1xuICB2YXIgbWF4ID0gZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFU1xuICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgc3RyID0gdGhpcy50b1N0cmluZygnaGV4JywgMCwgbWF4KS5tYXRjaCgvLnsyfS9nKS5qb2luKCcgJylcbiAgICBpZiAodGhpcy5sZW5ndGggPiBtYXgpIHN0ciArPSAnIC4uLiAnXG4gIH1cbiAgcmV0dXJuICc8QnVmZmVyICcgKyBzdHIgKyAnPidcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAodGFyZ2V0LCBzdGFydCwgZW5kLCB0aGlzU3RhcnQsIHRoaXNFbmQpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIodGFyZ2V0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXInKVxuICB9XG5cbiAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICBzdGFydCA9IDBcbiAgfVxuICBpZiAoZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmQgPSB0YXJnZXQgPyB0YXJnZXQubGVuZ3RoIDogMFxuICB9XG4gIGlmICh0aGlzU3RhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXNTdGFydCA9IDBcbiAgfVxuICBpZiAodGhpc0VuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpc0VuZCA9IHRoaXMubGVuZ3RoXG4gIH1cblxuICBpZiAoc3RhcnQgPCAwIHx8IGVuZCA+IHRhcmdldC5sZW5ndGggfHwgdGhpc1N0YXJ0IDwgMCB8fCB0aGlzRW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb3V0IG9mIHJhbmdlIGluZGV4JylcbiAgfVxuXG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCAmJiBzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMFxuICB9XG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCkge1xuICAgIHJldHVybiAtMVxuICB9XG4gIGlmIChzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMVxuICB9XG5cbiAgc3RhcnQgPj4+PSAwXG4gIGVuZCA+Pj49IDBcbiAgdGhpc1N0YXJ0ID4+Pj0gMFxuICB0aGlzRW5kID4+Pj0gMFxuXG4gIGlmICh0aGlzID09PSB0YXJnZXQpIHJldHVybiAwXG5cbiAgdmFyIHggPSB0aGlzRW5kIC0gdGhpc1N0YXJ0XG4gIHZhciB5ID0gZW5kIC0gc3RhcnRcbiAgdmFyIGxlbiA9IE1hdGgubWluKHgsIHkpXG5cbiAgdmFyIHRoaXNDb3B5ID0gdGhpcy5zbGljZSh0aGlzU3RhcnQsIHRoaXNFbmQpXG4gIHZhciB0YXJnZXRDb3B5ID0gdGFyZ2V0LnNsaWNlKHN0YXJ0LCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgIGlmICh0aGlzQ29weVtpXSAhPT0gdGFyZ2V0Q29weVtpXSkge1xuICAgICAgeCA9IHRoaXNDb3B5W2ldXG4gICAgICB5ID0gdGFyZ2V0Q29weVtpXVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxuICBpZiAoeSA8IHgpIHJldHVybiAxXG4gIHJldHVybiAwXG59XG5cbi8vIEZpbmRzIGVpdGhlciB0aGUgZmlyc3QgaW5kZXggb2YgYHZhbGAgaW4gYGJ1ZmZlcmAgYXQgb2Zmc2V0ID49IGBieXRlT2Zmc2V0YCxcbi8vIE9SIHRoZSBsYXN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA8PSBgYnl0ZU9mZnNldGAuXG4vL1xuLy8gQXJndW1lbnRzOlxuLy8gLSBidWZmZXIgLSBhIEJ1ZmZlciB0byBzZWFyY2hcbi8vIC0gdmFsIC0gYSBzdHJpbmcsIEJ1ZmZlciwgb3IgbnVtYmVyXG4vLyAtIGJ5dGVPZmZzZXQgLSBhbiBpbmRleCBpbnRvIGBidWZmZXJgOyB3aWxsIGJlIGNsYW1wZWQgdG8gYW4gaW50MzJcbi8vIC0gZW5jb2RpbmcgLSBhbiBvcHRpb25hbCBlbmNvZGluZywgcmVsZXZhbnQgaXMgdmFsIGlzIGEgc3RyaW5nXG4vLyAtIGRpciAtIHRydWUgZm9yIGluZGV4T2YsIGZhbHNlIGZvciBsYXN0SW5kZXhPZlxuZnVuY3Rpb24gYmlkaXJlY3Rpb25hbEluZGV4T2YgKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG4gIC8vIEVtcHR5IGJ1ZmZlciBtZWFucyBubyBtYXRjaFxuICBpZiAoYnVmZmVyLmxlbmd0aCA9PT0gMCkgcmV0dXJuIC0xXG5cbiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXRcbiAgaWYgKHR5cGVvZiBieXRlT2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gYnl0ZU9mZnNldFxuICAgIGJ5dGVPZmZzZXQgPSAwXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA+IDB4N2ZmZmZmZmYpIHtcbiAgICBieXRlT2Zmc2V0ID0gMHg3ZmZmZmZmZlxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAtMHg4MDAwMDAwMCkge1xuICAgIGJ5dGVPZmZzZXQgPSAtMHg4MDAwMDAwMFxuICB9XG4gIGJ5dGVPZmZzZXQgPSArYnl0ZU9mZnNldCAgLy8gQ29lcmNlIHRvIE51bWJlci5cbiAgaWYgKGlzTmFOKGJ5dGVPZmZzZXQpKSB7XG4gICAgLy8gYnl0ZU9mZnNldDogaXQgaXQncyB1bmRlZmluZWQsIG51bGwsIE5hTiwgXCJmb29cIiwgZXRjLCBzZWFyY2ggd2hvbGUgYnVmZmVyXG4gICAgYnl0ZU9mZnNldCA9IGRpciA/IDAgOiAoYnVmZmVyLmxlbmd0aCAtIDEpXG4gIH1cblxuICAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldDogbmVnYXRpdmUgb2Zmc2V0cyBzdGFydCBmcm9tIHRoZSBlbmQgb2YgdGhlIGJ1ZmZlclxuICBpZiAoYnl0ZU9mZnNldCA8IDApIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoICsgYnl0ZU9mZnNldFxuICBpZiAoYnl0ZU9mZnNldCA+PSBidWZmZXIubGVuZ3RoKSB7XG4gICAgaWYgKGRpcikgcmV0dXJuIC0xXG4gICAgZWxzZSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCAtIDFcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgMCkge1xuICAgIGlmIChkaXIpIGJ5dGVPZmZzZXQgPSAwXG4gICAgZWxzZSByZXR1cm4gLTFcbiAgfVxuXG4gIC8vIE5vcm1hbGl6ZSB2YWxcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFsID0gQnVmZmVyLmZyb20odmFsLCBlbmNvZGluZylcbiAgfVxuXG4gIC8vIEZpbmFsbHksIHNlYXJjaCBlaXRoZXIgaW5kZXhPZiAoaWYgZGlyIGlzIHRydWUpIG9yIGxhc3RJbmRleE9mXG4gIGlmIChCdWZmZXIuaXNCdWZmZXIodmFsKSkge1xuICAgIC8vIFNwZWNpYWwgY2FzZTogbG9va2luZyBmb3IgZW1wdHkgc3RyaW5nL2J1ZmZlciBhbHdheXMgZmFpbHNcbiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIC0xXG4gICAgfVxuICAgIHJldHVybiBhcnJheUluZGV4T2YoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICB2YWwgPSB2YWwgJiAweEZGIC8vIFNlYXJjaCBmb3IgYSBieXRlIHZhbHVlIFswLTI1NV1cbiAgICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgJiZcbiAgICAgICAgdHlwZW9mIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGlmIChkaXIpIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgWyB2YWwgXSwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcilcbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ3ZhbCBtdXN0IGJlIHN0cmluZywgbnVtYmVyIG9yIEJ1ZmZlcicpXG59XG5cbmZ1bmN0aW9uIGFycmF5SW5kZXhPZiAoYXJyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHtcbiAgdmFyIGluZGV4U2l6ZSA9IDFcbiAgdmFyIGFyckxlbmd0aCA9IGFyci5sZW5ndGhcbiAgdmFyIHZhbExlbmd0aCA9IHZhbC5sZW5ndGhcblxuICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgaWYgKGVuY29kaW5nID09PSAndWNzMicgfHwgZW5jb2RpbmcgPT09ICd1Y3MtMicgfHxcbiAgICAgICAgZW5jb2RpbmcgPT09ICd1dGYxNmxlJyB8fCBlbmNvZGluZyA9PT0gJ3V0Zi0xNmxlJykge1xuICAgICAgaWYgKGFyci5sZW5ndGggPCAyIHx8IHZhbC5sZW5ndGggPCAyKSB7XG4gICAgICAgIHJldHVybiAtMVxuICAgICAgfVxuICAgICAgaW5kZXhTaXplID0gMlxuICAgICAgYXJyTGVuZ3RoIC89IDJcbiAgICAgIHZhbExlbmd0aCAvPSAyXG4gICAgICBieXRlT2Zmc2V0IC89IDJcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZWFkIChidWYsIGkpIHtcbiAgICBpZiAoaW5kZXhTaXplID09PSAxKSB7XG4gICAgICByZXR1cm4gYnVmW2ldXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBidWYucmVhZFVJbnQxNkJFKGkgKiBpbmRleFNpemUpXG4gICAgfVxuICB9XG5cbiAgdmFyIGlcbiAgaWYgKGRpcikge1xuICAgIHZhciBmb3VuZEluZGV4ID0gLTFcbiAgICBmb3IgKGkgPSBieXRlT2Zmc2V0OyBpIDwgYXJyTGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChyZWFkKGFyciwgaSkgPT09IHJlYWQodmFsLCBmb3VuZEluZGV4ID09PSAtMSA/IDAgOiBpIC0gZm91bmRJbmRleCkpIHtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggPT09IC0xKSBmb3VuZEluZGV4ID0gaVxuICAgICAgICBpZiAoaSAtIGZvdW5kSW5kZXggKyAxID09PSB2YWxMZW5ndGgpIHJldHVybiBmb3VuZEluZGV4ICogaW5kZXhTaXplXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoZm91bmRJbmRleCAhPT0gLTEpIGkgLT0gaSAtIGZvdW5kSW5kZXhcbiAgICAgICAgZm91bmRJbmRleCA9IC0xXG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChieXRlT2Zmc2V0ICsgdmFsTGVuZ3RoID4gYXJyTGVuZ3RoKSBieXRlT2Zmc2V0ID0gYXJyTGVuZ3RoIC0gdmFsTGVuZ3RoXG4gICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciBmb3VuZCA9IHRydWVcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsTGVuZ3RoOyBqKyspIHtcbiAgICAgICAgaWYgKHJlYWQoYXJyLCBpICsgaikgIT09IHJlYWQodmFsLCBqKSkge1xuICAgICAgICAgIGZvdW5kID0gZmFsc2VcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZm91bmQpIHJldHVybiBpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIC0xXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5jbHVkZXMgPSBmdW5jdGlvbiBpbmNsdWRlcyAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gdGhpcy5pbmRleE9mKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpICE9PSAtMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCB0cnVlKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmxhc3RJbmRleE9mID0gZnVuY3Rpb24gbGFzdEluZGV4T2YgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGZhbHNlKVxufVxuXG5mdW5jdGlvbiBoZXhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIG9mZnNldCA9IE51bWJlcihvZmZzZXQpIHx8IDBcbiAgdmFyIHJlbWFpbmluZyA9IGJ1Zi5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKCFsZW5ndGgpIHtcbiAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgfSBlbHNlIHtcbiAgICBsZW5ndGggPSBOdW1iZXIobGVuZ3RoKVxuICAgIGlmIChsZW5ndGggPiByZW1haW5pbmcpIHtcbiAgICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICAgIH1cbiAgfVxuXG4gIC8vIG11c3QgYmUgYW4gZXZlbiBudW1iZXIgb2YgZGlnaXRzXG4gIHZhciBzdHJMZW4gPSBzdHJpbmcubGVuZ3RoXG4gIGlmIChzdHJMZW4gJSAyICE9PSAwKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGhleCBzdHJpbmcnKVxuXG4gIGlmIChsZW5ndGggPiBzdHJMZW4gLyAyKSB7XG4gICAgbGVuZ3RoID0gc3RyTGVuIC8gMlxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgcGFyc2VkID0gcGFyc2VJbnQoc3RyaW5nLnN1YnN0cihpICogMiwgMiksIDE2KVxuICAgIGlmIChpc05hTihwYXJzZWQpKSByZXR1cm4gaVxuICAgIGJ1ZltvZmZzZXQgKyBpXSA9IHBhcnNlZFxuICB9XG4gIHJldHVybiBpXG59XG5cbmZ1bmN0aW9uIHV0ZjhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKHV0ZjhUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGFzY2lpV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcihhc2NpaVRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gbGF0aW4xV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYXNjaWlXcml0ZShidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGJhc2U2NFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIoYmFzZTY0VG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiB1Y3MyV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcih1dGYxNmxlVG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gd3JpdGUgKHN0cmluZywgb2Zmc2V0LCBsZW5ndGgsIGVuY29kaW5nKSB7XG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcpXG4gIGlmIChvZmZzZXQgPT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiBvZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jb2RpbmcgPSBvZmZzZXRcbiAgICBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICAgIG9mZnNldCA9IDBcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgb2Zmc2V0WywgbGVuZ3RoXVssIGVuY29kaW5nXSlcbiAgfSBlbHNlIGlmIChpc0Zpbml0ZShvZmZzZXQpKSB7XG4gICAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICAgIGlmIChpc0Zpbml0ZShsZW5ndGgpKSB7XG4gICAgICBsZW5ndGggPSBsZW5ndGggfCAwXG4gICAgICBpZiAoZW5jb2RpbmcgPT09IHVuZGVmaW5lZCkgZW5jb2RpbmcgPSAndXRmOCdcbiAgICB9IGVsc2Uge1xuICAgICAgZW5jb2RpbmcgPSBsZW5ndGhcbiAgICAgIGxlbmd0aCA9IHVuZGVmaW5lZFxuICAgIH1cbiAgLy8gbGVnYWN5IHdyaXRlKHN0cmluZywgZW5jb2RpbmcsIG9mZnNldCwgbGVuZ3RoKSAtIHJlbW92ZSBpbiB2MC4xM1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdCdWZmZXIud3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0WywgbGVuZ3RoXSkgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZCdcbiAgICApXG4gIH1cblxuICB2YXIgcmVtYWluaW5nID0gdGhpcy5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkIHx8IGxlbmd0aCA+IHJlbWFpbmluZykgbGVuZ3RoID0gcmVtYWluaW5nXG5cbiAgaWYgKChzdHJpbmcubGVuZ3RoID4gMCAmJiAobGVuZ3RoIDwgMCB8fCBvZmZzZXQgPCAwKSkgfHwgb2Zmc2V0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byB3cml0ZSBvdXRzaWRlIGJ1ZmZlciBib3VuZHMnKVxuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGhleFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgICAgcmV0dXJuIGFzY2lpV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsYXRpbjFXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICAvLyBXYXJuaW5nOiBtYXhMZW5ndGggbm90IHRha2VuIGludG8gYWNjb3VudCBpbiBiYXNlNjRXcml0ZVxuICAgICAgICByZXR1cm4gYmFzZTY0V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIHVjczJXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04gKCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdCdWZmZXInLFxuICAgIGRhdGE6IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMuX2FyciB8fCB0aGlzLCAwKVxuICB9XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKHN0YXJ0ID09PSAwICYmIGVuZCA9PT0gYnVmLmxlbmd0aCkge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1Zi5zbGljZShzdGFydCwgZW5kKSlcbiAgfVxufVxuXG5mdW5jdGlvbiB1dGY4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG4gIHZhciByZXMgPSBbXVxuXG4gIHZhciBpID0gc3RhcnRcbiAgd2hpbGUgKGkgPCBlbmQpIHtcbiAgICB2YXIgZmlyc3RCeXRlID0gYnVmW2ldXG4gICAgdmFyIGNvZGVQb2ludCA9IG51bGxcbiAgICB2YXIgYnl0ZXNQZXJTZXF1ZW5jZSA9IChmaXJzdEJ5dGUgPiAweEVGKSA/IDRcbiAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4REYpID8gM1xuICAgICAgOiAoZmlyc3RCeXRlID4gMHhCRikgPyAyXG4gICAgICA6IDFcblxuICAgIGlmIChpICsgYnl0ZXNQZXJTZXF1ZW5jZSA8PSBlbmQpIHtcbiAgICAgIHZhciBzZWNvbmRCeXRlLCB0aGlyZEJ5dGUsIGZvdXJ0aEJ5dGUsIHRlbXBDb2RlUG9pbnRcblxuICAgICAgc3dpdGNoIChieXRlc1BlclNlcXVlbmNlKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBpZiAoZmlyc3RCeXRlIDwgMHg4MCkge1xuICAgICAgICAgICAgY29kZVBvaW50ID0gZmlyc3RCeXRlXG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4MUYpIDw8IDB4NiB8IChzZWNvbmRCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3Rikge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweEMgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4NiB8ICh0aGlyZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGRiAmJiAodGVtcENvZGVQb2ludCA8IDB4RDgwMCB8fCB0ZW1wQ29kZVBvaW50ID4gMHhERkZGKSkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBmb3VydGhCeXRlID0gYnVmW2kgKyAzXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAoZm91cnRoQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHgxMiB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHhDIHwgKHRoaXJkQnl0ZSAmIDB4M0YpIDw8IDB4NiB8IChmb3VydGhCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHhGRkZGICYmIHRlbXBDb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjb2RlUG9pbnQgPT09IG51bGwpIHtcbiAgICAgIC8vIHdlIGRpZCBub3QgZ2VuZXJhdGUgYSB2YWxpZCBjb2RlUG9pbnQgc28gaW5zZXJ0IGFcbiAgICAgIC8vIHJlcGxhY2VtZW50IGNoYXIgKFUrRkZGRCkgYW5kIGFkdmFuY2Ugb25seSAxIGJ5dGVcbiAgICAgIGNvZGVQb2ludCA9IDB4RkZGRFxuICAgICAgYnl0ZXNQZXJTZXF1ZW5jZSA9IDFcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA+IDB4RkZGRikge1xuICAgICAgLy8gZW5jb2RlIHRvIHV0ZjE2IChzdXJyb2dhdGUgcGFpciBkYW5jZSlcbiAgICAgIGNvZGVQb2ludCAtPSAweDEwMDAwXG4gICAgICByZXMucHVzaChjb2RlUG9pbnQgPj4+IDEwICYgMHgzRkYgfCAweEQ4MDApXG4gICAgICBjb2RlUG9pbnQgPSAweERDMDAgfCBjb2RlUG9pbnQgJiAweDNGRlxuICAgIH1cblxuICAgIHJlcy5wdXNoKGNvZGVQb2ludClcbiAgICBpICs9IGJ5dGVzUGVyU2VxdWVuY2VcbiAgfVxuXG4gIHJldHVybiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkocmVzKVxufVxuXG4vLyBCYXNlZCBvbiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yMjc0NzI3Mi82ODA3NDIsIHRoZSBicm93c2VyIHdpdGhcbi8vIHRoZSBsb3dlc3QgbGltaXQgaXMgQ2hyb21lLCB3aXRoIDB4MTAwMDAgYXJncy5cbi8vIFdlIGdvIDEgbWFnbml0dWRlIGxlc3MsIGZvciBzYWZldHlcbnZhciBNQVhfQVJHVU1FTlRTX0xFTkdUSCA9IDB4MTAwMFxuXG5mdW5jdGlvbiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkgKGNvZGVQb2ludHMpIHtcbiAgdmFyIGxlbiA9IGNvZGVQb2ludHMubGVuZ3RoXG4gIGlmIChsZW4gPD0gTUFYX0FSR1VNRU5UU19MRU5HVEgpIHtcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIGNvZGVQb2ludHMpIC8vIGF2b2lkIGV4dHJhIHNsaWNlKClcbiAgfVxuXG4gIC8vIERlY29kZSBpbiBjaHVua3MgdG8gYXZvaWQgXCJjYWxsIHN0YWNrIHNpemUgZXhjZWVkZWRcIi5cbiAgdmFyIHJlcyA9ICcnXG4gIHZhciBpID0gMFxuICB3aGlsZSAoaSA8IGxlbikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFxuICAgICAgU3RyaW5nLFxuICAgICAgY29kZVBvaW50cy5zbGljZShpLCBpICs9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKVxuICAgIClcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgcmV0ID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldICYgMHg3RilcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGxhdGluMVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSlcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGhleFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGhcblxuICBpZiAoIXN0YXJ0IHx8IHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIGlmICghZW5kIHx8IGVuZCA8IDAgfHwgZW5kID4gbGVuKSBlbmQgPSBsZW5cblxuICB2YXIgb3V0ID0gJydcbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICBvdXQgKz0gdG9IZXgoYnVmW2ldKVxuICB9XG4gIHJldHVybiBvdXRcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGJ5dGVzID0gYnVmLnNsaWNlKHN0YXJ0LCBlbmQpXG4gIHZhciByZXMgPSAnJ1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZXNbaV0gKyBieXRlc1tpICsgMV0gKiAyNTYpXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24gc2xpY2UgKHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIHN0YXJ0ID0gfn5zdGFydFxuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IH5+ZW5kXG5cbiAgaWYgKHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ICs9IGxlblxuICAgIGlmIChzdGFydCA8IDApIHN0YXJ0ID0gMFxuICB9IGVsc2UgaWYgKHN0YXJ0ID4gbGVuKSB7XG4gICAgc3RhcnQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCAwKSB7XG4gICAgZW5kICs9IGxlblxuICAgIGlmIChlbmQgPCAwKSBlbmQgPSAwXG4gIH0gZWxzZSBpZiAoZW5kID4gbGVuKSB7XG4gICAgZW5kID0gbGVuXG4gIH1cblxuICBpZiAoZW5kIDwgc3RhcnQpIGVuZCA9IHN0YXJ0XG5cbiAgdmFyIG5ld0J1ZlxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICBuZXdCdWYgPSB0aGlzLnN1YmFycmF5KHN0YXJ0LCBlbmQpXG4gICAgbmV3QnVmLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICB2YXIgc2xpY2VMZW4gPSBlbmQgLSBzdGFydFxuICAgIG5ld0J1ZiA9IG5ldyBCdWZmZXIoc2xpY2VMZW4sIHVuZGVmaW5lZClcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWNlTGVuOyArK2kpIHtcbiAgICAgIG5ld0J1ZltpXSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXdCdWZcbn1cblxuLypcbiAqIE5lZWQgdG8gbWFrZSBzdXJlIHRoYXQgYnVmZmVyIGlzbid0IHRyeWluZyB0byB3cml0ZSBvdXQgb2YgYm91bmRzLlxuICovXG5mdW5jdGlvbiBjaGVja09mZnNldCAob2Zmc2V0LCBleHQsIGxlbmd0aCkge1xuICBpZiAoKG9mZnNldCAlIDEpICE9PSAwIHx8IG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdvZmZzZXQgaXMgbm90IHVpbnQnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gbGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVHJ5aW5nIHRvIGFjY2VzcyBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRMRSA9IGZ1bmN0aW9uIHJlYWRVSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsXG4gIH1cblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRCRSA9IGZ1bmN0aW9uIHJlYWRVSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG4gIH1cblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdXG4gIHZhciBtdWwgPSAxXG4gIHdoaWxlIChieXRlTGVuZ3RoID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF0gKiBtdWxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDggPSBmdW5jdGlvbiByZWFkVUludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2QkUgPSBmdW5jdGlvbiByZWFkVUludDE2QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgOCkgfCB0aGlzW29mZnNldCArIDFdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkxFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICgodGhpc1tvZmZzZXRdKSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikpICtcbiAgICAgICh0aGlzW29mZnNldCArIDNdICogMHgxMDAwMDAwKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdICogMHgxMDAwMDAwKSArXG4gICAgKCh0aGlzW29mZnNldCArIDFdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfFxuICAgIHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludExFID0gZnVuY3Rpb24gcmVhZEludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XVxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludEJFID0gZnVuY3Rpb24gcmVhZEludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoXG4gIHZhciBtdWwgPSAxXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIC0taV1cbiAgd2hpbGUgKGkgPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1pXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDggPSBmdW5jdGlvbiByZWFkSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuICBpZiAoISh0aGlzW29mZnNldF0gJiAweDgwKSkgcmV0dXJuICh0aGlzW29mZnNldF0pXG4gIHJldHVybiAoKDB4ZmYgLSB0aGlzW29mZnNldF0gKyAxKSAqIC0xKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkxFID0gZnVuY3Rpb24gcmVhZEludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIDFdIHwgKHRoaXNbb2Zmc2V0XSA8PCA4KVxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyTEUgPSBmdW5jdGlvbiByZWFkSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdKSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10gPDwgMjQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyQkUgPSBmdW5jdGlvbiByZWFkSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDI0KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0TEUgPSBmdW5jdGlvbiByZWFkRmxvYXRMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0QkUgPSBmdW5jdGlvbiByZWFkRmxvYXRCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVMRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgNTIsIDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUJFID0gZnVuY3Rpb24gcmVhZERvdWJsZUJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgNTIsIDgpXG59XG5cbmZ1bmN0aW9uIGNoZWNrSW50IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJidWZmZXJcIiBhcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyIGluc3RhbmNlJylcbiAgaWYgKHZhbHVlID4gbWF4IHx8IHZhbHVlIDwgbWluKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IGlzIG91dCBvZiBib3VuZHMnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgdmFyIG11bCA9IDFcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50OCA9IGZ1bmN0aW9uIHdyaXRlVUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHhmZiwgMClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgdmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5mdW5jdGlvbiBvYmplY3RXcml0ZVVJbnQxNiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4pIHtcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmYgKyB2YWx1ZSArIDFcbiAgZm9yICh2YXIgaSA9IDAsIGogPSBNYXRoLm1pbihidWYubGVuZ3RoIC0gb2Zmc2V0LCAyKTsgaSA8IGo7ICsraSkge1xuICAgIGJ1ZltvZmZzZXQgKyBpXSA9ICh2YWx1ZSAmICgweGZmIDw8ICg4ICogKGxpdHRsZUVuZGlhbiA/IGkgOiAxIC0gaSkpKSkgPj4+XG4gICAgICAobGl0dGxlRW5kaWFuID8gaSA6IDEgLSBpKSAqIDhcbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5mdW5jdGlvbiBvYmplY3RXcml0ZVVJbnQzMiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4pIHtcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmZmZmZmICsgdmFsdWUgKyAxXG4gIGZvciAodmFyIGkgPSAwLCBqID0gTWF0aC5taW4oYnVmLmxlbmd0aCAtIG9mZnNldCwgNCk7IGkgPCBqOyArK2kpIHtcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSAodmFsdWUgPj4+IChsaXR0bGVFbmRpYW4gPyBpIDogMyAtIGkpICogOCkgJiAweGZmXG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50TEUgPSBmdW5jdGlvbiB3cml0ZUludExFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIHZhciBpID0gMFxuICB2YXIgbXVsID0gMVxuICB2YXIgc3ViID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgLSAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50QkUgPSBmdW5jdGlvbiB3cml0ZUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHN1YiA9IDBcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgKyAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50OCA9IGZ1bmN0aW9uIHdyaXRlSW50OCAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweDdmLCAtMHg4MClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgdmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlKVxuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmYgKyB2YWx1ZSArIDFcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmZmZmZiArIHZhbHVlICsgMVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuZnVuY3Rpb24gY2hlY2tJRUVFNzU0IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxuICBpZiAob2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbmZ1bmN0aW9uIHdyaXRlRmxvYXQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgNCwgMy40MDI4MjM0NjYzODUyODg2ZSszOCwgLTMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgMjMsIDQpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdExFID0gZnVuY3Rpb24gd3JpdGVGbG9hdExFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0QkUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuZnVuY3Rpb24gd3JpdGVEb3VibGUgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgOCwgMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgsIC0xLjc5NzY5MzEzNDg2MjMxNTdFKzMwOClcbiAgfVxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCA1MiwgOClcbiAgcmV0dXJuIG9mZnNldCArIDhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUxFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlQkUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG4vLyBjb3B5KHRhcmdldEJ1ZmZlciwgdGFyZ2V0U3RhcnQ9MCwgc291cmNlU3RhcnQ9MCwgc291cmNlRW5kPWJ1ZmZlci5sZW5ndGgpXG5CdWZmZXIucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiBjb3B5ICh0YXJnZXQsIHRhcmdldFN0YXJ0LCBzdGFydCwgZW5kKSB7XG4gIGlmICghc3RhcnQpIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCAmJiBlbmQgIT09IDApIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXRTdGFydCA+PSB0YXJnZXQubGVuZ3RoKSB0YXJnZXRTdGFydCA9IHRhcmdldC5sZW5ndGhcbiAgaWYgKCF0YXJnZXRTdGFydCkgdGFyZ2V0U3RhcnQgPSAwXG4gIGlmIChlbmQgPiAwICYmIGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXG4gIC8vIENvcHkgMCBieXRlczsgd2UncmUgZG9uZVxuICBpZiAoZW5kID09PSBzdGFydCkgcmV0dXJuIDBcbiAgaWYgKHRhcmdldC5sZW5ndGggPT09IDAgfHwgdGhpcy5sZW5ndGggPT09IDApIHJldHVybiAwXG5cbiAgLy8gRmF0YWwgZXJyb3IgY29uZGl0aW9uc1xuICBpZiAodGFyZ2V0U3RhcnQgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3RhcmdldFN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICB9XG4gIGlmIChzdGFydCA8IDAgfHwgc3RhcnQgPj0gdGhpcy5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgaWYgKGVuZCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VFbmQgb3V0IG9mIGJvdW5kcycpXG5cbiAgLy8gQXJlIHdlIG9vYj9cbiAgaWYgKGVuZCA+IHRoaXMubGVuZ3RoKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0IDwgZW5kIC0gc3RhcnQpIHtcbiAgICBlbmQgPSB0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgKyBzdGFydFxuICB9XG5cbiAgdmFyIGxlbiA9IGVuZCAtIHN0YXJ0XG4gIHZhciBpXG5cbiAgaWYgKHRoaXMgPT09IHRhcmdldCAmJiBzdGFydCA8IHRhcmdldFN0YXJ0ICYmIHRhcmdldFN0YXJ0IDwgZW5kKSB7XG4gICAgLy8gZGVzY2VuZGluZyBjb3B5IGZyb20gZW5kXG4gICAgZm9yIChpID0gbGVuIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgIHRhcmdldFtpICsgdGFyZ2V0U3RhcnRdID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9IGVsc2UgaWYgKGxlbiA8IDEwMDAgfHwgIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gYXNjZW5kaW5nIGNvcHkgZnJvbSBzdGFydFxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRTdGFydF0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgVWludDhBcnJheS5wcm90b3R5cGUuc2V0LmNhbGwoXG4gICAgICB0YXJnZXQsXG4gICAgICB0aGlzLnN1YmFycmF5KHN0YXJ0LCBzdGFydCArIGxlbiksXG4gICAgICB0YXJnZXRTdGFydFxuICAgIClcbiAgfVxuXG4gIHJldHVybiBsZW5cbn1cblxuLy8gVXNhZ2U6XG4vLyAgICBidWZmZXIuZmlsbChudW1iZXJbLCBvZmZzZXRbLCBlbmRdXSlcbi8vICAgIGJ1ZmZlci5maWxsKGJ1ZmZlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoc3RyaW5nWywgb2Zmc2V0WywgZW5kXV1bLCBlbmNvZGluZ10pXG5CdWZmZXIucHJvdG90eXBlLmZpbGwgPSBmdW5jdGlvbiBmaWxsICh2YWwsIHN0YXJ0LCBlbmQsIGVuY29kaW5nKSB7XG4gIC8vIEhhbmRsZSBzdHJpbmcgY2FzZXM6XG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIGlmICh0eXBlb2Ygc3RhcnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IHN0YXJ0XG4gICAgICBzdGFydCA9IDBcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZW5kID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBlbmRcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfVxuICAgIGlmICh2YWwubGVuZ3RoID09PSAxKSB7XG4gICAgICB2YXIgY29kZSA9IHZhbC5jaGFyQ29kZUF0KDApXG4gICAgICBpZiAoY29kZSA8IDI1Nikge1xuICAgICAgICB2YWwgPSBjb2RlXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2VuY29kaW5nIG11c3QgYmUgYSBzdHJpbmcnKVxuICAgIH1cbiAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJyAmJiAhQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMjU1XG4gIH1cblxuICAvLyBJbnZhbGlkIHJhbmdlcyBhcmUgbm90IHNldCB0byBhIGRlZmF1bHQsIHNvIGNhbiByYW5nZSBjaGVjayBlYXJseS5cbiAgaWYgKHN0YXJ0IDwgMCB8fCB0aGlzLmxlbmd0aCA8IHN0YXJ0IHx8IHRoaXMubGVuZ3RoIDwgZW5kKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ091dCBvZiByYW5nZSBpbmRleCcpXG4gIH1cblxuICBpZiAoZW5kIDw9IHN0YXJ0KSB7XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIHN0YXJ0ID0gc3RhcnQgPj4+IDBcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyB0aGlzLmxlbmd0aCA6IGVuZCA+Pj4gMFxuXG4gIGlmICghdmFsKSB2YWwgPSAwXG5cbiAgdmFyIGlcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgZm9yIChpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgICAgdGhpc1tpXSA9IHZhbFxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgYnl0ZXMgPSBCdWZmZXIuaXNCdWZmZXIodmFsKVxuICAgICAgPyB2YWxcbiAgICAgIDogdXRmOFRvQnl0ZXMobmV3IEJ1ZmZlcih2YWwsIGVuY29kaW5nKS50b1N0cmluZygpKVxuICAgIHZhciBsZW4gPSBieXRlcy5sZW5ndGhcbiAgICBmb3IgKGkgPSAwOyBpIDwgZW5kIC0gc3RhcnQ7ICsraSkge1xuICAgICAgdGhpc1tpICsgc3RhcnRdID0gYnl0ZXNbaSAlIGxlbl1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpc1xufVxuXG4vLyBIRUxQRVIgRlVOQ1RJT05TXG4vLyA9PT09PT09PT09PT09PT09XG5cbnZhciBJTlZBTElEX0JBU0U2NF9SRSA9IC9bXitcXC8wLTlBLVphLXotX10vZ1xuXG5mdW5jdGlvbiBiYXNlNjRjbGVhbiAoc3RyKSB7XG4gIC8vIE5vZGUgc3RyaXBzIG91dCBpbnZhbGlkIGNoYXJhY3RlcnMgbGlrZSBcXG4gYW5kIFxcdCBmcm9tIHRoZSBzdHJpbmcsIGJhc2U2NC1qcyBkb2VzIG5vdFxuICBzdHIgPSBzdHJpbmd0cmltKHN0cikucmVwbGFjZShJTlZBTElEX0JBU0U2NF9SRSwgJycpXG4gIC8vIE5vZGUgY29udmVydHMgc3RyaW5ncyB3aXRoIGxlbmd0aCA8IDIgdG8gJydcbiAgaWYgKHN0ci5sZW5ndGggPCAyKSByZXR1cm4gJydcbiAgLy8gTm9kZSBhbGxvd3MgZm9yIG5vbi1wYWRkZWQgYmFzZTY0IHN0cmluZ3MgKG1pc3NpbmcgdHJhaWxpbmcgPT09KSwgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHdoaWxlIChzdHIubGVuZ3RoICUgNCAhPT0gMCkge1xuICAgIHN0ciA9IHN0ciArICc9J1xuICB9XG4gIHJldHVybiBzdHJcbn1cblxuZnVuY3Rpb24gc3RyaW5ndHJpbSAoc3RyKSB7XG4gIGlmIChzdHIudHJpbSkgcmV0dXJuIHN0ci50cmltKClcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCAnJylcbn1cblxuZnVuY3Rpb24gdG9IZXggKG4pIHtcbiAgaWYgKG4gPCAxNikgcmV0dXJuICcwJyArIG4udG9TdHJpbmcoMTYpXG4gIHJldHVybiBuLnRvU3RyaW5nKDE2KVxufVxuXG5mdW5jdGlvbiB1dGY4VG9CeXRlcyAoc3RyaW5nLCB1bml0cykge1xuICB1bml0cyA9IHVuaXRzIHx8IEluZmluaXR5XG4gIHZhciBjb2RlUG9pbnRcbiAgdmFyIGxlbmd0aCA9IHN0cmluZy5sZW5ndGhcbiAgdmFyIGxlYWRTdXJyb2dhdGUgPSBudWxsXG4gIHZhciBieXRlcyA9IFtdXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGNvZGVQb2ludCA9IHN0cmluZy5jaGFyQ29kZUF0KGkpXG5cbiAgICAvLyBpcyBzdXJyb2dhdGUgY29tcG9uZW50XG4gICAgaWYgKGNvZGVQb2ludCA+IDB4RDdGRiAmJiBjb2RlUG9pbnQgPCAweEUwMDApIHtcbiAgICAgIC8vIGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoIWxlYWRTdXJyb2dhdGUpIHtcbiAgICAgICAgLy8gbm8gbGVhZCB5ZXRcbiAgICAgICAgaWYgKGNvZGVQb2ludCA+IDB4REJGRikge1xuICAgICAgICAgIC8vIHVuZXhwZWN0ZWQgdHJhaWxcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2UgaWYgKGkgKyAxID09PSBsZW5ndGgpIHtcbiAgICAgICAgICAvLyB1bnBhaXJlZCBsZWFkXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHZhbGlkIGxlYWRcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIDIgbGVhZHMgaW4gYSByb3dcbiAgICAgIGlmIChjb2RlUG9pbnQgPCAweERDMDApIHtcbiAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gdmFsaWQgc3Vycm9nYXRlIHBhaXJcbiAgICAgIGNvZGVQb2ludCA9IChsZWFkU3Vycm9nYXRlIC0gMHhEODAwIDw8IDEwIHwgY29kZVBvaW50IC0gMHhEQzAwKSArIDB4MTAwMDBcbiAgICB9IGVsc2UgaWYgKGxlYWRTdXJyb2dhdGUpIHtcbiAgICAgIC8vIHZhbGlkIGJtcCBjaGFyLCBidXQgbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgIH1cblxuICAgIGxlYWRTdXJyb2dhdGUgPSBudWxsXG5cbiAgICAvLyBlbmNvZGUgdXRmOFxuICAgIGlmIChjb2RlUG9pbnQgPCAweDgwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDEpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goY29kZVBvaW50KVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHg4MDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiB8IDB4QzAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDMpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgfCAweEUwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSA0KSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHgxMiB8IDB4RjAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY29kZSBwb2ludCcpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpVG9CeXRlcyAoc3RyKSB7XG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIC8vIE5vZGUncyBjb2RlIHNlZW1zIHRvIGJlIGRvaW5nIHRoaXMgYW5kIG5vdCAmIDB4N0YuLlxuICAgIGJ5dGVBcnJheS5wdXNoKHN0ci5jaGFyQ29kZUF0KGkpICYgMHhGRilcbiAgfVxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVUb0J5dGVzIChzdHIsIHVuaXRzKSB7XG4gIHZhciBjLCBoaSwgbG9cbiAgdmFyIGJ5dGVBcnJheSA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrXG5cbiAgICBjID0gc3RyLmNoYXJDb2RlQXQoaSlcbiAgICBoaSA9IGMgPj4gOFxuICAgIGxvID0gYyAlIDI1NlxuICAgIGJ5dGVBcnJheS5wdXNoKGxvKVxuICAgIGJ5dGVBcnJheS5wdXNoKGhpKVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiBiYXNlNjRUb0J5dGVzIChzdHIpIHtcbiAgcmV0dXJuIGJhc2U2NC50b0J5dGVBcnJheShiYXNlNjRjbGVhbihzdHIpKVxufVxuXG5mdW5jdGlvbiBibGl0QnVmZmVyIChzcmMsIGRzdCwgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGlmICgoaSArIG9mZnNldCA+PSBkc3QubGVuZ3RoKSB8fCAoaSA+PSBzcmMubGVuZ3RoKSkgYnJlYWtcbiAgICBkc3RbaSArIG9mZnNldF0gPSBzcmNbaV1cbiAgfVxuICByZXR1cm4gaVxufVxuXG5mdW5jdGlvbiBpc25hbiAodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IHZhbCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtY29tcGFyZVxufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbmV4cG9ydHMuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGhcbmV4cG9ydHMudG9CeXRlQXJyYXkgPSB0b0J5dGVBcnJheVxuZXhwb3J0cy5mcm9tQnl0ZUFycmF5ID0gZnJvbUJ5dGVBcnJheVxuXG52YXIgbG9va3VwID0gW11cbnZhciByZXZMb29rdXAgPSBbXVxudmFyIEFyciA9IHR5cGVvZiBVaW50OEFycmF5ICE9PSAndW5kZWZpbmVkJyA/IFVpbnQ4QXJyYXkgOiBBcnJheVxuXG52YXIgY29kZSA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvJ1xuZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNvZGUubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgbG9va3VwW2ldID0gY29kZVtpXVxuICByZXZMb29rdXBbY29kZS5jaGFyQ29kZUF0KGkpXSA9IGlcbn1cblxuLy8gU3VwcG9ydCBkZWNvZGluZyBVUkwtc2FmZSBiYXNlNjQgc3RyaW5ncywgYXMgTm9kZS5qcyBkb2VzLlxuLy8gU2VlOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9CYXNlNjQjVVJMX2FwcGxpY2F0aW9uc1xucmV2TG9va3VwWyctJy5jaGFyQ29kZUF0KDApXSA9IDYyXG5yZXZMb29rdXBbJ18nLmNoYXJDb2RlQXQoMCldID0gNjNcblxuZnVuY3Rpb24gZ2V0TGVucyAoYjY0KSB7XG4gIHZhciBsZW4gPSBiNjQubGVuZ3RoXG5cbiAgaWYgKGxlbiAlIDQgPiAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHN0cmluZy4gTGVuZ3RoIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA0JylcbiAgfVxuXG4gIC8vIFRyaW0gb2ZmIGV4dHJhIGJ5dGVzIGFmdGVyIHBsYWNlaG9sZGVyIGJ5dGVzIGFyZSBmb3VuZFxuICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9iZWF0Z2FtbWl0L2Jhc2U2NC1qcy9pc3N1ZXMvNDJcbiAgdmFyIHZhbGlkTGVuID0gYjY0LmluZGV4T2YoJz0nKVxuICBpZiAodmFsaWRMZW4gPT09IC0xKSB2YWxpZExlbiA9IGxlblxuXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSB2YWxpZExlbiA9PT0gbGVuXG4gICAgPyAwXG4gICAgOiA0IC0gKHZhbGlkTGVuICUgNClcblxuICByZXR1cm4gW3ZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW5dXG59XG5cbi8vIGJhc2U2NCBpcyA0LzMgKyB1cCB0byB0d28gY2hhcmFjdGVycyBvZiB0aGUgb3JpZ2luYWwgZGF0YVxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoYjY0KSB7XG4gIHZhciBsZW5zID0gZ2V0TGVucyhiNjQpXG4gIHZhciB2YWxpZExlbiA9IGxlbnNbMF1cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IGxlbnNbMV1cbiAgcmV0dXJuICgodmFsaWRMZW4gKyBwbGFjZUhvbGRlcnNMZW4pICogMyAvIDQpIC0gcGxhY2VIb2xkZXJzTGVuXG59XG5cbmZ1bmN0aW9uIF9ieXRlTGVuZ3RoIChiNjQsIHZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW4pIHtcbiAgcmV0dXJuICgodmFsaWRMZW4gKyBwbGFjZUhvbGRlcnNMZW4pICogMyAvIDQpIC0gcGxhY2VIb2xkZXJzTGVuXG59XG5cbmZ1bmN0aW9uIHRvQnl0ZUFycmF5IChiNjQpIHtcbiAgdmFyIHRtcFxuICB2YXIgbGVucyA9IGdldExlbnMoYjY0KVxuICB2YXIgdmFsaWRMZW4gPSBsZW5zWzBdXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSBsZW5zWzFdXG5cbiAgdmFyIGFyciA9IG5ldyBBcnIoX2J5dGVMZW5ndGgoYjY0LCB2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuKSlcblxuICB2YXIgY3VyQnl0ZSA9IDBcblxuICAvLyBpZiB0aGVyZSBhcmUgcGxhY2Vob2xkZXJzLCBvbmx5IGdldCB1cCB0byB0aGUgbGFzdCBjb21wbGV0ZSA0IGNoYXJzXG4gIHZhciBsZW4gPSBwbGFjZUhvbGRlcnNMZW4gPiAwXG4gICAgPyB2YWxpZExlbiAtIDRcbiAgICA6IHZhbGlkTGVuXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxOCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDEyKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPDwgNikgfFxuICAgICAgcmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAzKV1cbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gMTYpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIGlmIChwbGFjZUhvbGRlcnNMZW4gPT09IDIpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMikgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldID4+IDQpXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICBpZiAocGxhY2VIb2xkZXJzTGVuID09PSAxKSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDEwKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgNCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildID4+IDIpXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIGFyclxufVxuXG5mdW5jdGlvbiB0cmlwbGV0VG9CYXNlNjQgKG51bSkge1xuICByZXR1cm4gbG9va3VwW251bSA+PiAxOCAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtID4+IDEyICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gPj4gNiAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtICYgMHgzRl1cbn1cblxuZnVuY3Rpb24gZW5jb2RlQ2h1bmsgKHVpbnQ4LCBzdGFydCwgZW5kKSB7XG4gIHZhciB0bXBcbiAgdmFyIG91dHB1dCA9IFtdXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSArPSAzKSB7XG4gICAgdG1wID1cbiAgICAgICgodWludDhbaV0gPDwgMTYpICYgMHhGRjAwMDApICtcbiAgICAgICgodWludDhbaSArIDFdIDw8IDgpICYgMHhGRjAwKSArXG4gICAgICAodWludDhbaSArIDJdICYgMHhGRilcbiAgICBvdXRwdXQucHVzaCh0cmlwbGV0VG9CYXNlNjQodG1wKSlcbiAgfVxuICByZXR1cm4gb3V0cHV0LmpvaW4oJycpXG59XG5cbmZ1bmN0aW9uIGZyb21CeXRlQXJyYXkgKHVpbnQ4KSB7XG4gIHZhciB0bXBcbiAgdmFyIGxlbiA9IHVpbnQ4Lmxlbmd0aFxuICB2YXIgZXh0cmFCeXRlcyA9IGxlbiAlIDMgLy8gaWYgd2UgaGF2ZSAxIGJ5dGUgbGVmdCwgcGFkIDIgYnl0ZXNcbiAgdmFyIHBhcnRzID0gW11cbiAgdmFyIG1heENodW5rTGVuZ3RoID0gMTYzODMgLy8gbXVzdCBiZSBtdWx0aXBsZSBvZiAzXG5cbiAgLy8gZ28gdGhyb3VnaCB0aGUgYXJyYXkgZXZlcnkgdGhyZWUgYnl0ZXMsIHdlJ2xsIGRlYWwgd2l0aCB0cmFpbGluZyBzdHVmZiBsYXRlclxuICBmb3IgKHZhciBpID0gMCwgbGVuMiA9IGxlbiAtIGV4dHJhQnl0ZXM7IGkgPCBsZW4yOyBpICs9IG1heENodW5rTGVuZ3RoKSB7XG4gICAgcGFydHMucHVzaChlbmNvZGVDaHVuayhcbiAgICAgIHVpbnQ4LCBpLCAoaSArIG1heENodW5rTGVuZ3RoKSA+IGxlbjIgPyBsZW4yIDogKGkgKyBtYXhDaHVua0xlbmd0aClcbiAgICApKVxuICB9XG5cbiAgLy8gcGFkIHRoZSBlbmQgd2l0aCB6ZXJvcywgYnV0IG1ha2Ugc3VyZSB0byBub3QgZm9yZ2V0IHRoZSBleHRyYSBieXRlc1xuICBpZiAoZXh0cmFCeXRlcyA9PT0gMSkge1xuICAgIHRtcCA9IHVpbnQ4W2xlbiAtIDFdXG4gICAgcGFydHMucHVzaChcbiAgICAgIGxvb2t1cFt0bXAgPj4gMl0gK1xuICAgICAgbG9va3VwWyh0bXAgPDwgNCkgJiAweDNGXSArXG4gICAgICAnPT0nXG4gICAgKVxuICB9IGVsc2UgaWYgKGV4dHJhQnl0ZXMgPT09IDIpIHtcbiAgICB0bXAgPSAodWludDhbbGVuIC0gMl0gPDwgOCkgKyB1aW50OFtsZW4gLSAxXVxuICAgIHBhcnRzLnB1c2goXG4gICAgICBsb29rdXBbdG1wID4+IDEwXSArXG4gICAgICBsb29rdXBbKHRtcCA+PiA0KSAmIDB4M0ZdICtcbiAgICAgIGxvb2t1cFsodG1wIDw8IDIpICYgMHgzRl0gK1xuICAgICAgJz0nXG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIHBhcnRzLmpvaW4oJycpXG59XG4iLCJleHBvcnRzLnJlYWQgPSBmdW5jdGlvbiAoYnVmZmVyLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbVxuICB2YXIgZUxlbiA9IChuQnl0ZXMgKiA4KSAtIG1MZW4gLSAxXG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMVxuICB2YXIgbkJpdHMgPSAtN1xuICB2YXIgaSA9IGlzTEUgPyAobkJ5dGVzIC0gMSkgOiAwXG4gIHZhciBkID0gaXNMRSA/IC0xIDogMVxuICB2YXIgcyA9IGJ1ZmZlcltvZmZzZXQgKyBpXVxuXG4gIGkgKz0gZFxuXG4gIGUgPSBzICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpXG4gIHMgPj49ICgtbkJpdHMpXG4gIG5CaXRzICs9IGVMZW5cbiAgZm9yICg7IG5CaXRzID4gMDsgZSA9IChlICogMjU2KSArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxuXG4gIG0gPSBlICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpXG4gIGUgPj49ICgtbkJpdHMpXG4gIG5CaXRzICs9IG1MZW5cbiAgZm9yICg7IG5CaXRzID4gMDsgbSA9IChtICogMjU2KSArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxuXG4gIGlmIChlID09PSAwKSB7XG4gICAgZSA9IDEgLSBlQmlhc1xuICB9IGVsc2UgaWYgKGUgPT09IGVNYXgpIHtcbiAgICByZXR1cm4gbSA/IE5hTiA6ICgocyA/IC0xIDogMSkgKiBJbmZpbml0eSlcbiAgfSBlbHNlIHtcbiAgICBtID0gbSArIE1hdGgucG93KDIsIG1MZW4pXG4gICAgZSA9IGUgLSBlQmlhc1xuICB9XG4gIHJldHVybiAocyA/IC0xIDogMSkgKiBtICogTWF0aC5wb3coMiwgZSAtIG1MZW4pXG59XG5cbmV4cG9ydHMud3JpdGUgPSBmdW5jdGlvbiAoYnVmZmVyLCB2YWx1ZSwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG0sIGNcbiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIHJ0ID0gKG1MZW4gPT09IDIzID8gTWF0aC5wb3coMiwgLTI0KSAtIE1hdGgucG93KDIsIC03NykgOiAwKVxuICB2YXIgaSA9IGlzTEUgPyAwIDogKG5CeXRlcyAtIDEpXG4gIHZhciBkID0gaXNMRSA/IDEgOiAtMVxuICB2YXIgcyA9IHZhbHVlIDwgMCB8fCAodmFsdWUgPT09IDAgJiYgMSAvIHZhbHVlIDwgMCkgPyAxIDogMFxuXG4gIHZhbHVlID0gTWF0aC5hYnModmFsdWUpXG5cbiAgaWYgKGlzTmFOKHZhbHVlKSB8fCB2YWx1ZSA9PT0gSW5maW5pdHkpIHtcbiAgICBtID0gaXNOYU4odmFsdWUpID8gMSA6IDBcbiAgICBlID0gZU1heFxuICB9IGVsc2Uge1xuICAgIGUgPSBNYXRoLmZsb29yKE1hdGgubG9nKHZhbHVlKSAvIE1hdGguTE4yKVxuICAgIGlmICh2YWx1ZSAqIChjID0gTWF0aC5wb3coMiwgLWUpKSA8IDEpIHtcbiAgICAgIGUtLVxuICAgICAgYyAqPSAyXG4gICAgfVxuICAgIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgdmFsdWUgKz0gcnQgLyBjXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlICs9IHJ0ICogTWF0aC5wb3coMiwgMSAtIGVCaWFzKVxuICAgIH1cbiAgICBpZiAodmFsdWUgKiBjID49IDIpIHtcbiAgICAgIGUrK1xuICAgICAgYyAvPSAyXG4gICAgfVxuXG4gICAgaWYgKGUgKyBlQmlhcyA+PSBlTWF4KSB7XG4gICAgICBtID0gMFxuICAgICAgZSA9IGVNYXhcbiAgICB9IGVsc2UgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBtID0gKCh2YWx1ZSAqIGMpIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuICAgICAgZSA9IGUgKyBlQmlhc1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gdmFsdWUgKiBNYXRoLnBvdygyLCBlQmlhcyAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSAwXG4gICAgfVxuICB9XG5cbiAgZm9yICg7IG1MZW4gPj0gODsgYnVmZmVyW29mZnNldCArIGldID0gbSAmIDB4ZmYsIGkgKz0gZCwgbSAvPSAyNTYsIG1MZW4gLT0gOCkge31cblxuICBlID0gKGUgPDwgbUxlbikgfCBtXG4gIGVMZW4gKz0gbUxlblxuICBmb3IgKDsgZUxlbiA+IDA7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IGUgJiAweGZmLCBpICs9IGQsIGUgLz0gMjU2LCBlTGVuIC09IDgpIHt9XG5cbiAgYnVmZmVyW29mZnNldCArIGkgLSBkXSB8PSBzICogMTI4XG59XG4iLCJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwiLyoqXG4gKiBBbiBhYnN0cmFjdGlvbiBmb3Igc2xpY2luZyBhbiBhcnJheWJ1ZmZlciBldmVuIHdoZW5cbiAqIEFycmF5QnVmZmVyLnByb3RvdHlwZS5zbGljZSBpcyBub3Qgc3VwcG9ydGVkXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGFycmF5YnVmZmVyLCBzdGFydCwgZW5kKSB7XG4gIHZhciBieXRlcyA9IGFycmF5YnVmZmVyLmJ5dGVMZW5ndGg7XG4gIHN0YXJ0ID0gc3RhcnQgfHwgMDtcbiAgZW5kID0gZW5kIHx8IGJ5dGVzO1xuXG4gIGlmIChhcnJheWJ1ZmZlci5zbGljZSkgeyByZXR1cm4gYXJyYXlidWZmZXIuc2xpY2Uoc3RhcnQsIGVuZCk7IH1cblxuICBpZiAoc3RhcnQgPCAwKSB7IHN0YXJ0ICs9IGJ5dGVzOyB9XG4gIGlmIChlbmQgPCAwKSB7IGVuZCArPSBieXRlczsgfVxuICBpZiAoZW5kID4gYnl0ZXMpIHsgZW5kID0gYnl0ZXM7IH1cblxuICBpZiAoc3RhcnQgPj0gYnl0ZXMgfHwgc3RhcnQgPj0gZW5kIHx8IGJ5dGVzID09PSAwKSB7XG4gICAgcmV0dXJuIG5ldyBBcnJheUJ1ZmZlcigwKTtcbiAgfVxuXG4gIHZhciBhYnYgPSBuZXcgVWludDhBcnJheShhcnJheWJ1ZmZlcik7XG4gIHZhciByZXN1bHQgPSBuZXcgVWludDhBcnJheShlbmQgLSBzdGFydCk7XG4gIGZvciAodmFyIGkgPSBzdGFydCwgaWkgPSAwOyBpIDwgZW5kOyBpKyssIGlpKyspIHtcbiAgICByZXN1bHRbaWldID0gYWJ2W2ldO1xuICB9XG4gIHJldHVybiByZXN1bHQuYnVmZmVyO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gYWZ0ZXJcblxuZnVuY3Rpb24gYWZ0ZXIoY291bnQsIGNhbGxiYWNrLCBlcnJfY2IpIHtcbiAgICB2YXIgYmFpbCA9IGZhbHNlXG4gICAgZXJyX2NiID0gZXJyX2NiIHx8IG5vb3BcbiAgICBwcm94eS5jb3VudCA9IGNvdW50XG5cbiAgICByZXR1cm4gKGNvdW50ID09PSAwKSA/IGNhbGxiYWNrKCkgOiBwcm94eVxuXG4gICAgZnVuY3Rpb24gcHJveHkoZXJyLCByZXN1bHQpIHtcbiAgICAgICAgaWYgKHByb3h5LmNvdW50IDw9IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignYWZ0ZXIgY2FsbGVkIHRvbyBtYW55IHRpbWVzJylcbiAgICAgICAgfVxuICAgICAgICAtLXByb3h5LmNvdW50XG5cbiAgICAgICAgLy8gYWZ0ZXIgZmlyc3QgZXJyb3IsIHJlc3QgYXJlIHBhc3NlZCB0byBlcnJfY2JcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgYmFpbCA9IHRydWVcbiAgICAgICAgICAgIGNhbGxiYWNrKGVycilcbiAgICAgICAgICAgIC8vIGZ1dHVyZSBlcnJvciBjYWxsYmFja3Mgd2lsbCBnbyB0byBlcnJvciBoYW5kbGVyXG4gICAgICAgICAgICBjYWxsYmFjayA9IGVycl9jYlxuICAgICAgICB9IGVsc2UgaWYgKHByb3h5LmNvdW50ID09PSAwICYmICFiYWlsKSB7XG4gICAgICAgICAgICBjYWxsYmFjayhudWxsLCByZXN1bHQpXG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuIiwiLyohIGh0dHBzOi8vbXRocy5iZS91dGY4anMgdjIuMS4yIGJ5IEBtYXRoaWFzICovXG47KGZ1bmN0aW9uKHJvb3QpIHtcblxuXHQvLyBEZXRlY3QgZnJlZSB2YXJpYWJsZXMgYGV4cG9ydHNgXG5cdHZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHM7XG5cblx0Ly8gRGV0ZWN0IGZyZWUgdmFyaWFibGUgYG1vZHVsZWBcblx0dmFyIGZyZWVNb2R1bGUgPSB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJlxuXHRcdG1vZHVsZS5leHBvcnRzID09IGZyZWVFeHBvcnRzICYmIG1vZHVsZTtcblxuXHQvLyBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCwgZnJvbSBOb2RlLmpzIG9yIEJyb3dzZXJpZmllZCBjb2RlLFxuXHQvLyBhbmQgdXNlIGl0IGFzIGByb290YFxuXHR2YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsO1xuXHRpZiAoZnJlZUdsb2JhbC5nbG9iYWwgPT09IGZyZWVHbG9iYWwgfHwgZnJlZUdsb2JhbC53aW5kb3cgPT09IGZyZWVHbG9iYWwpIHtcblx0XHRyb290ID0gZnJlZUdsb2JhbDtcblx0fVxuXG5cdC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG5cdHZhciBzdHJpbmdGcm9tQ2hhckNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlO1xuXG5cdC8vIFRha2VuIGZyb20gaHR0cHM6Ly9tdGhzLmJlL3B1bnljb2RlXG5cdGZ1bmN0aW9uIHVjczJkZWNvZGUoc3RyaW5nKSB7XG5cdFx0dmFyIG91dHB1dCA9IFtdO1xuXHRcdHZhciBjb3VudGVyID0gMDtcblx0XHR2YXIgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aDtcblx0XHR2YXIgdmFsdWU7XG5cdFx0dmFyIGV4dHJhO1xuXHRcdHdoaWxlIChjb3VudGVyIDwgbGVuZ3RoKSB7XG5cdFx0XHR2YWx1ZSA9IHN0cmluZy5jaGFyQ29kZUF0KGNvdW50ZXIrKyk7XG5cdFx0XHRpZiAodmFsdWUgPj0gMHhEODAwICYmIHZhbHVlIDw9IDB4REJGRiAmJiBjb3VudGVyIDwgbGVuZ3RoKSB7XG5cdFx0XHRcdC8vIGhpZ2ggc3Vycm9nYXRlLCBhbmQgdGhlcmUgaXMgYSBuZXh0IGNoYXJhY3RlclxuXHRcdFx0XHRleHRyYSA9IHN0cmluZy5jaGFyQ29kZUF0KGNvdW50ZXIrKyk7XG5cdFx0XHRcdGlmICgoZXh0cmEgJiAweEZDMDApID09IDB4REMwMCkgeyAvLyBsb3cgc3Vycm9nYXRlXG5cdFx0XHRcdFx0b3V0cHV0LnB1c2goKCh2YWx1ZSAmIDB4M0ZGKSA8PCAxMCkgKyAoZXh0cmEgJiAweDNGRikgKyAweDEwMDAwKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQvLyB1bm1hdGNoZWQgc3Vycm9nYXRlOyBvbmx5IGFwcGVuZCB0aGlzIGNvZGUgdW5pdCwgaW4gY2FzZSB0aGUgbmV4dFxuXHRcdFx0XHRcdC8vIGNvZGUgdW5pdCBpcyB0aGUgaGlnaCBzdXJyb2dhdGUgb2YgYSBzdXJyb2dhdGUgcGFpclxuXHRcdFx0XHRcdG91dHB1dC5wdXNoKHZhbHVlKTtcblx0XHRcdFx0XHRjb3VudGVyLS07XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG91dHB1dC5wdXNoKHZhbHVlKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIG91dHB1dDtcblx0fVxuXG5cdC8vIFRha2VuIGZyb20gaHR0cHM6Ly9tdGhzLmJlL3B1bnljb2RlXG5cdGZ1bmN0aW9uIHVjczJlbmNvZGUoYXJyYXkpIHtcblx0XHR2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXHRcdHZhciBpbmRleCA9IC0xO1xuXHRcdHZhciB2YWx1ZTtcblx0XHR2YXIgb3V0cHV0ID0gJyc7XG5cdFx0d2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcblx0XHRcdHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuXHRcdFx0aWYgKHZhbHVlID4gMHhGRkZGKSB7XG5cdFx0XHRcdHZhbHVlIC09IDB4MTAwMDA7XG5cdFx0XHRcdG91dHB1dCArPSBzdHJpbmdGcm9tQ2hhckNvZGUodmFsdWUgPj4+IDEwICYgMHgzRkYgfCAweEQ4MDApO1xuXHRcdFx0XHR2YWx1ZSA9IDB4REMwMCB8IHZhbHVlICYgMHgzRkY7XG5cdFx0XHR9XG5cdFx0XHRvdXRwdXQgKz0gc3RyaW5nRnJvbUNoYXJDb2RlKHZhbHVlKTtcblx0XHR9XG5cdFx0cmV0dXJuIG91dHB1dDtcblx0fVxuXG5cdGZ1bmN0aW9uIGNoZWNrU2NhbGFyVmFsdWUoY29kZVBvaW50LCBzdHJpY3QpIHtcblx0XHRpZiAoY29kZVBvaW50ID49IDB4RDgwMCAmJiBjb2RlUG9pbnQgPD0gMHhERkZGKSB7XG5cdFx0XHRpZiAoc3RyaWN0KSB7XG5cdFx0XHRcdHRocm93IEVycm9yKFxuXHRcdFx0XHRcdCdMb25lIHN1cnJvZ2F0ZSBVKycgKyBjb2RlUG9pbnQudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCkgK1xuXHRcdFx0XHRcdCcgaXMgbm90IGEgc2NhbGFyIHZhbHVlJ1xuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXHQvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuXHRmdW5jdGlvbiBjcmVhdGVCeXRlKGNvZGVQb2ludCwgc2hpZnQpIHtcblx0XHRyZXR1cm4gc3RyaW5nRnJvbUNoYXJDb2RlKCgoY29kZVBvaW50ID4+IHNoaWZ0KSAmIDB4M0YpIHwgMHg4MCk7XG5cdH1cblxuXHRmdW5jdGlvbiBlbmNvZGVDb2RlUG9pbnQoY29kZVBvaW50LCBzdHJpY3QpIHtcblx0XHRpZiAoKGNvZGVQb2ludCAmIDB4RkZGRkZGODApID09IDApIHsgLy8gMS1ieXRlIHNlcXVlbmNlXG5cdFx0XHRyZXR1cm4gc3RyaW5nRnJvbUNoYXJDb2RlKGNvZGVQb2ludCk7XG5cdFx0fVxuXHRcdHZhciBzeW1ib2wgPSAnJztcblx0XHRpZiAoKGNvZGVQb2ludCAmIDB4RkZGRkY4MDApID09IDApIHsgLy8gMi1ieXRlIHNlcXVlbmNlXG5cdFx0XHRzeW1ib2wgPSBzdHJpbmdGcm9tQ2hhckNvZGUoKChjb2RlUG9pbnQgPj4gNikgJiAweDFGKSB8IDB4QzApO1xuXHRcdH1cblx0XHRlbHNlIGlmICgoY29kZVBvaW50ICYgMHhGRkZGMDAwMCkgPT0gMCkgeyAvLyAzLWJ5dGUgc2VxdWVuY2Vcblx0XHRcdGlmICghY2hlY2tTY2FsYXJWYWx1ZShjb2RlUG9pbnQsIHN0cmljdCkpIHtcblx0XHRcdFx0Y29kZVBvaW50ID0gMHhGRkZEO1xuXHRcdFx0fVxuXHRcdFx0c3ltYm9sID0gc3RyaW5nRnJvbUNoYXJDb2RlKCgoY29kZVBvaW50ID4+IDEyKSAmIDB4MEYpIHwgMHhFMCk7XG5cdFx0XHRzeW1ib2wgKz0gY3JlYXRlQnl0ZShjb2RlUG9pbnQsIDYpO1xuXHRcdH1cblx0XHRlbHNlIGlmICgoY29kZVBvaW50ICYgMHhGRkUwMDAwMCkgPT0gMCkgeyAvLyA0LWJ5dGUgc2VxdWVuY2Vcblx0XHRcdHN5bWJvbCA9IHN0cmluZ0Zyb21DaGFyQ29kZSgoKGNvZGVQb2ludCA+PiAxOCkgJiAweDA3KSB8IDB4RjApO1xuXHRcdFx0c3ltYm9sICs9IGNyZWF0ZUJ5dGUoY29kZVBvaW50LCAxMik7XG5cdFx0XHRzeW1ib2wgKz0gY3JlYXRlQnl0ZShjb2RlUG9pbnQsIDYpO1xuXHRcdH1cblx0XHRzeW1ib2wgKz0gc3RyaW5nRnJvbUNoYXJDb2RlKChjb2RlUG9pbnQgJiAweDNGKSB8IDB4ODApO1xuXHRcdHJldHVybiBzeW1ib2w7XG5cdH1cblxuXHRmdW5jdGlvbiB1dGY4ZW5jb2RlKHN0cmluZywgb3B0cykge1xuXHRcdG9wdHMgPSBvcHRzIHx8IHt9O1xuXHRcdHZhciBzdHJpY3QgPSBmYWxzZSAhPT0gb3B0cy5zdHJpY3Q7XG5cblx0XHR2YXIgY29kZVBvaW50cyA9IHVjczJkZWNvZGUoc3RyaW5nKTtcblx0XHR2YXIgbGVuZ3RoID0gY29kZVBvaW50cy5sZW5ndGg7XG5cdFx0dmFyIGluZGV4ID0gLTE7XG5cdFx0dmFyIGNvZGVQb2ludDtcblx0XHR2YXIgYnl0ZVN0cmluZyA9ICcnO1xuXHRcdHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG5cdFx0XHRjb2RlUG9pbnQgPSBjb2RlUG9pbnRzW2luZGV4XTtcblx0XHRcdGJ5dGVTdHJpbmcgKz0gZW5jb2RlQ29kZVBvaW50KGNvZGVQb2ludCwgc3RyaWN0KTtcblx0XHR9XG5cdFx0cmV0dXJuIGJ5dGVTdHJpbmc7XG5cdH1cblxuXHQvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuXHRmdW5jdGlvbiByZWFkQ29udGludWF0aW9uQnl0ZSgpIHtcblx0XHRpZiAoYnl0ZUluZGV4ID49IGJ5dGVDb3VudCkge1xuXHRcdFx0dGhyb3cgRXJyb3IoJ0ludmFsaWQgYnl0ZSBpbmRleCcpO1xuXHRcdH1cblxuXHRcdHZhciBjb250aW51YXRpb25CeXRlID0gYnl0ZUFycmF5W2J5dGVJbmRleF0gJiAweEZGO1xuXHRcdGJ5dGVJbmRleCsrO1xuXG5cdFx0aWYgKChjb250aW51YXRpb25CeXRlICYgMHhDMCkgPT0gMHg4MCkge1xuXHRcdFx0cmV0dXJuIGNvbnRpbnVhdGlvbkJ5dGUgJiAweDNGO1xuXHRcdH1cblxuXHRcdC8vIElmIHdlIGVuZCB1cCBoZXJlLCBpdOKAmXMgbm90IGEgY29udGludWF0aW9uIGJ5dGVcblx0XHR0aHJvdyBFcnJvcignSW52YWxpZCBjb250aW51YXRpb24gYnl0ZScpO1xuXHR9XG5cblx0ZnVuY3Rpb24gZGVjb2RlU3ltYm9sKHN0cmljdCkge1xuXHRcdHZhciBieXRlMTtcblx0XHR2YXIgYnl0ZTI7XG5cdFx0dmFyIGJ5dGUzO1xuXHRcdHZhciBieXRlNDtcblx0XHR2YXIgY29kZVBvaW50O1xuXG5cdFx0aWYgKGJ5dGVJbmRleCA+IGJ5dGVDb3VudCkge1xuXHRcdFx0dGhyb3cgRXJyb3IoJ0ludmFsaWQgYnl0ZSBpbmRleCcpO1xuXHRcdH1cblxuXHRcdGlmIChieXRlSW5kZXggPT0gYnl0ZUNvdW50KSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gUmVhZCBmaXJzdCBieXRlXG5cdFx0Ynl0ZTEgPSBieXRlQXJyYXlbYnl0ZUluZGV4XSAmIDB4RkY7XG5cdFx0Ynl0ZUluZGV4Kys7XG5cblx0XHQvLyAxLWJ5dGUgc2VxdWVuY2UgKG5vIGNvbnRpbnVhdGlvbiBieXRlcylcblx0XHRpZiAoKGJ5dGUxICYgMHg4MCkgPT0gMCkge1xuXHRcdFx0cmV0dXJuIGJ5dGUxO1xuXHRcdH1cblxuXHRcdC8vIDItYnl0ZSBzZXF1ZW5jZVxuXHRcdGlmICgoYnl0ZTEgJiAweEUwKSA9PSAweEMwKSB7XG5cdFx0XHRieXRlMiA9IHJlYWRDb250aW51YXRpb25CeXRlKCk7XG5cdFx0XHRjb2RlUG9pbnQgPSAoKGJ5dGUxICYgMHgxRikgPDwgNikgfCBieXRlMjtcblx0XHRcdGlmIChjb2RlUG9pbnQgPj0gMHg4MCkge1xuXHRcdFx0XHRyZXR1cm4gY29kZVBvaW50O1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhyb3cgRXJyb3IoJ0ludmFsaWQgY29udGludWF0aW9uIGJ5dGUnKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyAzLWJ5dGUgc2VxdWVuY2UgKG1heSBpbmNsdWRlIHVucGFpcmVkIHN1cnJvZ2F0ZXMpXG5cdFx0aWYgKChieXRlMSAmIDB4RjApID09IDB4RTApIHtcblx0XHRcdGJ5dGUyID0gcmVhZENvbnRpbnVhdGlvbkJ5dGUoKTtcblx0XHRcdGJ5dGUzID0gcmVhZENvbnRpbnVhdGlvbkJ5dGUoKTtcblx0XHRcdGNvZGVQb2ludCA9ICgoYnl0ZTEgJiAweDBGKSA8PCAxMikgfCAoYnl0ZTIgPDwgNikgfCBieXRlMztcblx0XHRcdGlmIChjb2RlUG9pbnQgPj0gMHgwODAwKSB7XG5cdFx0XHRcdHJldHVybiBjaGVja1NjYWxhclZhbHVlKGNvZGVQb2ludCwgc3RyaWN0KSA/IGNvZGVQb2ludCA6IDB4RkZGRDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRocm93IEVycm9yKCdJbnZhbGlkIGNvbnRpbnVhdGlvbiBieXRlJyk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gNC1ieXRlIHNlcXVlbmNlXG5cdFx0aWYgKChieXRlMSAmIDB4RjgpID09IDB4RjApIHtcblx0XHRcdGJ5dGUyID0gcmVhZENvbnRpbnVhdGlvbkJ5dGUoKTtcblx0XHRcdGJ5dGUzID0gcmVhZENvbnRpbnVhdGlvbkJ5dGUoKTtcblx0XHRcdGJ5dGU0ID0gcmVhZENvbnRpbnVhdGlvbkJ5dGUoKTtcblx0XHRcdGNvZGVQb2ludCA9ICgoYnl0ZTEgJiAweDA3KSA8PCAweDEyKSB8IChieXRlMiA8PCAweDBDKSB8XG5cdFx0XHRcdChieXRlMyA8PCAweDA2KSB8IGJ5dGU0O1xuXHRcdFx0aWYgKGNvZGVQb2ludCA+PSAweDAxMDAwMCAmJiBjb2RlUG9pbnQgPD0gMHgxMEZGRkYpIHtcblx0XHRcdFx0cmV0dXJuIGNvZGVQb2ludDtcblx0XHRcdH1cblx0XHR9XG5cblx0XHR0aHJvdyBFcnJvcignSW52YWxpZCBVVEYtOCBkZXRlY3RlZCcpO1xuXHR9XG5cblx0dmFyIGJ5dGVBcnJheTtcblx0dmFyIGJ5dGVDb3VudDtcblx0dmFyIGJ5dGVJbmRleDtcblx0ZnVuY3Rpb24gdXRmOGRlY29kZShieXRlU3RyaW5nLCBvcHRzKSB7XG5cdFx0b3B0cyA9IG9wdHMgfHwge307XG5cdFx0dmFyIHN0cmljdCA9IGZhbHNlICE9PSBvcHRzLnN0cmljdDtcblxuXHRcdGJ5dGVBcnJheSA9IHVjczJkZWNvZGUoYnl0ZVN0cmluZyk7XG5cdFx0Ynl0ZUNvdW50ID0gYnl0ZUFycmF5Lmxlbmd0aDtcblx0XHRieXRlSW5kZXggPSAwO1xuXHRcdHZhciBjb2RlUG9pbnRzID0gW107XG5cdFx0dmFyIHRtcDtcblx0XHR3aGlsZSAoKHRtcCA9IGRlY29kZVN5bWJvbChzdHJpY3QpKSAhPT0gZmFsc2UpIHtcblx0XHRcdGNvZGVQb2ludHMucHVzaCh0bXApO1xuXHRcdH1cblx0XHRyZXR1cm4gdWNzMmVuY29kZShjb2RlUG9pbnRzKTtcblx0fVxuXG5cdC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG5cdHZhciB1dGY4ID0ge1xuXHRcdCd2ZXJzaW9uJzogJzIuMS4yJyxcblx0XHQnZW5jb2RlJzogdXRmOGVuY29kZSxcblx0XHQnZGVjb2RlJzogdXRmOGRlY29kZVxuXHR9O1xuXG5cdC8vIFNvbWUgQU1EIGJ1aWxkIG9wdGltaXplcnMsIGxpa2Ugci5qcywgY2hlY2sgZm9yIHNwZWNpZmljIGNvbmRpdGlvbiBwYXR0ZXJuc1xuXHQvLyBsaWtlIHRoZSBmb2xsb3dpbmc6XG5cdGlmIChcblx0XHR0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiZcblx0XHR0eXBlb2YgZGVmaW5lLmFtZCA9PSAnb2JqZWN0JyAmJlxuXHRcdGRlZmluZS5hbWRcblx0KSB7XG5cdFx0ZGVmaW5lKGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIHV0Zjg7XG5cdFx0fSk7XG5cdH1cdGVsc2UgaWYgKGZyZWVFeHBvcnRzICYmICFmcmVlRXhwb3J0cy5ub2RlVHlwZSkge1xuXHRcdGlmIChmcmVlTW9kdWxlKSB7IC8vIGluIE5vZGUuanMgb3IgUmluZ29KUyB2MC44LjArXG5cdFx0XHRmcmVlTW9kdWxlLmV4cG9ydHMgPSB1dGY4O1xuXHRcdH0gZWxzZSB7IC8vIGluIE5hcndoYWwgb3IgUmluZ29KUyB2MC43LjAtXG5cdFx0XHR2YXIgb2JqZWN0ID0ge307XG5cdFx0XHR2YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3QuaGFzT3duUHJvcGVydHk7XG5cdFx0XHRmb3IgKHZhciBrZXkgaW4gdXRmOCkge1xuXHRcdFx0XHRoYXNPd25Qcm9wZXJ0eS5jYWxsKHV0ZjgsIGtleSkgJiYgKGZyZWVFeHBvcnRzW2tleV0gPSB1dGY4W2tleV0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fSBlbHNlIHsgLy8gaW4gUmhpbm8gb3IgYSB3ZWIgYnJvd3NlclxuXHRcdHJvb3QudXRmOCA9IHV0Zjg7XG5cdH1cblxufSh0aGlzKSk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuXHRpZiAoIW1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcblx0XHRtb2R1bGUucGF0aHMgPSBbXTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XG5cdH1cblx0cmV0dXJuIG1vZHVsZTtcbn07XG4iLCIvKlxuICogYmFzZTY0LWFycmF5YnVmZmVyXG4gKiBodHRwczovL2dpdGh1Yi5jb20vbmlrbGFzdmgvYmFzZTY0LWFycmF5YnVmZmVyXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDEyIE5pa2xhcyB2b24gSGVydHplblxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuICovXG4oZnVuY3Rpb24oKXtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIGNoYXJzID0gXCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvXCI7XG5cbiAgLy8gVXNlIGEgbG9va3VwIHRhYmxlIHRvIGZpbmQgdGhlIGluZGV4LlxuICB2YXIgbG9va3VwID0gbmV3IFVpbnQ4QXJyYXkoMjU2KTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGFycy5sZW5ndGg7IGkrKykge1xuICAgIGxvb2t1cFtjaGFycy5jaGFyQ29kZUF0KGkpXSA9IGk7XG4gIH1cblxuICBleHBvcnRzLmVuY29kZSA9IGZ1bmN0aW9uKGFycmF5YnVmZmVyKSB7XG4gICAgdmFyIGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXlidWZmZXIpLFxuICAgIGksIGxlbiA9IGJ5dGVzLmxlbmd0aCwgYmFzZTY0ID0gXCJcIjtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrPTMpIHtcbiAgICAgIGJhc2U2NCArPSBjaGFyc1tieXRlc1tpXSA+PiAyXTtcbiAgICAgIGJhc2U2NCArPSBjaGFyc1soKGJ5dGVzW2ldICYgMykgPDwgNCkgfCAoYnl0ZXNbaSArIDFdID4+IDQpXTtcbiAgICAgIGJhc2U2NCArPSBjaGFyc1soKGJ5dGVzW2kgKyAxXSAmIDE1KSA8PCAyKSB8IChieXRlc1tpICsgMl0gPj4gNildO1xuICAgICAgYmFzZTY0ICs9IGNoYXJzW2J5dGVzW2kgKyAyXSAmIDYzXTtcbiAgICB9XG5cbiAgICBpZiAoKGxlbiAlIDMpID09PSAyKSB7XG4gICAgICBiYXNlNjQgPSBiYXNlNjQuc3Vic3RyaW5nKDAsIGJhc2U2NC5sZW5ndGggLSAxKSArIFwiPVwiO1xuICAgIH0gZWxzZSBpZiAobGVuICUgMyA9PT0gMSkge1xuICAgICAgYmFzZTY0ID0gYmFzZTY0LnN1YnN0cmluZygwLCBiYXNlNjQubGVuZ3RoIC0gMikgKyBcIj09XCI7XG4gICAgfVxuXG4gICAgcmV0dXJuIGJhc2U2NDtcbiAgfTtcblxuICBleHBvcnRzLmRlY29kZSA9ICBmdW5jdGlvbihiYXNlNjQpIHtcbiAgICB2YXIgYnVmZmVyTGVuZ3RoID0gYmFzZTY0Lmxlbmd0aCAqIDAuNzUsXG4gICAgbGVuID0gYmFzZTY0Lmxlbmd0aCwgaSwgcCA9IDAsXG4gICAgZW5jb2RlZDEsIGVuY29kZWQyLCBlbmNvZGVkMywgZW5jb2RlZDQ7XG5cbiAgICBpZiAoYmFzZTY0W2Jhc2U2NC5sZW5ndGggLSAxXSA9PT0gXCI9XCIpIHtcbiAgICAgIGJ1ZmZlckxlbmd0aC0tO1xuICAgICAgaWYgKGJhc2U2NFtiYXNlNjQubGVuZ3RoIC0gMl0gPT09IFwiPVwiKSB7XG4gICAgICAgIGJ1ZmZlckxlbmd0aC0tO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBhcnJheWJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcihidWZmZXJMZW5ndGgpLFxuICAgIGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXlidWZmZXIpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSs9NCkge1xuICAgICAgZW5jb2RlZDEgPSBsb29rdXBbYmFzZTY0LmNoYXJDb2RlQXQoaSldO1xuICAgICAgZW5jb2RlZDIgPSBsb29rdXBbYmFzZTY0LmNoYXJDb2RlQXQoaSsxKV07XG4gICAgICBlbmNvZGVkMyA9IGxvb2t1cFtiYXNlNjQuY2hhckNvZGVBdChpKzIpXTtcbiAgICAgIGVuY29kZWQ0ID0gbG9va3VwW2Jhc2U2NC5jaGFyQ29kZUF0KGkrMyldO1xuXG4gICAgICBieXRlc1twKytdID0gKGVuY29kZWQxIDw8IDIpIHwgKGVuY29kZWQyID4+IDQpO1xuICAgICAgYnl0ZXNbcCsrXSA9ICgoZW5jb2RlZDIgJiAxNSkgPDwgNCkgfCAoZW5jb2RlZDMgPj4gMik7XG4gICAgICBieXRlc1twKytdID0gKChlbmNvZGVkMyAmIDMpIDw8IDYpIHwgKGVuY29kZWQ0ICYgNjMpO1xuICAgIH1cblxuICAgIHJldHVybiBhcnJheWJ1ZmZlcjtcbiAgfTtcbn0pKCk7XG4iLCIvKipcbiAqIENyZWF0ZSBhIGJsb2IgYnVpbGRlciBldmVuIHdoZW4gdmVuZG9yIHByZWZpeGVzIGV4aXN0XG4gKi9cblxudmFyIEJsb2JCdWlsZGVyID0gZ2xvYmFsLkJsb2JCdWlsZGVyXG4gIHx8IGdsb2JhbC5XZWJLaXRCbG9iQnVpbGRlclxuICB8fCBnbG9iYWwuTVNCbG9iQnVpbGRlclxuICB8fCBnbG9iYWwuTW96QmxvYkJ1aWxkZXI7XG5cbi8qKlxuICogQ2hlY2sgaWYgQmxvYiBjb25zdHJ1Y3RvciBpcyBzdXBwb3J0ZWRcbiAqL1xuXG52YXIgYmxvYlN1cHBvcnRlZCA9IChmdW5jdGlvbigpIHtcbiAgdHJ5IHtcbiAgICB2YXIgYSA9IG5ldyBCbG9iKFsnaGknXSk7XG4gICAgcmV0dXJuIGEuc2l6ZSA9PT0gMjtcbiAgfSBjYXRjaChlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59KSgpO1xuXG4vKipcbiAqIENoZWNrIGlmIEJsb2IgY29uc3RydWN0b3Igc3VwcG9ydHMgQXJyYXlCdWZmZXJWaWV3c1xuICogRmFpbHMgaW4gU2FmYXJpIDYsIHNvIHdlIG5lZWQgdG8gbWFwIHRvIEFycmF5QnVmZmVycyB0aGVyZS5cbiAqL1xuXG52YXIgYmxvYlN1cHBvcnRzQXJyYXlCdWZmZXJWaWV3ID0gYmxvYlN1cHBvcnRlZCAmJiAoZnVuY3Rpb24oKSB7XG4gIHRyeSB7XG4gICAgdmFyIGIgPSBuZXcgQmxvYihbbmV3IFVpbnQ4QXJyYXkoWzEsMl0pXSk7XG4gICAgcmV0dXJuIGIuc2l6ZSA9PT0gMjtcbiAgfSBjYXRjaChlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59KSgpO1xuXG4vKipcbiAqIENoZWNrIGlmIEJsb2JCdWlsZGVyIGlzIHN1cHBvcnRlZFxuICovXG5cbnZhciBibG9iQnVpbGRlclN1cHBvcnRlZCA9IEJsb2JCdWlsZGVyXG4gICYmIEJsb2JCdWlsZGVyLnByb3RvdHlwZS5hcHBlbmRcbiAgJiYgQmxvYkJ1aWxkZXIucHJvdG90eXBlLmdldEJsb2I7XG5cbi8qKlxuICogSGVscGVyIGZ1bmN0aW9uIHRoYXQgbWFwcyBBcnJheUJ1ZmZlclZpZXdzIHRvIEFycmF5QnVmZmVyc1xuICogVXNlZCBieSBCbG9iQnVpbGRlciBjb25zdHJ1Y3RvciBhbmQgb2xkIGJyb3dzZXJzIHRoYXQgZGlkbid0XG4gKiBzdXBwb3J0IGl0IGluIHRoZSBCbG9iIGNvbnN0cnVjdG9yLlxuICovXG5cbmZ1bmN0aW9uIG1hcEFycmF5QnVmZmVyVmlld3MoYXJ5KSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJ5Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGNodW5rID0gYXJ5W2ldO1xuICAgIGlmIChjaHVuay5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgICAgdmFyIGJ1ZiA9IGNodW5rLmJ1ZmZlcjtcblxuICAgICAgLy8gaWYgdGhpcyBpcyBhIHN1YmFycmF5LCBtYWtlIGEgY29weSBzbyB3ZSBvbmx5XG4gICAgICAvLyBpbmNsdWRlIHRoZSBzdWJhcnJheSByZWdpb24gZnJvbSB0aGUgdW5kZXJseWluZyBidWZmZXJcbiAgICAgIGlmIChjaHVuay5ieXRlTGVuZ3RoICE9PSBidWYuYnl0ZUxlbmd0aCkge1xuICAgICAgICB2YXIgY29weSA9IG5ldyBVaW50OEFycmF5KGNodW5rLmJ5dGVMZW5ndGgpO1xuICAgICAgICBjb3B5LnNldChuZXcgVWludDhBcnJheShidWYsIGNodW5rLmJ5dGVPZmZzZXQsIGNodW5rLmJ5dGVMZW5ndGgpKTtcbiAgICAgICAgYnVmID0gY29weS5idWZmZXI7XG4gICAgICB9XG5cbiAgICAgIGFyeVtpXSA9IGJ1ZjtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gQmxvYkJ1aWxkZXJDb25zdHJ1Y3RvcihhcnksIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgdmFyIGJiID0gbmV3IEJsb2JCdWlsZGVyKCk7XG4gIG1hcEFycmF5QnVmZmVyVmlld3MoYXJ5KTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyeS5sZW5ndGg7IGkrKykge1xuICAgIGJiLmFwcGVuZChhcnlbaV0pO1xuICB9XG5cbiAgcmV0dXJuIChvcHRpb25zLnR5cGUpID8gYmIuZ2V0QmxvYihvcHRpb25zLnR5cGUpIDogYmIuZ2V0QmxvYigpO1xufTtcblxuZnVuY3Rpb24gQmxvYkNvbnN0cnVjdG9yKGFyeSwgb3B0aW9ucykge1xuICBtYXBBcnJheUJ1ZmZlclZpZXdzKGFyeSk7XG4gIHJldHVybiBuZXcgQmxvYihhcnksIG9wdGlvbnMgfHwge30pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSAoZnVuY3Rpb24oKSB7XG4gIGlmIChibG9iU3VwcG9ydGVkKSB7XG4gICAgcmV0dXJuIGJsb2JTdXBwb3J0c0FycmF5QnVmZmVyVmlldyA/IGdsb2JhbC5CbG9iIDogQmxvYkNvbnN0cnVjdG9yO1xuICB9IGVsc2UgaWYgKGJsb2JCdWlsZGVyU3VwcG9ydGVkKSB7XG4gICAgcmV0dXJuIEJsb2JCdWlsZGVyQ29uc3RydWN0b3I7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufSkoKTtcbiIsIlxuLyoqXG4gKiBUaGlzIGlzIHRoZSBjb21tb24gbG9naWMgZm9yIGJvdGggdGhlIE5vZGUuanMgYW5kIHdlYiBicm93c2VyXG4gKiBpbXBsZW1lbnRhdGlvbnMgb2YgYGRlYnVnKClgLlxuICpcbiAqIEV4cG9zZSBgZGVidWcoKWAgYXMgdGhlIG1vZHVsZS5cbiAqL1xuXG5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVEZWJ1Zy5kZWJ1ZyA9IGNyZWF0ZURlYnVnWydkZWZhdWx0J10gPSBjcmVhdGVEZWJ1ZztcbmV4cG9ydHMuY29lcmNlID0gY29lcmNlO1xuZXhwb3J0cy5kaXNhYmxlID0gZGlzYWJsZTtcbmV4cG9ydHMuZW5hYmxlID0gZW5hYmxlO1xuZXhwb3J0cy5lbmFibGVkID0gZW5hYmxlZDtcbmV4cG9ydHMuaHVtYW5pemUgPSByZXF1aXJlKCdtcycpO1xuXG4vKipcbiAqIEFjdGl2ZSBgZGVidWdgIGluc3RhbmNlcy5cbiAqL1xuZXhwb3J0cy5pbnN0YW5jZXMgPSBbXTtcblxuLyoqXG4gKiBUaGUgY3VycmVudGx5IGFjdGl2ZSBkZWJ1ZyBtb2RlIG5hbWVzLCBhbmQgbmFtZXMgdG8gc2tpcC5cbiAqL1xuXG5leHBvcnRzLm5hbWVzID0gW107XG5leHBvcnRzLnNraXBzID0gW107XG5cbi8qKlxuICogTWFwIG9mIHNwZWNpYWwgXCIlblwiIGhhbmRsaW5nIGZ1bmN0aW9ucywgZm9yIHRoZSBkZWJ1ZyBcImZvcm1hdFwiIGFyZ3VtZW50LlxuICpcbiAqIFZhbGlkIGtleSBuYW1lcyBhcmUgYSBzaW5nbGUsIGxvd2VyIG9yIHVwcGVyLWNhc2UgbGV0dGVyLCBpLmUuIFwiblwiIGFuZCBcIk5cIi5cbiAqL1xuXG5leHBvcnRzLmZvcm1hdHRlcnMgPSB7fTtcblxuLyoqXG4gKiBTZWxlY3QgYSBjb2xvci5cbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHNlbGVjdENvbG9yKG5hbWVzcGFjZSkge1xuICB2YXIgaGFzaCA9IDAsIGk7XG5cbiAgZm9yIChpIGluIG5hbWVzcGFjZSkge1xuICAgIGhhc2ggID0gKChoYXNoIDw8IDUpIC0gaGFzaCkgKyBuYW1lc3BhY2UuY2hhckNvZGVBdChpKTtcbiAgICBoYXNoIHw9IDA7IC8vIENvbnZlcnQgdG8gMzJiaXQgaW50ZWdlclxuICB9XG5cbiAgcmV0dXJuIGV4cG9ydHMuY29sb3JzW01hdGguYWJzKGhhc2gpICUgZXhwb3J0cy5jb2xvcnMubGVuZ3RoXTtcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBkZWJ1Z2dlciB3aXRoIHRoZSBnaXZlbiBgbmFtZXNwYWNlYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlRGVidWcobmFtZXNwYWNlKSB7XG5cbiAgdmFyIHByZXZUaW1lO1xuXG4gIGZ1bmN0aW9uIGRlYnVnKCkge1xuICAgIC8vIGRpc2FibGVkP1xuICAgIGlmICghZGVidWcuZW5hYmxlZCkgcmV0dXJuO1xuXG4gICAgdmFyIHNlbGYgPSBkZWJ1ZztcblxuICAgIC8vIHNldCBgZGlmZmAgdGltZXN0YW1wXG4gICAgdmFyIGN1cnIgPSArbmV3IERhdGUoKTtcbiAgICB2YXIgbXMgPSBjdXJyIC0gKHByZXZUaW1lIHx8IGN1cnIpO1xuICAgIHNlbGYuZGlmZiA9IG1zO1xuICAgIHNlbGYucHJldiA9IHByZXZUaW1lO1xuICAgIHNlbGYuY3VyciA9IGN1cnI7XG4gICAgcHJldlRpbWUgPSBjdXJyO1xuXG4gICAgLy8gdHVybiB0aGUgYGFyZ3VtZW50c2AgaW50byBhIHByb3BlciBBcnJheVxuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpXTtcbiAgICB9XG5cbiAgICBhcmdzWzBdID0gZXhwb3J0cy5jb2VyY2UoYXJnc1swXSk7XG5cbiAgICBpZiAoJ3N0cmluZycgIT09IHR5cGVvZiBhcmdzWzBdKSB7XG4gICAgICAvLyBhbnl0aGluZyBlbHNlIGxldCdzIGluc3BlY3Qgd2l0aCAlT1xuICAgICAgYXJncy51bnNoaWZ0KCclTycpO1xuICAgIH1cblxuICAgIC8vIGFwcGx5IGFueSBgZm9ybWF0dGVyc2AgdHJhbnNmb3JtYXRpb25zXG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICBhcmdzWzBdID0gYXJnc1swXS5yZXBsYWNlKC8lKFthLXpBLVolXSkvZywgZnVuY3Rpb24obWF0Y2gsIGZvcm1hdCkge1xuICAgICAgLy8gaWYgd2UgZW5jb3VudGVyIGFuIGVzY2FwZWQgJSB0aGVuIGRvbid0IGluY3JlYXNlIHRoZSBhcnJheSBpbmRleFxuICAgICAgaWYgKG1hdGNoID09PSAnJSUnKSByZXR1cm4gbWF0Y2g7XG4gICAgICBpbmRleCsrO1xuICAgICAgdmFyIGZvcm1hdHRlciA9IGV4cG9ydHMuZm9ybWF0dGVyc1tmb3JtYXRdO1xuICAgICAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBmb3JtYXR0ZXIpIHtcbiAgICAgICAgdmFyIHZhbCA9IGFyZ3NbaW5kZXhdO1xuICAgICAgICBtYXRjaCA9IGZvcm1hdHRlci5jYWxsKHNlbGYsIHZhbCk7XG5cbiAgICAgICAgLy8gbm93IHdlIG5lZWQgdG8gcmVtb3ZlIGBhcmdzW2luZGV4XWAgc2luY2UgaXQncyBpbmxpbmVkIGluIHRoZSBgZm9ybWF0YFxuICAgICAgICBhcmdzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIGluZGV4LS07XG4gICAgICB9XG4gICAgICByZXR1cm4gbWF0Y2g7XG4gICAgfSk7XG5cbiAgICAvLyBhcHBseSBlbnYtc3BlY2lmaWMgZm9ybWF0dGluZyAoY29sb3JzLCBldGMuKVxuICAgIGV4cG9ydHMuZm9ybWF0QXJncy5jYWxsKHNlbGYsIGFyZ3MpO1xuXG4gICAgdmFyIGxvZ0ZuID0gZGVidWcubG9nIHx8IGV4cG9ydHMubG9nIHx8IGNvbnNvbGUubG9nLmJpbmQoY29uc29sZSk7XG4gICAgbG9nRm4uYXBwbHkoc2VsZiwgYXJncyk7XG4gIH1cblxuICBkZWJ1Zy5uYW1lc3BhY2UgPSBuYW1lc3BhY2U7XG4gIGRlYnVnLmVuYWJsZWQgPSBleHBvcnRzLmVuYWJsZWQobmFtZXNwYWNlKTtcbiAgZGVidWcudXNlQ29sb3JzID0gZXhwb3J0cy51c2VDb2xvcnMoKTtcbiAgZGVidWcuY29sb3IgPSBzZWxlY3RDb2xvcihuYW1lc3BhY2UpO1xuICBkZWJ1Zy5kZXN0cm95ID0gZGVzdHJveTtcblxuICAvLyBlbnYtc3BlY2lmaWMgaW5pdGlhbGl6YXRpb24gbG9naWMgZm9yIGRlYnVnIGluc3RhbmNlc1xuICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGV4cG9ydHMuaW5pdCkge1xuICAgIGV4cG9ydHMuaW5pdChkZWJ1Zyk7XG4gIH1cblxuICBleHBvcnRzLmluc3RhbmNlcy5wdXNoKGRlYnVnKTtcblxuICByZXR1cm4gZGVidWc7XG59XG5cbmZ1bmN0aW9uIGRlc3Ryb3kgKCkge1xuICB2YXIgaW5kZXggPSBleHBvcnRzLmluc3RhbmNlcy5pbmRleE9mKHRoaXMpO1xuICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgZXhwb3J0cy5pbnN0YW5jZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuLyoqXG4gKiBFbmFibGVzIGEgZGVidWcgbW9kZSBieSBuYW1lc3BhY2VzLiBUaGlzIGNhbiBpbmNsdWRlIG1vZGVzXG4gKiBzZXBhcmF0ZWQgYnkgYSBjb2xvbiBhbmQgd2lsZGNhcmRzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGVuYWJsZShuYW1lc3BhY2VzKSB7XG4gIGV4cG9ydHMuc2F2ZShuYW1lc3BhY2VzKTtcblxuICBleHBvcnRzLm5hbWVzID0gW107XG4gIGV4cG9ydHMuc2tpcHMgPSBbXTtcblxuICB2YXIgaTtcbiAgdmFyIHNwbGl0ID0gKHR5cGVvZiBuYW1lc3BhY2VzID09PSAnc3RyaW5nJyA/IG5hbWVzcGFjZXMgOiAnJykuc3BsaXQoL1tcXHMsXSsvKTtcbiAgdmFyIGxlbiA9IHNwbGl0Lmxlbmd0aDtcblxuICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoIXNwbGl0W2ldKSBjb250aW51ZTsgLy8gaWdub3JlIGVtcHR5IHN0cmluZ3NcbiAgICBuYW1lc3BhY2VzID0gc3BsaXRbaV0ucmVwbGFjZSgvXFwqL2csICcuKj8nKTtcbiAgICBpZiAobmFtZXNwYWNlc1swXSA9PT0gJy0nKSB7XG4gICAgICBleHBvcnRzLnNraXBzLnB1c2gobmV3IFJlZ0V4cCgnXicgKyBuYW1lc3BhY2VzLnN1YnN0cigxKSArICckJykpO1xuICAgIH0gZWxzZSB7XG4gICAgICBleHBvcnRzLm5hbWVzLnB1c2gobmV3IFJlZ0V4cCgnXicgKyBuYW1lc3BhY2VzICsgJyQnKSk7XG4gICAgfVxuICB9XG5cbiAgZm9yIChpID0gMDsgaSA8IGV4cG9ydHMuaW5zdGFuY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGluc3RhbmNlID0gZXhwb3J0cy5pbnN0YW5jZXNbaV07XG4gICAgaW5zdGFuY2UuZW5hYmxlZCA9IGV4cG9ydHMuZW5hYmxlZChpbnN0YW5jZS5uYW1lc3BhY2UpO1xuICB9XG59XG5cbi8qKlxuICogRGlzYWJsZSBkZWJ1ZyBvdXRwdXQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBkaXNhYmxlKCkge1xuICBleHBvcnRzLmVuYWJsZSgnJyk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBnaXZlbiBtb2RlIG5hbWUgaXMgZW5hYmxlZCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBlbmFibGVkKG5hbWUpIHtcbiAgaWYgKG5hbWVbbmFtZS5sZW5ndGggLSAxXSA9PT0gJyonKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgdmFyIGksIGxlbjtcbiAgZm9yIChpID0gMCwgbGVuID0gZXhwb3J0cy5za2lwcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGlmIChleHBvcnRzLnNraXBzW2ldLnRlc3QobmFtZSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgZm9yIChpID0gMCwgbGVuID0gZXhwb3J0cy5uYW1lcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGlmIChleHBvcnRzLm5hbWVzW2ldLnRlc3QobmFtZSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogQ29lcmNlIGB2YWxgLlxuICpcbiAqIEBwYXJhbSB7TWl4ZWR9IHZhbFxuICogQHJldHVybiB7TWl4ZWR9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBjb2VyY2UodmFsKSB7XG4gIGlmICh2YWwgaW5zdGFuY2VvZiBFcnJvcikgcmV0dXJuIHZhbC5zdGFjayB8fCB2YWwubWVzc2FnZTtcbiAgcmV0dXJuIHZhbDtcbn1cbiIsIlxuLyoqXG4gKiBNb2R1bGUgcmVxdWlyZW1lbnRzLlxuICovXG5cbnZhciBQb2xsaW5nID0gcmVxdWlyZSgnLi9wb2xsaW5nJyk7XG52YXIgaW5oZXJpdCA9IHJlcXVpcmUoJ2NvbXBvbmVudC1pbmhlcml0Jyk7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBKU09OUFBvbGxpbmc7XG5cbi8qKlxuICogQ2FjaGVkIHJlZ3VsYXIgZXhwcmVzc2lvbnMuXG4gKi9cblxudmFyIHJOZXdsaW5lID0gL1xcbi9nO1xudmFyIHJFc2NhcGVkTmV3bGluZSA9IC9cXFxcbi9nO1xuXG4vKipcbiAqIEdsb2JhbCBKU09OUCBjYWxsYmFja3MuXG4gKi9cblxudmFyIGNhbGxiYWNrcztcblxuLyoqXG4gKiBOb29wLlxuICovXG5cbmZ1bmN0aW9uIGVtcHR5ICgpIHsgfVxuXG4vKipcbiAqIEpTT05QIFBvbGxpbmcgY29uc3RydWN0b3IuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdHMuXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIEpTT05QUG9sbGluZyAob3B0cykge1xuICBQb2xsaW5nLmNhbGwodGhpcywgb3B0cyk7XG5cbiAgdGhpcy5xdWVyeSA9IHRoaXMucXVlcnkgfHwge307XG5cbiAgLy8gZGVmaW5lIGdsb2JhbCBjYWxsYmFja3MgYXJyYXkgaWYgbm90IHByZXNlbnRcbiAgLy8gd2UgZG8gdGhpcyBoZXJlIChsYXppbHkpIHRvIGF2b2lkIHVubmVlZGVkIGdsb2JhbCBwb2xsdXRpb25cbiAgaWYgKCFjYWxsYmFja3MpIHtcbiAgICAvLyB3ZSBuZWVkIHRvIGNvbnNpZGVyIG11bHRpcGxlIGVuZ2luZXMgaW4gdGhlIHNhbWUgcGFnZVxuICAgIGlmICghZ2xvYmFsLl9fX2VpbykgZ2xvYmFsLl9fX2VpbyA9IFtdO1xuICAgIGNhbGxiYWNrcyA9IGdsb2JhbC5fX19laW87XG4gIH1cblxuICAvLyBjYWxsYmFjayBpZGVudGlmaWVyXG4gIHRoaXMuaW5kZXggPSBjYWxsYmFja3MubGVuZ3RoO1xuXG4gIC8vIGFkZCBjYWxsYmFjayB0byBqc29ucCBnbG9iYWxcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBjYWxsYmFja3MucHVzaChmdW5jdGlvbiAobXNnKSB7XG4gICAgc2VsZi5vbkRhdGEobXNnKTtcbiAgfSk7XG5cbiAgLy8gYXBwZW5kIHRvIHF1ZXJ5IHN0cmluZ1xuICB0aGlzLnF1ZXJ5LmogPSB0aGlzLmluZGV4O1xuXG4gIC8vIHByZXZlbnQgc3B1cmlvdXMgZXJyb3JzIGZyb20gYmVpbmcgZW1pdHRlZCB3aGVuIHRoZSB3aW5kb3cgaXMgdW5sb2FkZWRcbiAgaWYgKGdsb2JhbC5kb2N1bWVudCAmJiBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKCdiZWZvcmV1bmxvYWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoc2VsZi5zY3JpcHQpIHNlbGYuc2NyaXB0Lm9uZXJyb3IgPSBlbXB0eTtcbiAgICB9LCBmYWxzZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBJbmhlcml0cyBmcm9tIFBvbGxpbmcuXG4gKi9cblxuaW5oZXJpdChKU09OUFBvbGxpbmcsIFBvbGxpbmcpO1xuXG4vKlxuICogSlNPTlAgb25seSBzdXBwb3J0cyBiaW5hcnkgYXMgYmFzZTY0IGVuY29kZWQgc3RyaW5nc1xuICovXG5cbkpTT05QUG9sbGluZy5wcm90b3R5cGUuc3VwcG9ydHNCaW5hcnkgPSBmYWxzZTtcblxuLyoqXG4gKiBDbG9zZXMgdGhlIHNvY2tldC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5KU09OUFBvbGxpbmcucHJvdG90eXBlLmRvQ2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLnNjcmlwdCkge1xuICAgIHRoaXMuc2NyaXB0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5zY3JpcHQpO1xuICAgIHRoaXMuc2NyaXB0ID0gbnVsbDtcbiAgfVxuXG4gIGlmICh0aGlzLmZvcm0pIHtcbiAgICB0aGlzLmZvcm0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmZvcm0pO1xuICAgIHRoaXMuZm9ybSA9IG51bGw7XG4gICAgdGhpcy5pZnJhbWUgPSBudWxsO1xuICB9XG5cbiAgUG9sbGluZy5wcm90b3R5cGUuZG9DbG9zZS5jYWxsKHRoaXMpO1xufTtcblxuLyoqXG4gKiBTdGFydHMgYSBwb2xsIGN5Y2xlLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbkpTT05QUG9sbGluZy5wcm90b3R5cGUuZG9Qb2xsID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcblxuICBpZiAodGhpcy5zY3JpcHQpIHtcbiAgICB0aGlzLnNjcmlwdC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuc2NyaXB0KTtcbiAgICB0aGlzLnNjcmlwdCA9IG51bGw7XG4gIH1cblxuICBzY3JpcHQuYXN5bmMgPSB0cnVlO1xuICBzY3JpcHQuc3JjID0gdGhpcy51cmkoKTtcbiAgc2NyaXB0Lm9uZXJyb3IgPSBmdW5jdGlvbiAoZSkge1xuICAgIHNlbGYub25FcnJvcignanNvbnAgcG9sbCBlcnJvcicsIGUpO1xuICB9O1xuXG4gIHZhciBpbnNlcnRBdCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKVswXTtcbiAgaWYgKGluc2VydEF0KSB7XG4gICAgaW5zZXJ0QXQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoc2NyaXB0LCBpbnNlcnRBdCk7XG4gIH0gZWxzZSB7XG4gICAgKGRvY3VtZW50LmhlYWQgfHwgZG9jdW1lbnQuYm9keSkuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbiAgfVxuICB0aGlzLnNjcmlwdCA9IHNjcmlwdDtcblxuICB2YXIgaXNVQWdlY2tvID0gJ3VuZGVmaW5lZCcgIT09IHR5cGVvZiBuYXZpZ2F0b3IgJiYgL2dlY2tvL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcblxuICBpZiAoaXNVQWdlY2tvKSB7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgaWZyYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7XG4gICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGlmcmFtZSk7XG4gICAgfSwgMTAwKTtcbiAgfVxufTtcblxuLyoqXG4gKiBXcml0ZXMgd2l0aCBhIGhpZGRlbiBpZnJhbWUuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGRhdGEgdG8gc2VuZFxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGVkIHVwb24gZmx1c2guXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5KU09OUFBvbGxpbmcucHJvdG90eXBlLmRvV3JpdGUgPSBmdW5jdGlvbiAoZGF0YSwgZm4pIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIGlmICghdGhpcy5mb3JtKSB7XG4gICAgdmFyIGZvcm0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdmb3JtJyk7XG4gICAgdmFyIGFyZWEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZXh0YXJlYScpO1xuICAgIHZhciBpZCA9IHRoaXMuaWZyYW1lSWQgPSAnZWlvX2lmcmFtZV8nICsgdGhpcy5pbmRleDtcbiAgICB2YXIgaWZyYW1lO1xuXG4gICAgZm9ybS5jbGFzc05hbWUgPSAnc29ja2V0aW8nO1xuICAgIGZvcm0uc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICAgIGZvcm0uc3R5bGUudG9wID0gJy0xMDAwcHgnO1xuICAgIGZvcm0uc3R5bGUubGVmdCA9ICctMTAwMHB4JztcbiAgICBmb3JtLnRhcmdldCA9IGlkO1xuICAgIGZvcm0ubWV0aG9kID0gJ1BPU1QnO1xuICAgIGZvcm0uc2V0QXR0cmlidXRlKCdhY2NlcHQtY2hhcnNldCcsICd1dGYtOCcpO1xuICAgIGFyZWEubmFtZSA9ICdkJztcbiAgICBmb3JtLmFwcGVuZENoaWxkKGFyZWEpO1xuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZm9ybSk7XG5cbiAgICB0aGlzLmZvcm0gPSBmb3JtO1xuICAgIHRoaXMuYXJlYSA9IGFyZWE7XG4gIH1cblxuICB0aGlzLmZvcm0uYWN0aW9uID0gdGhpcy51cmkoKTtcblxuICBmdW5jdGlvbiBjb21wbGV0ZSAoKSB7XG4gICAgaW5pdElmcmFtZSgpO1xuICAgIGZuKCk7XG4gIH1cblxuICBmdW5jdGlvbiBpbml0SWZyYW1lICgpIHtcbiAgICBpZiAoc2VsZi5pZnJhbWUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHNlbGYuZm9ybS5yZW1vdmVDaGlsZChzZWxmLmlmcmFtZSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHNlbGYub25FcnJvcignanNvbnAgcG9sbGluZyBpZnJhbWUgcmVtb3ZhbCBlcnJvcicsIGUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICAvLyBpZTYgZHluYW1pYyBpZnJhbWVzIHdpdGggdGFyZ2V0PVwiXCIgc3VwcG9ydCAodGhhbmtzIENocmlzIExhbWJhY2hlcilcbiAgICAgIHZhciBodG1sID0gJzxpZnJhbWUgc3JjPVwiamF2YXNjcmlwdDowXCIgbmFtZT1cIicgKyBzZWxmLmlmcmFtZUlkICsgJ1wiPic7XG4gICAgICBpZnJhbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGh0bWwpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlmcmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lmcmFtZScpO1xuICAgICAgaWZyYW1lLm5hbWUgPSBzZWxmLmlmcmFtZUlkO1xuICAgICAgaWZyYW1lLnNyYyA9ICdqYXZhc2NyaXB0OjAnO1xuICAgIH1cblxuICAgIGlmcmFtZS5pZCA9IHNlbGYuaWZyYW1lSWQ7XG5cbiAgICBzZWxmLmZvcm0uYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgICBzZWxmLmlmcmFtZSA9IGlmcmFtZTtcbiAgfVxuXG4gIGluaXRJZnJhbWUoKTtcblxuICAvLyBlc2NhcGUgXFxuIHRvIHByZXZlbnQgaXQgZnJvbSBiZWluZyBjb252ZXJ0ZWQgaW50byBcXHJcXG4gYnkgc29tZSBVQXNcbiAgLy8gZG91YmxlIGVzY2FwaW5nIGlzIHJlcXVpcmVkIGZvciBlc2NhcGVkIG5ldyBsaW5lcyBiZWNhdXNlIHVuZXNjYXBpbmcgb2YgbmV3IGxpbmVzIGNhbiBiZSBkb25lIHNhZmVseSBvbiBzZXJ2ZXItc2lkZVxuICBkYXRhID0gZGF0YS5yZXBsYWNlKHJFc2NhcGVkTmV3bGluZSwgJ1xcXFxcXG4nKTtcbiAgdGhpcy5hcmVhLnZhbHVlID0gZGF0YS5yZXBsYWNlKHJOZXdsaW5lLCAnXFxcXG4nKTtcblxuICB0cnkge1xuICAgIHRoaXMuZm9ybS5zdWJtaXQoKTtcbiAgfSBjYXRjaCAoZSkge31cblxuICBpZiAodGhpcy5pZnJhbWUuYXR0YWNoRXZlbnQpIHtcbiAgICB0aGlzLmlmcmFtZS5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoc2VsZi5pZnJhbWUucmVhZHlTdGF0ZSA9PT0gJ2NvbXBsZXRlJykge1xuICAgICAgICBjb21wbGV0ZSgpO1xuICAgICAgfVxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5pZnJhbWUub25sb2FkID0gY29tcGxldGU7XG4gIH1cbn07XG4iLCIvKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxudmFyIFRyYW5zcG9ydCA9IHJlcXVpcmUoJy4uL3RyYW5zcG9ydCcpO1xudmFyIHBhcnNlciA9IHJlcXVpcmUoJ2VuZ2luZS5pby1wYXJzZXInKTtcbnZhciBwYXJzZXFzID0gcmVxdWlyZSgncGFyc2VxcycpO1xudmFyIGluaGVyaXQgPSByZXF1aXJlKCdjb21wb25lbnQtaW5oZXJpdCcpO1xudmFyIHllYXN0ID0gcmVxdWlyZSgneWVhc3QnKTtcbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ2VuZ2luZS5pby1jbGllbnQ6d2Vic29ja2V0Jyk7XG52YXIgQnJvd3NlcldlYlNvY2tldCA9IGdsb2JhbC5XZWJTb2NrZXQgfHwgZ2xvYmFsLk1veldlYlNvY2tldDtcbnZhciBOb2RlV2ViU29ja2V0O1xuaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSB7XG4gIHRyeSB7XG4gICAgTm9kZVdlYlNvY2tldCA9IHJlcXVpcmUoJ3dzJyk7XG4gIH0gY2F0Y2ggKGUpIHsgfVxufVxuXG4vKipcbiAqIEdldCBlaXRoZXIgdGhlIGBXZWJTb2NrZXRgIG9yIGBNb3pXZWJTb2NrZXRgIGdsb2JhbHNcbiAqIGluIHRoZSBicm93c2VyIG9yIHRyeSB0byByZXNvbHZlIFdlYlNvY2tldC1jb21wYXRpYmxlXG4gKiBpbnRlcmZhY2UgZXhwb3NlZCBieSBgd3NgIGZvciBOb2RlLWxpa2UgZW52aXJvbm1lbnQuXG4gKi9cblxudmFyIFdlYlNvY2tldCA9IEJyb3dzZXJXZWJTb2NrZXQ7XG5pZiAoIVdlYlNvY2tldCAmJiB0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJykge1xuICBXZWJTb2NrZXQgPSBOb2RlV2ViU29ja2V0O1xufVxuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gV1M7XG5cbi8qKlxuICogV2ViU29ja2V0IHRyYW5zcG9ydCBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAYXBpIHtPYmplY3R9IGNvbm5lY3Rpb24gb3B0aW9uc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBXUyAob3B0cykge1xuICB2YXIgZm9yY2VCYXNlNjQgPSAob3B0cyAmJiBvcHRzLmZvcmNlQmFzZTY0KTtcbiAgaWYgKGZvcmNlQmFzZTY0KSB7XG4gICAgdGhpcy5zdXBwb3J0c0JpbmFyeSA9IGZhbHNlO1xuICB9XG4gIHRoaXMucGVyTWVzc2FnZURlZmxhdGUgPSBvcHRzLnBlck1lc3NhZ2VEZWZsYXRlO1xuICB0aGlzLnVzaW5nQnJvd3NlcldlYlNvY2tldCA9IEJyb3dzZXJXZWJTb2NrZXQgJiYgIW9wdHMuZm9yY2VOb2RlO1xuICB0aGlzLnByb3RvY29scyA9IG9wdHMucHJvdG9jb2xzO1xuICBpZiAoIXRoaXMudXNpbmdCcm93c2VyV2ViU29ja2V0KSB7XG4gICAgV2ViU29ja2V0ID0gTm9kZVdlYlNvY2tldDtcbiAgfVxuICBUcmFuc3BvcnQuY2FsbCh0aGlzLCBvcHRzKTtcbn1cblxuLyoqXG4gKiBJbmhlcml0cyBmcm9tIFRyYW5zcG9ydC5cbiAqL1xuXG5pbmhlcml0KFdTLCBUcmFuc3BvcnQpO1xuXG4vKipcbiAqIFRyYW5zcG9ydCBuYW1lLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuV1MucHJvdG90eXBlLm5hbWUgPSAnd2Vic29ja2V0JztcblxuLypcbiAqIFdlYlNvY2tldHMgc3VwcG9ydCBiaW5hcnlcbiAqL1xuXG5XUy5wcm90b3R5cGUuc3VwcG9ydHNCaW5hcnkgPSB0cnVlO1xuXG4vKipcbiAqIE9wZW5zIHNvY2tldC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5XUy5wcm90b3R5cGUuZG9PcGVuID0gZnVuY3Rpb24gKCkge1xuICBpZiAoIXRoaXMuY2hlY2soKSkge1xuICAgIC8vIGxldCBwcm9iZSB0aW1lb3V0XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHVyaSA9IHRoaXMudXJpKCk7XG4gIHZhciBwcm90b2NvbHMgPSB0aGlzLnByb3RvY29scztcbiAgdmFyIG9wdHMgPSB7XG4gICAgYWdlbnQ6IHRoaXMuYWdlbnQsXG4gICAgcGVyTWVzc2FnZURlZmxhdGU6IHRoaXMucGVyTWVzc2FnZURlZmxhdGVcbiAgfTtcblxuICAvLyBTU0wgb3B0aW9ucyBmb3IgTm9kZS5qcyBjbGllbnRcbiAgb3B0cy5wZnggPSB0aGlzLnBmeDtcbiAgb3B0cy5rZXkgPSB0aGlzLmtleTtcbiAgb3B0cy5wYXNzcGhyYXNlID0gdGhpcy5wYXNzcGhyYXNlO1xuICBvcHRzLmNlcnQgPSB0aGlzLmNlcnQ7XG4gIG9wdHMuY2EgPSB0aGlzLmNhO1xuICBvcHRzLmNpcGhlcnMgPSB0aGlzLmNpcGhlcnM7XG4gIG9wdHMucmVqZWN0VW5hdXRob3JpemVkID0gdGhpcy5yZWplY3RVbmF1dGhvcml6ZWQ7XG4gIGlmICh0aGlzLmV4dHJhSGVhZGVycykge1xuICAgIG9wdHMuaGVhZGVycyA9IHRoaXMuZXh0cmFIZWFkZXJzO1xuICB9XG4gIGlmICh0aGlzLmxvY2FsQWRkcmVzcykge1xuICAgIG9wdHMubG9jYWxBZGRyZXNzID0gdGhpcy5sb2NhbEFkZHJlc3M7XG4gIH1cblxuICB0cnkge1xuICAgIHRoaXMud3MgPSB0aGlzLnVzaW5nQnJvd3NlcldlYlNvY2tldCA/IChwcm90b2NvbHMgPyBuZXcgV2ViU29ja2V0KHVyaSwgcHJvdG9jb2xzKSA6IG5ldyBXZWJTb2NrZXQodXJpKSkgOiBuZXcgV2ViU29ja2V0KHVyaSwgcHJvdG9jb2xzLCBvcHRzKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmV0dXJuIHRoaXMuZW1pdCgnZXJyb3InLCBlcnIpO1xuICB9XG5cbiAgaWYgKHRoaXMud3MuYmluYXJ5VHlwZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpcy5zdXBwb3J0c0JpbmFyeSA9IGZhbHNlO1xuICB9XG5cbiAgaWYgKHRoaXMud3Muc3VwcG9ydHMgJiYgdGhpcy53cy5zdXBwb3J0cy5iaW5hcnkpIHtcbiAgICB0aGlzLnN1cHBvcnRzQmluYXJ5ID0gdHJ1ZTtcbiAgICB0aGlzLndzLmJpbmFyeVR5cGUgPSAnbm9kZWJ1ZmZlcic7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy53cy5iaW5hcnlUeXBlID0gJ2FycmF5YnVmZmVyJztcbiAgfVxuXG4gIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcnMoKTtcbn07XG5cbi8qKlxuICogQWRkcyBldmVudCBsaXN0ZW5lcnMgdG8gdGhlIHNvY2tldFxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbldTLnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVycyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIHRoaXMud3Mub25vcGVuID0gZnVuY3Rpb24gKCkge1xuICAgIHNlbGYub25PcGVuKCk7XG4gIH07XG4gIHRoaXMud3Mub25jbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBzZWxmLm9uQ2xvc2UoKTtcbiAgfTtcbiAgdGhpcy53cy5vbm1lc3NhZ2UgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICBzZWxmLm9uRGF0YShldi5kYXRhKTtcbiAgfTtcbiAgdGhpcy53cy5vbmVycm9yID0gZnVuY3Rpb24gKGUpIHtcbiAgICBzZWxmLm9uRXJyb3IoJ3dlYnNvY2tldCBlcnJvcicsIGUpO1xuICB9O1xufTtcblxuLyoqXG4gKiBXcml0ZXMgZGF0YSB0byBzb2NrZXQuXG4gKlxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgb2YgcGFja2V0cy5cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbldTLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIChwYWNrZXRzKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdGhpcy53cml0YWJsZSA9IGZhbHNlO1xuXG4gIC8vIGVuY29kZVBhY2tldCBlZmZpY2llbnQgYXMgaXQgdXNlcyBXUyBmcmFtaW5nXG4gIC8vIG5vIG5lZWQgZm9yIGVuY29kZVBheWxvYWRcbiAgdmFyIHRvdGFsID0gcGFja2V0cy5sZW5ndGg7XG4gIGZvciAodmFyIGkgPSAwLCBsID0gdG90YWw7IGkgPCBsOyBpKyspIHtcbiAgICAoZnVuY3Rpb24gKHBhY2tldCkge1xuICAgICAgcGFyc2VyLmVuY29kZVBhY2tldChwYWNrZXQsIHNlbGYuc3VwcG9ydHNCaW5hcnksIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIGlmICghc2VsZi51c2luZ0Jyb3dzZXJXZWJTb2NrZXQpIHtcbiAgICAgICAgICAvLyBhbHdheXMgY3JlYXRlIGEgbmV3IG9iamVjdCAoR0gtNDM3KVxuICAgICAgICAgIHZhciBvcHRzID0ge307XG4gICAgICAgICAgaWYgKHBhY2tldC5vcHRpb25zKSB7XG4gICAgICAgICAgICBvcHRzLmNvbXByZXNzID0gcGFja2V0Lm9wdGlvbnMuY29tcHJlc3M7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHNlbGYucGVyTWVzc2FnZURlZmxhdGUpIHtcbiAgICAgICAgICAgIHZhciBsZW4gPSAnc3RyaW5nJyA9PT0gdHlwZW9mIGRhdGEgPyBnbG9iYWwuQnVmZmVyLmJ5dGVMZW5ndGgoZGF0YSkgOiBkYXRhLmxlbmd0aDtcbiAgICAgICAgICAgIGlmIChsZW4gPCBzZWxmLnBlck1lc3NhZ2VEZWZsYXRlLnRocmVzaG9sZCkge1xuICAgICAgICAgICAgICBvcHRzLmNvbXByZXNzID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gU29tZXRpbWVzIHRoZSB3ZWJzb2NrZXQgaGFzIGFscmVhZHkgYmVlbiBjbG9zZWQgYnV0IHRoZSBicm93c2VyIGRpZG4ndFxuICAgICAgICAvLyBoYXZlIGEgY2hhbmNlIG9mIGluZm9ybWluZyB1cyBhYm91dCBpdCB5ZXQsIGluIHRoYXQgY2FzZSBzZW5kIHdpbGxcbiAgICAgICAgLy8gdGhyb3cgYW4gZXJyb3JcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAoc2VsZi51c2luZ0Jyb3dzZXJXZWJTb2NrZXQpIHtcbiAgICAgICAgICAgIC8vIFR5cGVFcnJvciBpcyB0aHJvd24gd2hlbiBwYXNzaW5nIHRoZSBzZWNvbmQgYXJndW1lbnQgb24gU2FmYXJpXG4gICAgICAgICAgICBzZWxmLndzLnNlbmQoZGF0YSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNlbGYud3Muc2VuZChkYXRhLCBvcHRzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBkZWJ1Zygnd2Vic29ja2V0IGNsb3NlZCBiZWZvcmUgb25jbG9zZSBldmVudCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgLS10b3RhbCB8fCBkb25lKCk7XG4gICAgICB9KTtcbiAgICB9KShwYWNrZXRzW2ldKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRvbmUgKCkge1xuICAgIHNlbGYuZW1pdCgnZmx1c2gnKTtcblxuICAgIC8vIGZha2UgZHJhaW5cbiAgICAvLyBkZWZlciB0byBuZXh0IHRpY2sgdG8gYWxsb3cgU29ja2V0IHRvIGNsZWFyIHdyaXRlQnVmZmVyXG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBzZWxmLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgIHNlbGYuZW1pdCgnZHJhaW4nKTtcbiAgICB9LCAwKTtcbiAgfVxufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBjbG9zZVxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbldTLnByb3RvdHlwZS5vbkNsb3NlID0gZnVuY3Rpb24gKCkge1xuICBUcmFuc3BvcnQucHJvdG90eXBlLm9uQ2xvc2UuY2FsbCh0aGlzKTtcbn07XG5cbi8qKlxuICogQ2xvc2VzIHNvY2tldC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5XUy5wcm90b3R5cGUuZG9DbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHR5cGVvZiB0aGlzLndzICE9PSAndW5kZWZpbmVkJykge1xuICAgIHRoaXMud3MuY2xvc2UoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBHZW5lcmF0ZXMgdXJpIGZvciBjb25uZWN0aW9uLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbldTLnByb3RvdHlwZS51cmkgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBxdWVyeSA9IHRoaXMucXVlcnkgfHwge307XG4gIHZhciBzY2hlbWEgPSB0aGlzLnNlY3VyZSA/ICd3c3MnIDogJ3dzJztcbiAgdmFyIHBvcnQgPSAnJztcblxuICAvLyBhdm9pZCBwb3J0IGlmIGRlZmF1bHQgZm9yIHNjaGVtYVxuICBpZiAodGhpcy5wb3J0ICYmICgoJ3dzcycgPT09IHNjaGVtYSAmJiBOdW1iZXIodGhpcy5wb3J0KSAhPT0gNDQzKSB8fFxuICAgICgnd3MnID09PSBzY2hlbWEgJiYgTnVtYmVyKHRoaXMucG9ydCkgIT09IDgwKSkpIHtcbiAgICBwb3J0ID0gJzonICsgdGhpcy5wb3J0O1xuICB9XG5cbiAgLy8gYXBwZW5kIHRpbWVzdGFtcCB0byBVUklcbiAgaWYgKHRoaXMudGltZXN0YW1wUmVxdWVzdHMpIHtcbiAgICBxdWVyeVt0aGlzLnRpbWVzdGFtcFBhcmFtXSA9IHllYXN0KCk7XG4gIH1cblxuICAvLyBjb21tdW5pY2F0ZSBiaW5hcnkgc3VwcG9ydCBjYXBhYmlsaXRpZXNcbiAgaWYgKCF0aGlzLnN1cHBvcnRzQmluYXJ5KSB7XG4gICAgcXVlcnkuYjY0ID0gMTtcbiAgfVxuXG4gIHF1ZXJ5ID0gcGFyc2Vxcy5lbmNvZGUocXVlcnkpO1xuXG4gIC8vIHByZXBlbmQgPyB0byBxdWVyeVxuICBpZiAocXVlcnkubGVuZ3RoKSB7XG4gICAgcXVlcnkgPSAnPycgKyBxdWVyeTtcbiAgfVxuXG4gIHZhciBpcHY2ID0gdGhpcy5ob3N0bmFtZS5pbmRleE9mKCc6JykgIT09IC0xO1xuICByZXR1cm4gc2NoZW1hICsgJzovLycgKyAoaXB2NiA/ICdbJyArIHRoaXMuaG9zdG5hbWUgKyAnXScgOiB0aGlzLmhvc3RuYW1lKSArIHBvcnQgKyB0aGlzLnBhdGggKyBxdWVyeTtcbn07XG5cbi8qKlxuICogRmVhdHVyZSBkZXRlY3Rpb24gZm9yIFdlYlNvY2tldC5cbiAqXG4gKiBAcmV0dXJuIHtCb29sZWFufSB3aGV0aGVyIHRoaXMgdHJhbnNwb3J0IGlzIGF2YWlsYWJsZS5cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuV1MucHJvdG90eXBlLmNoZWNrID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gISFXZWJTb2NrZXQgJiYgISgnX19pbml0aWFsaXplJyBpbiBXZWJTb2NrZXQgJiYgdGhpcy5uYW1lID09PSBXUy5wcm90b3R5cGUubmFtZSk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB0b0FycmF5XG5cbmZ1bmN0aW9uIHRvQXJyYXkobGlzdCwgaW5kZXgpIHtcbiAgICB2YXIgYXJyYXkgPSBbXVxuXG4gICAgaW5kZXggPSBpbmRleCB8fCAwXG5cbiAgICBmb3IgKHZhciBpID0gaW5kZXggfHwgMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYXJyYXlbaSAtIGluZGV4XSA9IGxpc3RbaV1cbiAgICB9XG5cbiAgICByZXR1cm4gYXJyYXlcbn1cbiIsIlxuLyoqXG4gKiBFeHBvc2UgYEJhY2tvZmZgLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gQmFja29mZjtcblxuLyoqXG4gKiBJbml0aWFsaXplIGJhY2tvZmYgdGltZXIgd2l0aCBgb3B0c2AuXG4gKlxuICogLSBgbWluYCBpbml0aWFsIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzIFsxMDBdXG4gKiAtIGBtYXhgIG1heCB0aW1lb3V0IFsxMDAwMF1cbiAqIC0gYGppdHRlcmAgWzBdXG4gKiAtIGBmYWN0b3JgIFsyXVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIEJhY2tvZmYob3B0cykge1xuICBvcHRzID0gb3B0cyB8fCB7fTtcbiAgdGhpcy5tcyA9IG9wdHMubWluIHx8IDEwMDtcbiAgdGhpcy5tYXggPSBvcHRzLm1heCB8fCAxMDAwMDtcbiAgdGhpcy5mYWN0b3IgPSBvcHRzLmZhY3RvciB8fCAyO1xuICB0aGlzLmppdHRlciA9IG9wdHMuaml0dGVyID4gMCAmJiBvcHRzLmppdHRlciA8PSAxID8gb3B0cy5qaXR0ZXIgOiAwO1xuICB0aGlzLmF0dGVtcHRzID0gMDtcbn1cblxuLyoqXG4gKiBSZXR1cm4gdGhlIGJhY2tvZmYgZHVyYXRpb24uXG4gKlxuICogQHJldHVybiB7TnVtYmVyfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5CYWNrb2ZmLnByb3RvdHlwZS5kdXJhdGlvbiA9IGZ1bmN0aW9uKCl7XG4gIHZhciBtcyA9IHRoaXMubXMgKiBNYXRoLnBvdyh0aGlzLmZhY3RvciwgdGhpcy5hdHRlbXB0cysrKTtcbiAgaWYgKHRoaXMuaml0dGVyKSB7XG4gICAgdmFyIHJhbmQgPSAgTWF0aC5yYW5kb20oKTtcbiAgICB2YXIgZGV2aWF0aW9uID0gTWF0aC5mbG9vcihyYW5kICogdGhpcy5qaXR0ZXIgKiBtcyk7XG4gICAgbXMgPSAoTWF0aC5mbG9vcihyYW5kICogMTApICYgMSkgPT0gMCAgPyBtcyAtIGRldmlhdGlvbiA6IG1zICsgZGV2aWF0aW9uO1xuICB9XG4gIHJldHVybiBNYXRoLm1pbihtcywgdGhpcy5tYXgpIHwgMDtcbn07XG5cbi8qKlxuICogUmVzZXQgdGhlIG51bWJlciBvZiBhdHRlbXB0cy5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkJhY2tvZmYucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24oKXtcbiAgdGhpcy5hdHRlbXB0cyA9IDA7XG59O1xuXG4vKipcbiAqIFNldCB0aGUgbWluaW11bSBkdXJhdGlvblxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuQmFja29mZi5wcm90b3R5cGUuc2V0TWluID0gZnVuY3Rpb24obWluKXtcbiAgdGhpcy5tcyA9IG1pbjtcbn07XG5cbi8qKlxuICogU2V0IHRoZSBtYXhpbXVtIGR1cmF0aW9uXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5CYWNrb2ZmLnByb3RvdHlwZS5zZXRNYXggPSBmdW5jdGlvbihtYXgpe1xuICB0aGlzLm1heCA9IG1heDtcbn07XG5cbi8qKlxuICogU2V0IHRoZSBqaXR0ZXJcbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkJhY2tvZmYucHJvdG90eXBlLnNldEppdHRlciA9IGZ1bmN0aW9uKGppdHRlcil7XG4gIHRoaXMuaml0dGVyID0gaml0dGVyO1xufTtcblxuIl0sInNvdXJjZVJvb3QiOiIifQ==